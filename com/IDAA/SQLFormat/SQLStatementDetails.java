package com.IDAA.SQLFormat;
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SQLStatementDetails.proto

public final class SQLStatementDetails {
  private SQLStatementDetails() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface SQLStatementDetailsDataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SQLStatementDetailsData)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     **
     * This ID is unique within the scope of a single &#64;c DatabaseSystem (aka a pairing)
     * only. The highest used statement ID is stored persistently in file
     * "last-statement-id" in the same directory where the SQL history files reside.
     * </pre>
     *
     * <code>optional uint64 statement_id = 1;</code>
     * @return Whether the statementId field is set.
     */
    boolean hasStatementId();
    /**
     * <pre>
     **
     * This ID is unique within the scope of a single &#64;c DatabaseSystem (aka a pairing)
     * only. The highest used statement ID is stored persistently in file
     * "last-statement-id" in the same directory where the SQL history files reside.
     * </pre>
     *
     * <code>optional uint64 statement_id = 1;</code>
     * @return The statementId.
     */
    long getStatementId();

    /**
     * <pre>
     **
     * ID of the task that executes the SQL statement. Note that task IDs are reset
     * upon restart of the accelerator.
     * </pre>
     *
     * <code>optional uint64 task_id = 2;</code>
     * @return Whether the taskId field is set.
     */
    boolean hasTaskId();
    /**
     * <pre>
     **
     * ID of the task that executes the SQL statement. Note that task IDs are reset
     * upon restart of the accelerator.
     * </pre>
     *
     * <code>optional uint64 task_id = 2;</code>
     * @return The taskId.
     */
    long getTaskId();

    /**
     * <pre>
     **
     * Each client must provide a unique location name when the pairing is established.
     * That location name is stored for each SQL statement here.
     * </pre>
     *
     * <code>optional string database_system_location_name = 3;</code>
     * @return Whether the databaseSystemLocationName field is set.
     */
    boolean hasDatabaseSystemLocationName();
    /**
     * <pre>
     **
     * Each client must provide a unique location name when the pairing is established.
     * That location name is stored for each SQL statement here.
     * </pre>
     *
     * <code>optional string database_system_location_name = 3;</code>
     * @return The databaseSystemLocationName.
     */
    java.lang.String getDatabaseSystemLocationName();
    /**
     * <pre>
     **
     * Each client must provide a unique location name when the pairing is established.
     * That location name is stored for each SQL statement here.
     * </pre>
     *
     * <code>optional string database_system_location_name = 3;</code>
     * @return The bytes for databaseSystemLocationName.
     */
    com.google.protobuf.ByteString
        getDatabaseSystemLocationNameBytes();

    /**
     * <pre>
     **
     * The DRDA communication protocol used between the client and the accelerator
     * uses "correlation tokens" to identify the connection. The correlation token
     * is provided when the DRDA connection is established, and message ACCRDB
     * (Access Relational Database) carries it.
     * </pre>
     *
     * <code>optional string correlation_token = 4;</code>
     * @return Whether the correlationToken field is set.
     */
    boolean hasCorrelationToken();
    /**
     * <pre>
     **
     * The DRDA communication protocol used between the client and the accelerator
     * uses "correlation tokens" to identify the connection. The correlation token
     * is provided when the DRDA connection is established, and message ACCRDB
     * (Access Relational Database) carries it.
     * </pre>
     *
     * <code>optional string correlation_token = 4;</code>
     * @return The correlationToken.
     */
    java.lang.String getCorrelationToken();
    /**
     * <pre>
     **
     * The DRDA communication protocol used between the client and the accelerator
     * uses "correlation tokens" to identify the connection. The correlation token
     * is provided when the DRDA connection is established, and message ACCRDB
     * (Access Relational Database) carries it.
     * </pre>
     *
     * <code>optional string correlation_token = 4;</code>
     * @return The bytes for correlationToken.
     */
    com.google.protobuf.ByteString
        getCorrelationTokenBytes();

    /**
     * <pre>
     **
     * This is the user ID that was used when an application connects to the client
     * database system (DB2z) for executing the SQL statement.
     * </pre>
     *
     * <code>optional string original_user_id = 5;</code>
     * @return Whether the originalUserId field is set.
     */
    boolean hasOriginalUserId();
    /**
     * <pre>
     **
     * This is the user ID that was used when an application connects to the client
     * database system (DB2z) for executing the SQL statement.
     * </pre>
     *
     * <code>optional string original_user_id = 5;</code>
     * @return The originalUserId.
     */
    java.lang.String getOriginalUserId();
    /**
     * <pre>
     **
     * This is the user ID that was used when an application connects to the client
     * database system (DB2z) for executing the SQL statement.
     * </pre>
     *
     * <code>optional string original_user_id = 5;</code>
     * @return The bytes for originalUserId.
     */
    com.google.protobuf.ByteString
        getOriginalUserIdBytes();

    /**
     * <pre>
     **
     * The DRDA communication protocol used between the client and the accelerator
     * contains an "external name". This name is provided in DRDA message EXCSAT
     * (Exchange Server Attributes) in field EXTNAM (External Name).
     * </pre>
     *
     * <code>optional string external_name = 6;</code>
     * @return Whether the externalName field is set.
     */
    boolean hasExternalName();
    /**
     * <pre>
     **
     * The DRDA communication protocol used between the client and the accelerator
     * contains an "external name". This name is provided in DRDA message EXCSAT
     * (Exchange Server Attributes) in field EXTNAM (External Name).
     * </pre>
     *
     * <code>optional string external_name = 6;</code>
     * @return The externalName.
     */
    java.lang.String getExternalName();
    /**
     * <pre>
     **
     * The DRDA communication protocol used between the client and the accelerator
     * contains an "external name". This name is provided in DRDA message EXCSAT
     * (Exchange Server Attributes) in field EXTNAM (External Name).
     * </pre>
     *
     * <code>optional string external_name = 6;</code>
     * @return The bytes for externalName.
     */
    com.google.protobuf.ByteString
        getExternalNameBytes();

    /**
     * <pre>
     **
     * The client's IP address is obtained from the TCP/IP connection itself by
     * querying the respective attributes from the socket.
     * The client's port number is _not_ included because the port numbers are
     * typically assigned randomly by the client's operating system when a
     * &#64;c connect() system call is made.
     * </pre>
     *
     * <code>optional string peer_identifier = 7;</code>
     * @return Whether the peerIdentifier field is set.
     */
    boolean hasPeerIdentifier();
    /**
     * <pre>
     **
     * The client's IP address is obtained from the TCP/IP connection itself by
     * querying the respective attributes from the socket.
     * The client's port number is _not_ included because the port numbers are
     * typically assigned randomly by the client's operating system when a
     * &#64;c connect() system call is made.
     * </pre>
     *
     * <code>optional string peer_identifier = 7;</code>
     * @return The peerIdentifier.
     */
    java.lang.String getPeerIdentifier();
    /**
     * <pre>
     **
     * The client's IP address is obtained from the TCP/IP connection itself by
     * querying the respective attributes from the socket.
     * The client's port number is _not_ included because the port numbers are
     * typically assigned randomly by the client's operating system when a
     * &#64;c connect() system call is made.
     * </pre>
     *
     * <code>optional string peer_identifier = 7;</code>
     * @return The bytes for peerIdentifier.
     */
    com.google.protobuf.ByteString
        getPeerIdentifierBytes();

    /**
     * <pre>
     **
     * An application sends a SQL statement to our client (DB2z). The client
     * rewrites this original SQL statement to the backend (and does syntax
     * adjustments, table name mappings). The original SQL statement text is
     * provided to the accelerator, primarily for diagnostics purposes.
     * </pre>
     *
     * <code>optional string original_sql_statement_text = 8;</code>
     * @return Whether the originalSqlStatementText field is set.
     */
    boolean hasOriginalSqlStatementText();
    /**
     * <pre>
     **
     * An application sends a SQL statement to our client (DB2z). The client
     * rewrites this original SQL statement to the backend (and does syntax
     * adjustments, table name mappings). The original SQL statement text is
     * provided to the accelerator, primarily for diagnostics purposes.
     * </pre>
     *
     * <code>optional string original_sql_statement_text = 8;</code>
     * @return The originalSqlStatementText.
     */
    java.lang.String getOriginalSqlStatementText();
    /**
     * <pre>
     **
     * An application sends a SQL statement to our client (DB2z). The client
     * rewrites this original SQL statement to the backend (and does syntax
     * adjustments, table name mappings). The original SQL statement text is
     * provided to the accelerator, primarily for diagnostics purposes.
     * </pre>
     *
     * <code>optional string original_sql_statement_text = 8;</code>
     * @return The bytes for originalSqlStatementText.
     */
    com.google.protobuf.ByteString
        getOriginalSqlStatementTextBytes();

    /**
     * <pre>
     **
     * For complex SQL statements it is sometimes not easy to spot differences in
     * the original SQL statement text. Here we store a hash so that it is much easier
     * to identify whether the original SQL statement text for two different statements
     * is the same or not.
     * </pre>
     *
     * <code>optional uint64 original_sql_statement_text_hash = 9;</code>
     * @return Whether the originalSqlStatementTextHash field is set.
     */
    boolean hasOriginalSqlStatementTextHash();
    /**
     * <pre>
     **
     * For complex SQL statements it is sometimes not easy to spot differences in
     * the original SQL statement text. Here we store a hash so that it is much easier
     * to identify whether the original SQL statement text for two different statements
     * is the same or not.
     * </pre>
     *
     * <code>optional uint64 original_sql_statement_text_hash = 9;</code>
     * @return The originalSqlStatementTextHash.
     */
    long getOriginalSqlStatementTextHash();

    /**
     * <pre>
     **
     * The original SQL statement text (see &#64;c original_sql_statement_text)
     * is rewritten by the client to adhere to the backend's SQL syntax and
     * use the table/view names defined by the accelerator. This field here
     * contains the rewritten SQL statement text, which is actually executed
     * in the backend as-is.
     * </pre>
     *
     * <code>optional string backend_sql_statement_text = 10;</code>
     * @return Whether the backendSqlStatementText field is set.
     */
    boolean hasBackendSqlStatementText();
    /**
     * <pre>
     **
     * The original SQL statement text (see &#64;c original_sql_statement_text)
     * is rewritten by the client to adhere to the backend's SQL syntax and
     * use the table/view names defined by the accelerator. This field here
     * contains the rewritten SQL statement text, which is actually executed
     * in the backend as-is.
     * </pre>
     *
     * <code>optional string backend_sql_statement_text = 10;</code>
     * @return The backendSqlStatementText.
     */
    java.lang.String getBackendSqlStatementText();
    /**
     * <pre>
     **
     * The original SQL statement text (see &#64;c original_sql_statement_text)
     * is rewritten by the client to adhere to the backend's SQL syntax and
     * use the table/view names defined by the accelerator. This field here
     * contains the rewritten SQL statement text, which is actually executed
     * in the backend as-is.
     * </pre>
     *
     * <code>optional string backend_sql_statement_text = 10;</code>
     * @return The bytes for backendSqlStatementText.
     */
    com.google.protobuf.ByteString
        getBackendSqlStatementTextBytes();

    /**
     * <pre>
     **
     * For complex SQL statements it is sometimes not easy to spot differences in
     * the backend SQL statement text. Here we store a hash so that it is much easier
     * to identify whether the backend SQL statement text for two different statements
     * is the same or not.
     * </pre>
     *
     * <code>optional uint64 backend_sql_statement_text_hash = 11;</code>
     * @return Whether the backendSqlStatementTextHash field is set.
     */
    boolean hasBackendSqlStatementTextHash();
    /**
     * <pre>
     **
     * For complex SQL statements it is sometimes not easy to spot differences in
     * the backend SQL statement text. Here we store a hash so that it is much easier
     * to identify whether the backend SQL statement text for two different statements
     * is the same or not.
     * </pre>
     *
     * <code>optional uint64 backend_sql_statement_text_hash = 11;</code>
     * @return The backendSqlStatementTextHash.
     */
    long getBackendSqlStatementTextHash();

    /**
     * <pre>
     **
     * If the client routes a static SQL statement to the accelerator, this
     * field contains the name of the package in which that SQL statement was
     * compiled into.
     * </pre>
     *
     * <code>optional string package_name = 12;</code>
     * @return Whether the packageName field is set.
     */
    boolean hasPackageName();
    /**
     * <pre>
     **
     * If the client routes a static SQL statement to the accelerator, this
     * field contains the name of the package in which that SQL statement was
     * compiled into.
     * </pre>
     *
     * <code>optional string package_name = 12;</code>
     * @return The packageName.
     */
    java.lang.String getPackageName();
    /**
     * <pre>
     **
     * If the client routes a static SQL statement to the accelerator, this
     * field contains the name of the package in which that SQL statement was
     * compiled into.
     * </pre>
     *
     * <code>optional string package_name = 12;</code>
     * @return The bytes for packageName.
     */
    com.google.protobuf.ByteString
        getPackageNameBytes();

    /**
     * <pre>
     **
     * If the client routes a static SQL statement to the accelerator, this
     * field contains the collection ID related to that SQL statement.
     * </pre>
     *
     * <code>optional string collection_id = 13;</code>
     * @return Whether the collectionId field is set.
     */
    boolean hasCollectionId();
    /**
     * <pre>
     **
     * If the client routes a static SQL statement to the accelerator, this
     * field contains the collection ID related to that SQL statement.
     * </pre>
     *
     * <code>optional string collection_id = 13;</code>
     * @return The collectionId.
     */
    java.lang.String getCollectionId();
    /**
     * <pre>
     **
     * If the client routes a static SQL statement to the accelerator, this
     * field contains the collection ID related to that SQL statement.
     * </pre>
     *
     * <code>optional string collection_id = 13;</code>
     * @return The bytes for collectionId.
     */
    com.google.protobuf.ByteString
        getCollectionIdBytes();

    /**
     * <pre>
     **
     * The client provides all IDs of tables that are referenced in a SQL statement.
     * Those tables are identified in DB2z by a pair of DBID/OBID (Database ID and
     * Object ID).
     * </pre>
     *
     * <code>optional string dbid_obid_of_accessed_tables = 14;</code>
     * @return Whether the dbidObidOfAccessedTables field is set.
     */
    boolean hasDbidObidOfAccessedTables();
    /**
     * <pre>
     **
     * The client provides all IDs of tables that are referenced in a SQL statement.
     * Those tables are identified in DB2z by a pair of DBID/OBID (Database ID and
     * Object ID).
     * </pre>
     *
     * <code>optional string dbid_obid_of_accessed_tables = 14;</code>
     * @return The dbidObidOfAccessedTables.
     */
    java.lang.String getDbidObidOfAccessedTables();
    /**
     * <pre>
     **
     * The client provides all IDs of tables that are referenced in a SQL statement.
     * Those tables are identified in DB2z by a pair of DBID/OBID (Database ID and
     * Object ID).
     * </pre>
     *
     * <code>optional string dbid_obid_of_accessed_tables = 14;</code>
     * @return The bytes for dbidObidOfAccessedTables.
     */
    com.google.protobuf.ByteString
        getDbidObidOfAccessedTablesBytes();

    /**
     * <pre>
     **
     * Each SQL connection to the backend has an application handle. The application
     * handle for the SQL connection on which the SQL statement is executed is
     * stored here as SQL session ID.
     * </pre>
     *
     * <code>optional int64 backend_sql_session_id = 15;</code>
     * @return Whether the backendSqlSessionId field is set.
     */
    boolean hasBackendSqlSessionId();
    /**
     * <pre>
     **
     * Each SQL connection to the backend has an application handle. The application
     * handle for the SQL connection on which the SQL statement is executed is
     * stored here as SQL session ID.
     * </pre>
     *
     * <code>optional int64 backend_sql_session_id = 15;</code>
     * @return The backendSqlSessionId.
     */
    long getBackendSqlSessionId();

    /**
     * <pre>
     **
     * Besides the application handle (see field &#64;c backend_sql_session_id), the
     * backend has an application ID assigned to each SQL connection.
     * </pre>
     *
     * <code>optional string backend_sql_application_id = 16;</code>
     * @return Whether the backendSqlApplicationId field is set.
     */
    boolean hasBackendSqlApplicationId();
    /**
     * <pre>
     **
     * Besides the application handle (see field &#64;c backend_sql_session_id), the
     * backend has an application ID assigned to each SQL connection.
     * </pre>
     *
     * <code>optional string backend_sql_application_id = 16;</code>
     * @return The backendSqlApplicationId.
     */
    java.lang.String getBackendSqlApplicationId();
    /**
     * <pre>
     **
     * Besides the application handle (see field &#64;c backend_sql_session_id), the
     * backend has an application ID assigned to each SQL connection.
     * </pre>
     *
     * <code>optional string backend_sql_application_id = 16;</code>
     * @return The bytes for backendSqlApplicationId.
     */
    com.google.protobuf.ByteString
        getBackendSqlApplicationIdBytes();

    /**
     * <pre>
     **
     * The task priority is derived from the client's WLM (workload management) importance level.
     * </pre>
     *
     * <code>optional int32 task_priority = 17;</code>
     * @return Whether the taskPriority field is set.
     */
    boolean hasTaskPriority();
    /**
     * <pre>
     **
     * The task priority is derived from the client's WLM (workload management) importance level.
     * </pre>
     *
     * <code>optional int32 task_priority = 17;</code>
     * @return The taskPriority.
     */
    int getTaskPriority();

    /**
     * <code>optional .SQLStatementDetailsData.QuerySpecialRegisters special_registers = 18;</code>
     * @return Whether the specialRegisters field is set.
     */
    boolean hasSpecialRegisters();
    /**
     * <code>optional .SQLStatementDetailsData.QuerySpecialRegisters special_registers = 18;</code>
     * @return The specialRegisters.
     */
    SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters getSpecialRegisters();
    /**
     * <code>optional .SQLStatementDetailsData.QuerySpecialRegisters special_registers = 18;</code>
     */
    SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegistersOrBuilder getSpecialRegistersOrBuilder();

    /**
     * <pre>
     *&#47; indicator whether execution of the SQL statement has finished
     * </pre>
     *
     * <code>optional bool finished = 19;</code>
     * @return Whether the finished field is set.
     */
    boolean hasFinished();
    /**
     * <pre>
     *&#47; indicator whether execution of the SQL statement has finished
     * </pre>
     *
     * <code>optional bool finished = 19;</code>
     * @return The finished.
     */
    boolean getFinished();

    /**
     * <pre>
     **
     * The state how the SQL statement execution was finished is one of:
     *  - 3 = DONE (successful completion without error)
     *  - 4 = ABORTED (execution failed with some error - either in the backend or in the accelerator)
     *  - 5 = CANCELLED (execution was canceled)
     * </pre>
     *
     * <code>optional uint32 finish_state = 20;</code>
     * @return Whether the finishState field is set.
     */
    boolean hasFinishState();
    /**
     * <pre>
     **
     * The state how the SQL statement execution was finished is one of:
     *  - 3 = DONE (successful completion without error)
     *  - 4 = ABORTED (execution failed with some error - either in the backend or in the accelerator)
     *  - 5 = CANCELLED (execution was canceled)
     * </pre>
     *
     * <code>optional uint32 finish_state = 20;</code>
     * @return The finishState.
     */
    int getFinishState();

    /**
     * <code>optional .SQLStatementDetailsData.Timings timings = 21;</code>
     * @return Whether the timings field is set.
     */
    boolean hasTimings();
    /**
     * <code>optional .SQLStatementDetailsData.Timings timings = 21;</code>
     * @return The timings.
     */
    SQLStatementDetails.SQLStatementDetailsData.Timings getTimings();
    /**
     * <code>optional .SQLStatementDetailsData.Timings timings = 21;</code>
     */
    SQLStatementDetails.SQLStatementDetailsData.TimingsOrBuilder getTimingsOrBuilder();

    /**
     * <code>optional .SQLStatementDetailsData.ExecutionResult execution_result = 22;</code>
     * @return Whether the executionResult field is set.
     */
    boolean hasExecutionResult();
    /**
     * <code>optional .SQLStatementDetailsData.ExecutionResult execution_result = 22;</code>
     * @return The executionResult.
     */
    SQLStatementDetails.SQLStatementDetailsData.ExecutionResult getExecutionResult();
    /**
     * <code>optional .SQLStatementDetailsData.ExecutionResult execution_result = 22;</code>
     */
    SQLStatementDetails.SQLStatementDetailsData.ExecutionResultOrBuilder getExecutionResultOrBuilder();

    /**
     * <code>optional .SQLStatementDetailsData.WaitForDataStatistics wait_for_data = 23;</code>
     * @return Whether the waitForData field is set.
     */
    boolean hasWaitForData();
    /**
     * <code>optional .SQLStatementDetailsData.WaitForDataStatistics wait_for_data = 23;</code>
     * @return The waitForData.
     */
    SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics getWaitForData();
    /**
     * <code>optional .SQLStatementDetailsData.WaitForDataStatistics wait_for_data = 23;</code>
     */
    SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatisticsOrBuilder getWaitForDataOrBuilder();

    /**
     * <code>optional .SQLStatementDetailsData.MultiRowInsertDetails multi_row_insert = 24;</code>
     * @return Whether the multiRowInsert field is set.
     */
    boolean hasMultiRowInsert();
    /**
     * <code>optional .SQLStatementDetailsData.MultiRowInsertDetails multi_row_insert = 24;</code>
     * @return The multiRowInsert.
     */
    SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails getMultiRowInsert();
    /**
     * <code>optional .SQLStatementDetailsData.MultiRowInsertDetails multi_row_insert = 24;</code>
     */
    SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetailsOrBuilder getMultiRowInsertOrBuilder();

    /**
     * <pre>
     **
     * The SQL controller typically collects a lot of detailed information for each
     * SQL statement execution. For example, profiling data for the individual execution
     * phases are gathered. A dump (in XML format) of those information is stored so
     * that it is available for problem determination purposes.
     * </pre>
     *
     * <code>optional string auxiliary_data = 25;</code>
     * @return Whether the auxiliaryData field is set.
     */
    boolean hasAuxiliaryData();
    /**
     * <pre>
     **
     * The SQL controller typically collects a lot of detailed information for each
     * SQL statement execution. For example, profiling data for the individual execution
     * phases are gathered. A dump (in XML format) of those information is stored so
     * that it is available for problem determination purposes.
     * </pre>
     *
     * <code>optional string auxiliary_data = 25;</code>
     * @return The auxiliaryData.
     */
    java.lang.String getAuxiliaryData();
    /**
     * <pre>
     **
     * The SQL controller typically collects a lot of detailed information for each
     * SQL statement execution. For example, profiling data for the individual execution
     * phases are gathered. A dump (in XML format) of those information is stored so
     * that it is available for problem determination purposes.
     * </pre>
     *
     * <code>optional string auxiliary_data = 25;</code>
     * @return The bytes for auxiliaryData.
     */
    com.google.protobuf.ByteString
        getAuxiliaryDataBytes();

    /**
     * <code>optional .SQLStatementDetailsData.ClientAccountingDetails client_accounting_details = 26;</code>
     * @return Whether the clientAccountingDetails field is set.
     */
    boolean hasClientAccountingDetails();
    /**
     * <code>optional .SQLStatementDetailsData.ClientAccountingDetails client_accounting_details = 26;</code>
     * @return The clientAccountingDetails.
     */
    SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails getClientAccountingDetails();
    /**
     * <code>optional .SQLStatementDetailsData.ClientAccountingDetails client_accounting_details = 26;</code>
     */
    SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetailsOrBuilder getClientAccountingDetailsOrBuilder();

    /**
     * <pre>
     **
     * Deprecrated.
     * In the past, we used to store the backend SQL statement text as hex representation
     * for all the individual bytes. That can be helpful to figure out, for example,
     * whether a character is a regular space (ASCII code 0x20) or non-breaking space
     * (Unicode code U+00A0).
     * We no longer store that hex representation these days. System command
     * "hexdump -C &lt;file&gt;" can be used on the SQL history file to inspect the original
     * SQL statement text and/or the backend SQL statement text.
     * </pre>
     *
     * <code>optional string backend_sql_statement_text_hex = 27;</code>
     * @return Whether the backendSqlStatementTextHex field is set.
     */
    boolean hasBackendSqlStatementTextHex();
    /**
     * <pre>
     **
     * Deprecrated.
     * In the past, we used to store the backend SQL statement text as hex representation
     * for all the individual bytes. That can be helpful to figure out, for example,
     * whether a character is a regular space (ASCII code 0x20) or non-breaking space
     * (Unicode code U+00A0).
     * We no longer store that hex representation these days. System command
     * "hexdump -C &lt;file&gt;" can be used on the SQL history file to inspect the original
     * SQL statement text and/or the backend SQL statement text.
     * </pre>
     *
     * <code>optional string backend_sql_statement_text_hex = 27;</code>
     * @return The backendSqlStatementTextHex.
     */
    java.lang.String getBackendSqlStatementTextHex();
    /**
     * <pre>
     **
     * Deprecrated.
     * In the past, we used to store the backend SQL statement text as hex representation
     * for all the individual bytes. That can be helpful to figure out, for example,
     * whether a character is a regular space (ASCII code 0x20) or non-breaking space
     * (Unicode code U+00A0).
     * We no longer store that hex representation these days. System command
     * "hexdump -C &lt;file&gt;" can be used on the SQL history file to inspect the original
     * SQL statement text and/or the backend SQL statement text.
     * </pre>
     *
     * <code>optional string backend_sql_statement_text_hex = 27;</code>
     * @return The bytes for backendSqlStatementTextHex.
     */
    com.google.protobuf.ByteString
        getBackendSqlStatementTextHexBytes();
  }
  /**
   * <pre>
   **
   * Proto object describing the details for the execution of a user-driver SQL statement.
   * Various attributes are collected for a SQL statement that was executed
   * on behalf of the client (DB2z). The attributes are tracked for currently
   * running SQL statements and also for already finished ones.
   ********************************************************************************
   * &#64;attention These proto objects are serialized in Text Format and that is written
   *            persistently to SQL history files! We do not use any binary representation
   *            of the proto objects. That implies:
   *             (1) Attribute names MUST NOT be changed or removed because (persisted)
   *                 values are identified by them.
   *             (2) Attribute numbers/IDs can be changed. In fact, they should be changed
   *                 as they define the sequence for the fields in the SQL history file.
   *                 A logical sequence makes it easier to consume that file.
   ********************************************************************************
   * </pre>
   *
   * Protobuf type {@code SQLStatementDetailsData}
   */
  public  static final class SQLStatementDetailsData extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SQLStatementDetailsData)
      SQLStatementDetailsDataOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SQLStatementDetailsData.newBuilder() to construct.
    private SQLStatementDetailsData(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SQLStatementDetailsData() {
      databaseSystemLocationName_ = "";
      correlationToken_ = "";
      originalUserId_ = "";
      externalName_ = "";
      peerIdentifier_ = "";
      originalSqlStatementText_ = "";
      backendSqlStatementText_ = "";
      packageName_ = "";
      collectionId_ = "";
      dbidObidOfAccessedTables_ = "";
      backendSqlApplicationId_ = "";
      auxiliaryData_ = "";
      backendSqlStatementTextHex_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new SQLStatementDetailsData();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SQLStatementDetailsData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              bitField0_ |= 0x00000001;
              statementId_ = input.readUInt64();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              taskId_ = input.readUInt64();
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              databaseSystemLocationName_ = bs;
              break;
            }
            case 34: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000008;
              correlationToken_ = bs;
              break;
            }
            case 42: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000010;
              originalUserId_ = bs;
              break;
            }
            case 50: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000020;
              externalName_ = bs;
              break;
            }
            case 58: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000040;
              peerIdentifier_ = bs;
              break;
            }
            case 66: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000080;
              originalSqlStatementText_ = bs;
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              originalSqlStatementTextHash_ = input.readUInt64();
              break;
            }
            case 82: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000200;
              backendSqlStatementText_ = bs;
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              backendSqlStatementTextHash_ = input.readUInt64();
              break;
            }
            case 98: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000800;
              packageName_ = bs;
              break;
            }
            case 106: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00001000;
              collectionId_ = bs;
              break;
            }
            case 114: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00002000;
              dbidObidOfAccessedTables_ = bs;
              break;
            }
            case 120: {
              bitField0_ |= 0x00004000;
              backendSqlSessionId_ = input.readInt64();
              break;
            }
            case 130: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00008000;
              backendSqlApplicationId_ = bs;
              break;
            }
            case 136: {
              bitField0_ |= 0x00010000;
              taskPriority_ = input.readInt32();
              break;
            }
            case 146: {
              SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters.Builder subBuilder = null;
              if (((bitField0_ & 0x00020000) != 0)) {
                subBuilder = specialRegisters_.toBuilder();
              }
              specialRegisters_ = input.readMessage(SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(specialRegisters_);
                specialRegisters_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00020000;
              break;
            }
            case 152: {
              bitField0_ |= 0x00040000;
              finished_ = input.readBool();
              break;
            }
            case 160: {
              bitField0_ |= 0x00080000;
              finishState_ = input.readUInt32();
              break;
            }
            case 170: {
              SQLStatementDetails.SQLStatementDetailsData.Timings.Builder subBuilder = null;
              if (((bitField0_ & 0x00100000) != 0)) {
                subBuilder = timings_.toBuilder();
              }
              timings_ = input.readMessage(SQLStatementDetails.SQLStatementDetailsData.Timings.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(timings_);
                timings_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00100000;
              break;
            }
            case 178: {
              SQLStatementDetails.SQLStatementDetailsData.ExecutionResult.Builder subBuilder = null;
              if (((bitField0_ & 0x00200000) != 0)) {
                subBuilder = executionResult_.toBuilder();
              }
              executionResult_ = input.readMessage(SQLStatementDetails.SQLStatementDetailsData.ExecutionResult.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(executionResult_);
                executionResult_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00200000;
              break;
            }
            case 186: {
              SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics.Builder subBuilder = null;
              if (((bitField0_ & 0x00400000) != 0)) {
                subBuilder = waitForData_.toBuilder();
              }
              waitForData_ = input.readMessage(SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(waitForData_);
                waitForData_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00400000;
              break;
            }
            case 194: {
              SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails.Builder subBuilder = null;
              if (((bitField0_ & 0x00800000) != 0)) {
                subBuilder = multiRowInsert_.toBuilder();
              }
              multiRowInsert_ = input.readMessage(SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(multiRowInsert_);
                multiRowInsert_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00800000;
              break;
            }
            case 202: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x01000000;
              auxiliaryData_ = bs;
              break;
            }
            case 210: {
              SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails.Builder subBuilder = null;
              if (((bitField0_ & 0x02000000) != 0)) {
                subBuilder = clientAccountingDetails_.toBuilder();
              }
              clientAccountingDetails_ = input.readMessage(SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(clientAccountingDetails_);
                clientAccountingDetails_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x02000000;
              break;
            }
            case 218: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x04000000;
              backendSqlStatementTextHex_ = bs;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SQLStatementDetails.internal_static_SQLStatementDetailsData_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SQLStatementDetails.internal_static_SQLStatementDetailsData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SQLStatementDetails.SQLStatementDetailsData.class, SQLStatementDetails.SQLStatementDetailsData.Builder.class);
    }

    public interface QuerySpecialRegistersOrBuilder extends
        // @@protoc_insertion_point(interface_extends:SQLStatementDetailsData.QuerySpecialRegisters)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       **
       * Current timestamp (in UTC) when the client sent the SQL statement to the accelerator.
       * </pre>
       *
       * <code>optional string client_reference_timestamp = 1;</code>
       * @return Whether the clientReferenceTimestamp field is set.
       */
      boolean hasClientReferenceTimestamp();
      /**
       * <pre>
       **
       * Current timestamp (in UTC) when the client sent the SQL statement to the accelerator.
       * </pre>
       *
       * <code>optional string client_reference_timestamp = 1;</code>
       * @return The clientReferenceTimestamp.
       */
      java.lang.String getClientReferenceTimestamp();
      /**
       * <pre>
       **
       * Current timestamp (in UTC) when the client sent the SQL statement to the accelerator.
       * </pre>
       *
       * <code>optional string client_reference_timestamp = 1;</code>
       * @return The bytes for clientReferenceTimestamp.
       */
      com.google.protobuf.ByteString
          getClientReferenceTimestampBytes();

      /**
       * <pre>
       **
       * Timezone configured for the client when the SQL statement was send to the accelerator.
       * </pre>
       *
       * <code>optional string client_reference_timezone = 2;</code>
       * @return Whether the clientReferenceTimezone field is set.
       */
      boolean hasClientReferenceTimezone();
      /**
       * <pre>
       **
       * Timezone configured for the client when the SQL statement was send to the accelerator.
       * </pre>
       *
       * <code>optional string client_reference_timezone = 2;</code>
       * @return The clientReferenceTimezone.
       */
      java.lang.String getClientReferenceTimezone();
      /**
       * <pre>
       **
       * Timezone configured for the client when the SQL statement was send to the accelerator.
       * </pre>
       *
       * <code>optional string client_reference_timezone = 2;</code>
       * @return The bytes for clientReferenceTimezone.
       */
      com.google.protobuf.ByteString
          getClientReferenceTimezoneBytes();

      /**
       * <pre>
       **
       * The system clock is queried when the value for field &#64;c client_reference_timestamp is
       * received from the client.
       * Note that the system clock is counted from the last reboot. Therefore, the value here
       * can only be related to field &#64;c real_world_entry_time (in section &#64;c timings) because
       * we have the wall clock time for that in field &#64;c real_world_entry_timestamp.
       * </pre>
       *
       * <code>optional uint64 client_reference_timestamp_receive_time = 3;</code>
       * @return Whether the clientReferenceTimestampReceiveTime field is set.
       */
      boolean hasClientReferenceTimestampReceiveTime();
      /**
       * <pre>
       **
       * The system clock is queried when the value for field &#64;c client_reference_timestamp is
       * received from the client.
       * Note that the system clock is counted from the last reboot. Therefore, the value here
       * can only be related to field &#64;c real_world_entry_time (in section &#64;c timings) because
       * we have the wall clock time for that in field &#64;c real_world_entry_timestamp.
       * </pre>
       *
       * <code>optional uint64 client_reference_timestamp_receive_time = 3;</code>
       * @return The clientReferenceTimestampReceiveTime.
       */
      long getClientReferenceTimestampReceiveTime();

      /**
       * <pre>
       **
       * Setting of the special register CURRENT CLIENT_USERID on the client side.
       * This client user ID can be set by the user's application. The value is
       * associated with the backend SQL connection via stored procedure call
       * WLM_SET_CLIENT_INFO().
       * </pre>
       *
       * <code>optional string client_user_id = 4;</code>
       * @return Whether the clientUserId field is set.
       */
      boolean hasClientUserId();
      /**
       * <pre>
       **
       * Setting of the special register CURRENT CLIENT_USERID on the client side.
       * This client user ID can be set by the user's application. The value is
       * associated with the backend SQL connection via stored procedure call
       * WLM_SET_CLIENT_INFO().
       * </pre>
       *
       * <code>optional string client_user_id = 4;</code>
       * @return The clientUserId.
       */
      java.lang.String getClientUserId();
      /**
       * <pre>
       **
       * Setting of the special register CURRENT CLIENT_USERID on the client side.
       * This client user ID can be set by the user's application. The value is
       * associated with the backend SQL connection via stored procedure call
       * WLM_SET_CLIENT_INFO().
       * </pre>
       *
       * <code>optional string client_user_id = 4;</code>
       * @return The bytes for clientUserId.
       */
      com.google.protobuf.ByteString
          getClientUserIdBytes();

      /**
       * <pre>
       **
       * Setting of the special register CURRENT CLIENT_WLKSTNNAME on the client side.
       * This workstation name can be set by the user's application. The value is
       * associated with the backend SQL connection via stored procedure call
       * WLM_SET_CLIENT_INFO().
       * </pre>
       *
       * <code>optional string client_workstation = 5;</code>
       * @return Whether the clientWorkstation field is set.
       */
      boolean hasClientWorkstation();
      /**
       * <pre>
       **
       * Setting of the special register CURRENT CLIENT_WLKSTNNAME on the client side.
       * This workstation name can be set by the user's application. The value is
       * associated with the backend SQL connection via stored procedure call
       * WLM_SET_CLIENT_INFO().
       * </pre>
       *
       * <code>optional string client_workstation = 5;</code>
       * @return The clientWorkstation.
       */
      java.lang.String getClientWorkstation();
      /**
       * <pre>
       **
       * Setting of the special register CURRENT CLIENT_WLKSTNNAME on the client side.
       * This workstation name can be set by the user's application. The value is
       * associated with the backend SQL connection via stored procedure call
       * WLM_SET_CLIENT_INFO().
       * </pre>
       *
       * <code>optional string client_workstation = 5;</code>
       * @return The bytes for clientWorkstation.
       */
      com.google.protobuf.ByteString
          getClientWorkstationBytes();

      /**
       * <pre>
       **
       * Setting of the special register CURRENT CLIENT_APPLNAME on the client side.
       * This application name can be set by the user's application. The value is
       * associated with the backend SQL connection via stored procedure call
       * WLM_SET_CLIENT_INFO().
       * </pre>
       *
       * <code>optional string client_application = 6;</code>
       * @return Whether the clientApplication field is set.
       */
      boolean hasClientApplication();
      /**
       * <pre>
       **
       * Setting of the special register CURRENT CLIENT_APPLNAME on the client side.
       * This application name can be set by the user's application. The value is
       * associated with the backend SQL connection via stored procedure call
       * WLM_SET_CLIENT_INFO().
       * </pre>
       *
       * <code>optional string client_application = 6;</code>
       * @return The clientApplication.
       */
      java.lang.String getClientApplication();
      /**
       * <pre>
       **
       * Setting of the special register CURRENT CLIENT_APPLNAME on the client side.
       * This application name can be set by the user's application. The value is
       * associated with the backend SQL connection via stored procedure call
       * WLM_SET_CLIENT_INFO().
       * </pre>
       *
       * <code>optional string client_application = 6;</code>
       * @return The bytes for clientApplication.
       */
      com.google.protobuf.ByteString
          getClientApplicationBytes();

      /**
       * <pre>
       **
       * Setting of the special register CURRENT CLIENT_ACCTNG on the client side.
       * This accounting information can be set by the user's application.
       * </pre>
       *
       * <code>optional string client_accounting = 7;</code>
       * @return Whether the clientAccounting field is set.
       */
      boolean hasClientAccounting();
      /**
       * <pre>
       **
       * Setting of the special register CURRENT CLIENT_ACCTNG on the client side.
       * This accounting information can be set by the user's application.
       * </pre>
       *
       * <code>optional string client_accounting = 7;</code>
       * @return The clientAccounting.
       */
      java.lang.String getClientAccounting();
      /**
       * <pre>
       **
       * Setting of the special register CURRENT CLIENT_ACCTNG on the client side.
       * This accounting information can be set by the user's application.
       * </pre>
       *
       * <code>optional string client_accounting = 7;</code>
       * @return The bytes for clientAccounting.
       */
      com.google.protobuf.ByteString
          getClientAccountingBytes();
    }
    /**
     * Protobuf type {@code SQLStatementDetailsData.QuerySpecialRegisters}
     */
    public  static final class QuerySpecialRegisters extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:SQLStatementDetailsData.QuerySpecialRegisters)
        QuerySpecialRegistersOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use QuerySpecialRegisters.newBuilder() to construct.
      private QuerySpecialRegisters(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private QuerySpecialRegisters() {
        clientReferenceTimestamp_ = "";
        clientReferenceTimezone_ = "";
        clientUserId_ = "";
        clientWorkstation_ = "";
        clientApplication_ = "";
        clientAccounting_ = "";
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new QuerySpecialRegisters();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private QuerySpecialRegisters(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000001;
                clientReferenceTimestamp_ = bs;
                break;
              }
              case 18: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000002;
                clientReferenceTimezone_ = bs;
                break;
              }
              case 24: {
                bitField0_ |= 0x00000004;
                clientReferenceTimestampReceiveTime_ = input.readUInt64();
                break;
              }
              case 34: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000008;
                clientUserId_ = bs;
                break;
              }
              case 42: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000010;
                clientWorkstation_ = bs;
                break;
              }
              case 50: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000020;
                clientApplication_ = bs;
                break;
              }
              case 58: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000040;
                clientAccounting_ = bs;
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SQLStatementDetails.internal_static_SQLStatementDetailsData_QuerySpecialRegisters_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SQLStatementDetails.internal_static_SQLStatementDetailsData_QuerySpecialRegisters_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters.class, SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters.Builder.class);
      }

      private int bitField0_;
      public static final int CLIENT_REFERENCE_TIMESTAMP_FIELD_NUMBER = 1;
      private volatile java.lang.Object clientReferenceTimestamp_;
      /**
       * <pre>
       **
       * Current timestamp (in UTC) when the client sent the SQL statement to the accelerator.
       * </pre>
       *
       * <code>optional string client_reference_timestamp = 1;</code>
       * @return Whether the clientReferenceTimestamp field is set.
       */
      public boolean hasClientReferenceTimestamp() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       **
       * Current timestamp (in UTC) when the client sent the SQL statement to the accelerator.
       * </pre>
       *
       * <code>optional string client_reference_timestamp = 1;</code>
       * @return The clientReferenceTimestamp.
       */
      public java.lang.String getClientReferenceTimestamp() {
        java.lang.Object ref = clientReferenceTimestamp_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            clientReferenceTimestamp_ = s;
          }
          return s;
        }
      }
      /**
       * <pre>
       **
       * Current timestamp (in UTC) when the client sent the SQL statement to the accelerator.
       * </pre>
       *
       * <code>optional string client_reference_timestamp = 1;</code>
       * @return The bytes for clientReferenceTimestamp.
       */
      public com.google.protobuf.ByteString
          getClientReferenceTimestampBytes() {
        java.lang.Object ref = clientReferenceTimestamp_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          clientReferenceTimestamp_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int CLIENT_REFERENCE_TIMEZONE_FIELD_NUMBER = 2;
      private volatile java.lang.Object clientReferenceTimezone_;
      /**
       * <pre>
       **
       * Timezone configured for the client when the SQL statement was send to the accelerator.
       * </pre>
       *
       * <code>optional string client_reference_timezone = 2;</code>
       * @return Whether the clientReferenceTimezone field is set.
       */
      public boolean hasClientReferenceTimezone() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       **
       * Timezone configured for the client when the SQL statement was send to the accelerator.
       * </pre>
       *
       * <code>optional string client_reference_timezone = 2;</code>
       * @return The clientReferenceTimezone.
       */
      public java.lang.String getClientReferenceTimezone() {
        java.lang.Object ref = clientReferenceTimezone_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            clientReferenceTimezone_ = s;
          }
          return s;
        }
      }
      /**
       * <pre>
       **
       * Timezone configured for the client when the SQL statement was send to the accelerator.
       * </pre>
       *
       * <code>optional string client_reference_timezone = 2;</code>
       * @return The bytes for clientReferenceTimezone.
       */
      public com.google.protobuf.ByteString
          getClientReferenceTimezoneBytes() {
        java.lang.Object ref = clientReferenceTimezone_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          clientReferenceTimezone_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int CLIENT_REFERENCE_TIMESTAMP_RECEIVE_TIME_FIELD_NUMBER = 3;
      private long clientReferenceTimestampReceiveTime_;
      /**
       * <pre>
       **
       * The system clock is queried when the value for field &#64;c client_reference_timestamp is
       * received from the client.
       * Note that the system clock is counted from the last reboot. Therefore, the value here
       * can only be related to field &#64;c real_world_entry_time (in section &#64;c timings) because
       * we have the wall clock time for that in field &#64;c real_world_entry_timestamp.
       * </pre>
       *
       * <code>optional uint64 client_reference_timestamp_receive_time = 3;</code>
       * @return Whether the clientReferenceTimestampReceiveTime field is set.
       */
      public boolean hasClientReferenceTimestampReceiveTime() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       **
       * The system clock is queried when the value for field &#64;c client_reference_timestamp is
       * received from the client.
       * Note that the system clock is counted from the last reboot. Therefore, the value here
       * can only be related to field &#64;c real_world_entry_time (in section &#64;c timings) because
       * we have the wall clock time for that in field &#64;c real_world_entry_timestamp.
       * </pre>
       *
       * <code>optional uint64 client_reference_timestamp_receive_time = 3;</code>
       * @return The clientReferenceTimestampReceiveTime.
       */
      public long getClientReferenceTimestampReceiveTime() {
        return clientReferenceTimestampReceiveTime_;
      }

      public static final int CLIENT_USER_ID_FIELD_NUMBER = 4;
      private volatile java.lang.Object clientUserId_;
      /**
       * <pre>
       **
       * Setting of the special register CURRENT CLIENT_USERID on the client side.
       * This client user ID can be set by the user's application. The value is
       * associated with the backend SQL connection via stored procedure call
       * WLM_SET_CLIENT_INFO().
       * </pre>
       *
       * <code>optional string client_user_id = 4;</code>
       * @return Whether the clientUserId field is set.
       */
      public boolean hasClientUserId() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       **
       * Setting of the special register CURRENT CLIENT_USERID on the client side.
       * This client user ID can be set by the user's application. The value is
       * associated with the backend SQL connection via stored procedure call
       * WLM_SET_CLIENT_INFO().
       * </pre>
       *
       * <code>optional string client_user_id = 4;</code>
       * @return The clientUserId.
       */
      public java.lang.String getClientUserId() {
        java.lang.Object ref = clientUserId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            clientUserId_ = s;
          }
          return s;
        }
      }
      /**
       * <pre>
       **
       * Setting of the special register CURRENT CLIENT_USERID on the client side.
       * This client user ID can be set by the user's application. The value is
       * associated with the backend SQL connection via stored procedure call
       * WLM_SET_CLIENT_INFO().
       * </pre>
       *
       * <code>optional string client_user_id = 4;</code>
       * @return The bytes for clientUserId.
       */
      public com.google.protobuf.ByteString
          getClientUserIdBytes() {
        java.lang.Object ref = clientUserId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          clientUserId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int CLIENT_WORKSTATION_FIELD_NUMBER = 5;
      private volatile java.lang.Object clientWorkstation_;
      /**
       * <pre>
       **
       * Setting of the special register CURRENT CLIENT_WLKSTNNAME on the client side.
       * This workstation name can be set by the user's application. The value is
       * associated with the backend SQL connection via stored procedure call
       * WLM_SET_CLIENT_INFO().
       * </pre>
       *
       * <code>optional string client_workstation = 5;</code>
       * @return Whether the clientWorkstation field is set.
       */
      public boolean hasClientWorkstation() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       **
       * Setting of the special register CURRENT CLIENT_WLKSTNNAME on the client side.
       * This workstation name can be set by the user's application. The value is
       * associated with the backend SQL connection via stored procedure call
       * WLM_SET_CLIENT_INFO().
       * </pre>
       *
       * <code>optional string client_workstation = 5;</code>
       * @return The clientWorkstation.
       */
      public java.lang.String getClientWorkstation() {
        java.lang.Object ref = clientWorkstation_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            clientWorkstation_ = s;
          }
          return s;
        }
      }
      /**
       * <pre>
       **
       * Setting of the special register CURRENT CLIENT_WLKSTNNAME on the client side.
       * This workstation name can be set by the user's application. The value is
       * associated with the backend SQL connection via stored procedure call
       * WLM_SET_CLIENT_INFO().
       * </pre>
       *
       * <code>optional string client_workstation = 5;</code>
       * @return The bytes for clientWorkstation.
       */
      public com.google.protobuf.ByteString
          getClientWorkstationBytes() {
        java.lang.Object ref = clientWorkstation_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          clientWorkstation_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int CLIENT_APPLICATION_FIELD_NUMBER = 6;
      private volatile java.lang.Object clientApplication_;
      /**
       * <pre>
       **
       * Setting of the special register CURRENT CLIENT_APPLNAME on the client side.
       * This application name can be set by the user's application. The value is
       * associated with the backend SQL connection via stored procedure call
       * WLM_SET_CLIENT_INFO().
       * </pre>
       *
       * <code>optional string client_application = 6;</code>
       * @return Whether the clientApplication field is set.
       */
      public boolean hasClientApplication() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       **
       * Setting of the special register CURRENT CLIENT_APPLNAME on the client side.
       * This application name can be set by the user's application. The value is
       * associated with the backend SQL connection via stored procedure call
       * WLM_SET_CLIENT_INFO().
       * </pre>
       *
       * <code>optional string client_application = 6;</code>
       * @return The clientApplication.
       */
      public java.lang.String getClientApplication() {
        java.lang.Object ref = clientApplication_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            clientApplication_ = s;
          }
          return s;
        }
      }
      /**
       * <pre>
       **
       * Setting of the special register CURRENT CLIENT_APPLNAME on the client side.
       * This application name can be set by the user's application. The value is
       * associated with the backend SQL connection via stored procedure call
       * WLM_SET_CLIENT_INFO().
       * </pre>
       *
       * <code>optional string client_application = 6;</code>
       * @return The bytes for clientApplication.
       */
      public com.google.protobuf.ByteString
          getClientApplicationBytes() {
        java.lang.Object ref = clientApplication_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          clientApplication_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int CLIENT_ACCOUNTING_FIELD_NUMBER = 7;
      private volatile java.lang.Object clientAccounting_;
      /**
       * <pre>
       **
       * Setting of the special register CURRENT CLIENT_ACCTNG on the client side.
       * This accounting information can be set by the user's application.
       * </pre>
       *
       * <code>optional string client_accounting = 7;</code>
       * @return Whether the clientAccounting field is set.
       */
      public boolean hasClientAccounting() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       **
       * Setting of the special register CURRENT CLIENT_ACCTNG on the client side.
       * This accounting information can be set by the user's application.
       * </pre>
       *
       * <code>optional string client_accounting = 7;</code>
       * @return The clientAccounting.
       */
      public java.lang.String getClientAccounting() {
        java.lang.Object ref = clientAccounting_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            clientAccounting_ = s;
          }
          return s;
        }
      }
      /**
       * <pre>
       **
       * Setting of the special register CURRENT CLIENT_ACCTNG on the client side.
       * This accounting information can be set by the user's application.
       * </pre>
       *
       * <code>optional string client_accounting = 7;</code>
       * @return The bytes for clientAccounting.
       */
      public com.google.protobuf.ByteString
          getClientAccountingBytes() {
        java.lang.Object ref = clientAccounting_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          clientAccounting_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, clientReferenceTimestamp_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, clientReferenceTimezone_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeUInt64(3, clientReferenceTimestampReceiveTime_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 4, clientUserId_);
        }
        if (((bitField0_ & 0x00000010) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 5, clientWorkstation_);
        }
        if (((bitField0_ & 0x00000020) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 6, clientApplication_);
        }
        if (((bitField0_ & 0x00000040) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 7, clientAccounting_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, clientReferenceTimestamp_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, clientReferenceTimezone_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(3, clientReferenceTimestampReceiveTime_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, clientUserId_);
        }
        if (((bitField0_ & 0x00000010) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, clientWorkstation_);
        }
        if (((bitField0_ & 0x00000020) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, clientApplication_);
        }
        if (((bitField0_ & 0x00000040) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, clientAccounting_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters)) {
          return super.equals(obj);
        }
        SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters other = (SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters) obj;

        if (hasClientReferenceTimestamp() != other.hasClientReferenceTimestamp()) return false;
        if (hasClientReferenceTimestamp()) {
          if (!getClientReferenceTimestamp()
              .equals(other.getClientReferenceTimestamp())) return false;
        }
        if (hasClientReferenceTimezone() != other.hasClientReferenceTimezone()) return false;
        if (hasClientReferenceTimezone()) {
          if (!getClientReferenceTimezone()
              .equals(other.getClientReferenceTimezone())) return false;
        }
        if (hasClientReferenceTimestampReceiveTime() != other.hasClientReferenceTimestampReceiveTime()) return false;
        if (hasClientReferenceTimestampReceiveTime()) {
          if (getClientReferenceTimestampReceiveTime()
              != other.getClientReferenceTimestampReceiveTime()) return false;
        }
        if (hasClientUserId() != other.hasClientUserId()) return false;
        if (hasClientUserId()) {
          if (!getClientUserId()
              .equals(other.getClientUserId())) return false;
        }
        if (hasClientWorkstation() != other.hasClientWorkstation()) return false;
        if (hasClientWorkstation()) {
          if (!getClientWorkstation()
              .equals(other.getClientWorkstation())) return false;
        }
        if (hasClientApplication() != other.hasClientApplication()) return false;
        if (hasClientApplication()) {
          if (!getClientApplication()
              .equals(other.getClientApplication())) return false;
        }
        if (hasClientAccounting() != other.hasClientAccounting()) return false;
        if (hasClientAccounting()) {
          if (!getClientAccounting()
              .equals(other.getClientAccounting())) return false;
        }
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasClientReferenceTimestamp()) {
          hash = (37 * hash) + CLIENT_REFERENCE_TIMESTAMP_FIELD_NUMBER;
          hash = (53 * hash) + getClientReferenceTimestamp().hashCode();
        }
        if (hasClientReferenceTimezone()) {
          hash = (37 * hash) + CLIENT_REFERENCE_TIMEZONE_FIELD_NUMBER;
          hash = (53 * hash) + getClientReferenceTimezone().hashCode();
        }
        if (hasClientReferenceTimestampReceiveTime()) {
          hash = (37 * hash) + CLIENT_REFERENCE_TIMESTAMP_RECEIVE_TIME_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getClientReferenceTimestampReceiveTime());
        }
        if (hasClientUserId()) {
          hash = (37 * hash) + CLIENT_USER_ID_FIELD_NUMBER;
          hash = (53 * hash) + getClientUserId().hashCode();
        }
        if (hasClientWorkstation()) {
          hash = (37 * hash) + CLIENT_WORKSTATION_FIELD_NUMBER;
          hash = (53 * hash) + getClientWorkstation().hashCode();
        }
        if (hasClientApplication()) {
          hash = (37 * hash) + CLIENT_APPLICATION_FIELD_NUMBER;
          hash = (53 * hash) + getClientApplication().hashCode();
        }
        if (hasClientAccounting()) {
          hash = (37 * hash) + CLIENT_ACCOUNTING_FIELD_NUMBER;
          hash = (53 * hash) + getClientAccounting().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code SQLStatementDetailsData.QuerySpecialRegisters}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:SQLStatementDetailsData.QuerySpecialRegisters)
          SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegistersOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return SQLStatementDetails.internal_static_SQLStatementDetailsData_QuerySpecialRegisters_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return SQLStatementDetails.internal_static_SQLStatementDetailsData_QuerySpecialRegisters_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters.class, SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters.Builder.class);
        }

        // Construct using SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          clientReferenceTimestamp_ = "";
          bitField0_ = (bitField0_ & ~0x00000001);
          clientReferenceTimezone_ = "";
          bitField0_ = (bitField0_ & ~0x00000002);
          clientReferenceTimestampReceiveTime_ = 0L;
          bitField0_ = (bitField0_ & ~0x00000004);
          clientUserId_ = "";
          bitField0_ = (bitField0_ & ~0x00000008);
          clientWorkstation_ = "";
          bitField0_ = (bitField0_ & ~0x00000010);
          clientApplication_ = "";
          bitField0_ = (bitField0_ & ~0x00000020);
          clientAccounting_ = "";
          bitField0_ = (bitField0_ & ~0x00000040);
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return SQLStatementDetails.internal_static_SQLStatementDetailsData_QuerySpecialRegisters_descriptor;
        }

        @java.lang.Override
        public SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters getDefaultInstanceForType() {
          return SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters.getDefaultInstance();
        }

        @java.lang.Override
        public SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters build() {
          SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters buildPartial() {
          SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters result = new SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            to_bitField0_ |= 0x00000001;
          }
          result.clientReferenceTimestamp_ = clientReferenceTimestamp_;
          if (((from_bitField0_ & 0x00000002) != 0)) {
            to_bitField0_ |= 0x00000002;
          }
          result.clientReferenceTimezone_ = clientReferenceTimezone_;
          if (((from_bitField0_ & 0x00000004) != 0)) {
            result.clientReferenceTimestampReceiveTime_ = clientReferenceTimestampReceiveTime_;
            to_bitField0_ |= 0x00000004;
          }
          if (((from_bitField0_ & 0x00000008) != 0)) {
            to_bitField0_ |= 0x00000008;
          }
          result.clientUserId_ = clientUserId_;
          if (((from_bitField0_ & 0x00000010) != 0)) {
            to_bitField0_ |= 0x00000010;
          }
          result.clientWorkstation_ = clientWorkstation_;
          if (((from_bitField0_ & 0x00000020) != 0)) {
            to_bitField0_ |= 0x00000020;
          }
          result.clientApplication_ = clientApplication_;
          if (((from_bitField0_ & 0x00000040) != 0)) {
            to_bitField0_ |= 0x00000040;
          }
          result.clientAccounting_ = clientAccounting_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters) {
            return mergeFrom((SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters other) {
          if (other == SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters.getDefaultInstance()) return this;
          if (other.hasClientReferenceTimestamp()) {
            bitField0_ |= 0x00000001;
            clientReferenceTimestamp_ = other.clientReferenceTimestamp_;
            onChanged();
          }
          if (other.hasClientReferenceTimezone()) {
            bitField0_ |= 0x00000002;
            clientReferenceTimezone_ = other.clientReferenceTimezone_;
            onChanged();
          }
          if (other.hasClientReferenceTimestampReceiveTime()) {
            setClientReferenceTimestampReceiveTime(other.getClientReferenceTimestampReceiveTime());
          }
          if (other.hasClientUserId()) {
            bitField0_ |= 0x00000008;
            clientUserId_ = other.clientUserId_;
            onChanged();
          }
          if (other.hasClientWorkstation()) {
            bitField0_ |= 0x00000010;
            clientWorkstation_ = other.clientWorkstation_;
            onChanged();
          }
          if (other.hasClientApplication()) {
            bitField0_ |= 0x00000020;
            clientApplication_ = other.clientApplication_;
            onChanged();
          }
          if (other.hasClientAccounting()) {
            bitField0_ |= 0x00000040;
            clientAccounting_ = other.clientAccounting_;
            onChanged();
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private java.lang.Object clientReferenceTimestamp_ = "";
        /**
         * <pre>
         **
         * Current timestamp (in UTC) when the client sent the SQL statement to the accelerator.
         * </pre>
         *
         * <code>optional string client_reference_timestamp = 1;</code>
         * @return Whether the clientReferenceTimestamp field is set.
         */
        public boolean hasClientReferenceTimestamp() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         **
         * Current timestamp (in UTC) when the client sent the SQL statement to the accelerator.
         * </pre>
         *
         * <code>optional string client_reference_timestamp = 1;</code>
         * @return The clientReferenceTimestamp.
         */
        public java.lang.String getClientReferenceTimestamp() {
          java.lang.Object ref = clientReferenceTimestamp_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              clientReferenceTimestamp_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         **
         * Current timestamp (in UTC) when the client sent the SQL statement to the accelerator.
         * </pre>
         *
         * <code>optional string client_reference_timestamp = 1;</code>
         * @return The bytes for clientReferenceTimestamp.
         */
        public com.google.protobuf.ByteString
            getClientReferenceTimestampBytes() {
          java.lang.Object ref = clientReferenceTimestamp_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b =
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            clientReferenceTimestamp_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         **
         * Current timestamp (in UTC) when the client sent the SQL statement to the accelerator.
         * </pre>
         *
         * <code>optional string client_reference_timestamp = 1;</code>
         * @param value The clientReferenceTimestamp to set.
         * @return This builder for chaining.
         */
        public Builder setClientReferenceTimestamp(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          clientReferenceTimestamp_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         **
         * Current timestamp (in UTC) when the client sent the SQL statement to the accelerator.
         * </pre>
         *
         * <code>optional string client_reference_timestamp = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearClientReferenceTimestamp() {
          bitField0_ = (bitField0_ & ~0x00000001);
          clientReferenceTimestamp_ = getDefaultInstance().getClientReferenceTimestamp();
          onChanged();
          return this;
        }
        /**
         * <pre>
         **
         * Current timestamp (in UTC) when the client sent the SQL statement to the accelerator.
         * </pre>
         *
         * <code>optional string client_reference_timestamp = 1;</code>
         * @param value The bytes for clientReferenceTimestamp to set.
         * @return This builder for chaining.
         */
        public Builder setClientReferenceTimestampBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          clientReferenceTimestamp_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object clientReferenceTimezone_ = "";
        /**
         * <pre>
         **
         * Timezone configured for the client when the SQL statement was send to the accelerator.
         * </pre>
         *
         * <code>optional string client_reference_timezone = 2;</code>
         * @return Whether the clientReferenceTimezone field is set.
         */
        public boolean hasClientReferenceTimezone() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         **
         * Timezone configured for the client when the SQL statement was send to the accelerator.
         * </pre>
         *
         * <code>optional string client_reference_timezone = 2;</code>
         * @return The clientReferenceTimezone.
         */
        public java.lang.String getClientReferenceTimezone() {
          java.lang.Object ref = clientReferenceTimezone_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              clientReferenceTimezone_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         **
         * Timezone configured for the client when the SQL statement was send to the accelerator.
         * </pre>
         *
         * <code>optional string client_reference_timezone = 2;</code>
         * @return The bytes for clientReferenceTimezone.
         */
        public com.google.protobuf.ByteString
            getClientReferenceTimezoneBytes() {
          java.lang.Object ref = clientReferenceTimezone_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b =
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            clientReferenceTimezone_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         **
         * Timezone configured for the client when the SQL statement was send to the accelerator.
         * </pre>
         *
         * <code>optional string client_reference_timezone = 2;</code>
         * @param value The clientReferenceTimezone to set.
         * @return This builder for chaining.
         */
        public Builder setClientReferenceTimezone(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          clientReferenceTimezone_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         **
         * Timezone configured for the client when the SQL statement was send to the accelerator.
         * </pre>
         *
         * <code>optional string client_reference_timezone = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearClientReferenceTimezone() {
          bitField0_ = (bitField0_ & ~0x00000002);
          clientReferenceTimezone_ = getDefaultInstance().getClientReferenceTimezone();
          onChanged();
          return this;
        }
        /**
         * <pre>
         **
         * Timezone configured for the client when the SQL statement was send to the accelerator.
         * </pre>
         *
         * <code>optional string client_reference_timezone = 2;</code>
         * @param value The bytes for clientReferenceTimezone to set.
         * @return This builder for chaining.
         */
        public Builder setClientReferenceTimezoneBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          clientReferenceTimezone_ = value;
          onChanged();
          return this;
        }

        private long clientReferenceTimestampReceiveTime_ ;
        /**
         * <pre>
         **
         * The system clock is queried when the value for field &#64;c client_reference_timestamp is
         * received from the client.
         * Note that the system clock is counted from the last reboot. Therefore, the value here
         * can only be related to field &#64;c real_world_entry_time (in section &#64;c timings) because
         * we have the wall clock time for that in field &#64;c real_world_entry_timestamp.
         * </pre>
         *
         * <code>optional uint64 client_reference_timestamp_receive_time = 3;</code>
         * @return Whether the clientReferenceTimestampReceiveTime field is set.
         */
        public boolean hasClientReferenceTimestampReceiveTime() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <pre>
         **
         * The system clock is queried when the value for field &#64;c client_reference_timestamp is
         * received from the client.
         * Note that the system clock is counted from the last reboot. Therefore, the value here
         * can only be related to field &#64;c real_world_entry_time (in section &#64;c timings) because
         * we have the wall clock time for that in field &#64;c real_world_entry_timestamp.
         * </pre>
         *
         * <code>optional uint64 client_reference_timestamp_receive_time = 3;</code>
         * @return The clientReferenceTimestampReceiveTime.
         */
        public long getClientReferenceTimestampReceiveTime() {
          return clientReferenceTimestampReceiveTime_;
        }
        /**
         * <pre>
         **
         * The system clock is queried when the value for field &#64;c client_reference_timestamp is
         * received from the client.
         * Note that the system clock is counted from the last reboot. Therefore, the value here
         * can only be related to field &#64;c real_world_entry_time (in section &#64;c timings) because
         * we have the wall clock time for that in field &#64;c real_world_entry_timestamp.
         * </pre>
         *
         * <code>optional uint64 client_reference_timestamp_receive_time = 3;</code>
         * @param value The clientReferenceTimestampReceiveTime to set.
         * @return This builder for chaining.
         */
        public Builder setClientReferenceTimestampReceiveTime(long value) {
          bitField0_ |= 0x00000004;
          clientReferenceTimestampReceiveTime_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         **
         * The system clock is queried when the value for field &#64;c client_reference_timestamp is
         * received from the client.
         * Note that the system clock is counted from the last reboot. Therefore, the value here
         * can only be related to field &#64;c real_world_entry_time (in section &#64;c timings) because
         * we have the wall clock time for that in field &#64;c real_world_entry_timestamp.
         * </pre>
         *
         * <code>optional uint64 client_reference_timestamp_receive_time = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearClientReferenceTimestampReceiveTime() {
          bitField0_ = (bitField0_ & ~0x00000004);
          clientReferenceTimestampReceiveTime_ = 0L;
          onChanged();
          return this;
        }

        private java.lang.Object clientUserId_ = "";
        /**
         * <pre>
         **
         * Setting of the special register CURRENT CLIENT_USERID on the client side.
         * This client user ID can be set by the user's application. The value is
         * associated with the backend SQL connection via stored procedure call
         * WLM_SET_CLIENT_INFO().
         * </pre>
         *
         * <code>optional string client_user_id = 4;</code>
         * @return Whether the clientUserId field is set.
         */
        public boolean hasClientUserId() {
          return ((bitField0_ & 0x00000008) != 0);
        }
        /**
         * <pre>
         **
         * Setting of the special register CURRENT CLIENT_USERID on the client side.
         * This client user ID can be set by the user's application. The value is
         * associated with the backend SQL connection via stored procedure call
         * WLM_SET_CLIENT_INFO().
         * </pre>
         *
         * <code>optional string client_user_id = 4;</code>
         * @return The clientUserId.
         */
        public java.lang.String getClientUserId() {
          java.lang.Object ref = clientUserId_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              clientUserId_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         **
         * Setting of the special register CURRENT CLIENT_USERID on the client side.
         * This client user ID can be set by the user's application. The value is
         * associated with the backend SQL connection via stored procedure call
         * WLM_SET_CLIENT_INFO().
         * </pre>
         *
         * <code>optional string client_user_id = 4;</code>
         * @return The bytes for clientUserId.
         */
        public com.google.protobuf.ByteString
            getClientUserIdBytes() {
          java.lang.Object ref = clientUserId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b =
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            clientUserId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         **
         * Setting of the special register CURRENT CLIENT_USERID on the client side.
         * This client user ID can be set by the user's application. The value is
         * associated with the backend SQL connection via stored procedure call
         * WLM_SET_CLIENT_INFO().
         * </pre>
         *
         * <code>optional string client_user_id = 4;</code>
         * @param value The clientUserId to set.
         * @return This builder for chaining.
         */
        public Builder setClientUserId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
          clientUserId_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         **
         * Setting of the special register CURRENT CLIENT_USERID on the client side.
         * This client user ID can be set by the user's application. The value is
         * associated with the backend SQL connection via stored procedure call
         * WLM_SET_CLIENT_INFO().
         * </pre>
         *
         * <code>optional string client_user_id = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearClientUserId() {
          bitField0_ = (bitField0_ & ~0x00000008);
          clientUserId_ = getDefaultInstance().getClientUserId();
          onChanged();
          return this;
        }
        /**
         * <pre>
         **
         * Setting of the special register CURRENT CLIENT_USERID on the client side.
         * This client user ID can be set by the user's application. The value is
         * associated with the backend SQL connection via stored procedure call
         * WLM_SET_CLIENT_INFO().
         * </pre>
         *
         * <code>optional string client_user_id = 4;</code>
         * @param value The bytes for clientUserId to set.
         * @return This builder for chaining.
         */
        public Builder setClientUserIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
          clientUserId_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object clientWorkstation_ = "";
        /**
         * <pre>
         **
         * Setting of the special register CURRENT CLIENT_WLKSTNNAME on the client side.
         * This workstation name can be set by the user's application. The value is
         * associated with the backend SQL connection via stored procedure call
         * WLM_SET_CLIENT_INFO().
         * </pre>
         *
         * <code>optional string client_workstation = 5;</code>
         * @return Whether the clientWorkstation field is set.
         */
        public boolean hasClientWorkstation() {
          return ((bitField0_ & 0x00000010) != 0);
        }
        /**
         * <pre>
         **
         * Setting of the special register CURRENT CLIENT_WLKSTNNAME on the client side.
         * This workstation name can be set by the user's application. The value is
         * associated with the backend SQL connection via stored procedure call
         * WLM_SET_CLIENT_INFO().
         * </pre>
         *
         * <code>optional string client_workstation = 5;</code>
         * @return The clientWorkstation.
         */
        public java.lang.String getClientWorkstation() {
          java.lang.Object ref = clientWorkstation_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              clientWorkstation_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         **
         * Setting of the special register CURRENT CLIENT_WLKSTNNAME on the client side.
         * This workstation name can be set by the user's application. The value is
         * associated with the backend SQL connection via stored procedure call
         * WLM_SET_CLIENT_INFO().
         * </pre>
         *
         * <code>optional string client_workstation = 5;</code>
         * @return The bytes for clientWorkstation.
         */
        public com.google.protobuf.ByteString
            getClientWorkstationBytes() {
          java.lang.Object ref = clientWorkstation_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b =
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            clientWorkstation_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         **
         * Setting of the special register CURRENT CLIENT_WLKSTNNAME on the client side.
         * This workstation name can be set by the user's application. The value is
         * associated with the backend SQL connection via stored procedure call
         * WLM_SET_CLIENT_INFO().
         * </pre>
         *
         * <code>optional string client_workstation = 5;</code>
         * @param value The clientWorkstation to set.
         * @return This builder for chaining.
         */
        public Builder setClientWorkstation(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
          clientWorkstation_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         **
         * Setting of the special register CURRENT CLIENT_WLKSTNNAME on the client side.
         * This workstation name can be set by the user's application. The value is
         * associated with the backend SQL connection via stored procedure call
         * WLM_SET_CLIENT_INFO().
         * </pre>
         *
         * <code>optional string client_workstation = 5;</code>
         * @return This builder for chaining.
         */
        public Builder clearClientWorkstation() {
          bitField0_ = (bitField0_ & ~0x00000010);
          clientWorkstation_ = getDefaultInstance().getClientWorkstation();
          onChanged();
          return this;
        }
        /**
         * <pre>
         **
         * Setting of the special register CURRENT CLIENT_WLKSTNNAME on the client side.
         * This workstation name can be set by the user's application. The value is
         * associated with the backend SQL connection via stored procedure call
         * WLM_SET_CLIENT_INFO().
         * </pre>
         *
         * <code>optional string client_workstation = 5;</code>
         * @param value The bytes for clientWorkstation to set.
         * @return This builder for chaining.
         */
        public Builder setClientWorkstationBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
          clientWorkstation_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object clientApplication_ = "";
        /**
         * <pre>
         **
         * Setting of the special register CURRENT CLIENT_APPLNAME on the client side.
         * This application name can be set by the user's application. The value is
         * associated with the backend SQL connection via stored procedure call
         * WLM_SET_CLIENT_INFO().
         * </pre>
         *
         * <code>optional string client_application = 6;</code>
         * @return Whether the clientApplication field is set.
         */
        public boolean hasClientApplication() {
          return ((bitField0_ & 0x00000020) != 0);
        }
        /**
         * <pre>
         **
         * Setting of the special register CURRENT CLIENT_APPLNAME on the client side.
         * This application name can be set by the user's application. The value is
         * associated with the backend SQL connection via stored procedure call
         * WLM_SET_CLIENT_INFO().
         * </pre>
         *
         * <code>optional string client_application = 6;</code>
         * @return The clientApplication.
         */
        public java.lang.String getClientApplication() {
          java.lang.Object ref = clientApplication_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              clientApplication_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         **
         * Setting of the special register CURRENT CLIENT_APPLNAME on the client side.
         * This application name can be set by the user's application. The value is
         * associated with the backend SQL connection via stored procedure call
         * WLM_SET_CLIENT_INFO().
         * </pre>
         *
         * <code>optional string client_application = 6;</code>
         * @return The bytes for clientApplication.
         */
        public com.google.protobuf.ByteString
            getClientApplicationBytes() {
          java.lang.Object ref = clientApplication_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b =
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            clientApplication_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         **
         * Setting of the special register CURRENT CLIENT_APPLNAME on the client side.
         * This application name can be set by the user's application. The value is
         * associated with the backend SQL connection via stored procedure call
         * WLM_SET_CLIENT_INFO().
         * </pre>
         *
         * <code>optional string client_application = 6;</code>
         * @param value The clientApplication to set.
         * @return This builder for chaining.
         */
        public Builder setClientApplication(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
          clientApplication_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         **
         * Setting of the special register CURRENT CLIENT_APPLNAME on the client side.
         * This application name can be set by the user's application. The value is
         * associated with the backend SQL connection via stored procedure call
         * WLM_SET_CLIENT_INFO().
         * </pre>
         *
         * <code>optional string client_application = 6;</code>
         * @return This builder for chaining.
         */
        public Builder clearClientApplication() {
          bitField0_ = (bitField0_ & ~0x00000020);
          clientApplication_ = getDefaultInstance().getClientApplication();
          onChanged();
          return this;
        }
        /**
         * <pre>
         **
         * Setting of the special register CURRENT CLIENT_APPLNAME on the client side.
         * This application name can be set by the user's application. The value is
         * associated with the backend SQL connection via stored procedure call
         * WLM_SET_CLIENT_INFO().
         * </pre>
         *
         * <code>optional string client_application = 6;</code>
         * @param value The bytes for clientApplication to set.
         * @return This builder for chaining.
         */
        public Builder setClientApplicationBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
          clientApplication_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object clientAccounting_ = "";
        /**
         * <pre>
         **
         * Setting of the special register CURRENT CLIENT_ACCTNG on the client side.
         * This accounting information can be set by the user's application.
         * </pre>
         *
         * <code>optional string client_accounting = 7;</code>
         * @return Whether the clientAccounting field is set.
         */
        public boolean hasClientAccounting() {
          return ((bitField0_ & 0x00000040) != 0);
        }
        /**
         * <pre>
         **
         * Setting of the special register CURRENT CLIENT_ACCTNG on the client side.
         * This accounting information can be set by the user's application.
         * </pre>
         *
         * <code>optional string client_accounting = 7;</code>
         * @return The clientAccounting.
         */
        public java.lang.String getClientAccounting() {
          java.lang.Object ref = clientAccounting_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              clientAccounting_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         **
         * Setting of the special register CURRENT CLIENT_ACCTNG on the client side.
         * This accounting information can be set by the user's application.
         * </pre>
         *
         * <code>optional string client_accounting = 7;</code>
         * @return The bytes for clientAccounting.
         */
        public com.google.protobuf.ByteString
            getClientAccountingBytes() {
          java.lang.Object ref = clientAccounting_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b =
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            clientAccounting_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         **
         * Setting of the special register CURRENT CLIENT_ACCTNG on the client side.
         * This accounting information can be set by the user's application.
         * </pre>
         *
         * <code>optional string client_accounting = 7;</code>
         * @param value The clientAccounting to set.
         * @return This builder for chaining.
         */
        public Builder setClientAccounting(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
          clientAccounting_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         **
         * Setting of the special register CURRENT CLIENT_ACCTNG on the client side.
         * This accounting information can be set by the user's application.
         * </pre>
         *
         * <code>optional string client_accounting = 7;</code>
         * @return This builder for chaining.
         */
        public Builder clearClientAccounting() {
          bitField0_ = (bitField0_ & ~0x00000040);
          clientAccounting_ = getDefaultInstance().getClientAccounting();
          onChanged();
          return this;
        }
        /**
         * <pre>
         **
         * Setting of the special register CURRENT CLIENT_ACCTNG on the client side.
         * This accounting information can be set by the user's application.
         * </pre>
         *
         * <code>optional string client_accounting = 7;</code>
         * @param value The bytes for clientAccounting to set.
         * @return This builder for chaining.
         */
        public Builder setClientAccountingBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
          clientAccounting_ = value;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:SQLStatementDetailsData.QuerySpecialRegisters)
      }

      // @@protoc_insertion_point(class_scope:SQLStatementDetailsData.QuerySpecialRegisters)
      private static final SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters();
      }

      public static SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<QuerySpecialRegisters>
          PARSER = new com.google.protobuf.AbstractParser<QuerySpecialRegisters>() {
        @java.lang.Override
        public QuerySpecialRegisters parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new QuerySpecialRegisters(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<QuerySpecialRegisters> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<QuerySpecialRegisters> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface TimingsOrBuilder extends
        // @@protoc_insertion_point(interface_extends:SQLStatementDetailsData.Timings)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       **
       * Time from the wall clock when the SQL statement entered the system. This
       * timestamp is in UTC timezone.
       * </pre>
       *
       * <code>optional string real_world_entry_timestamp = 1;</code>
       * @return Whether the realWorldEntryTimestamp field is set.
       */
      boolean hasRealWorldEntryTimestamp();
      /**
       * <pre>
       **
       * Time from the wall clock when the SQL statement entered the system. This
       * timestamp is in UTC timezone.
       * </pre>
       *
       * <code>optional string real_world_entry_timestamp = 1;</code>
       * @return The realWorldEntryTimestamp.
       */
      java.lang.String getRealWorldEntryTimestamp();
      /**
       * <pre>
       **
       * Time from the wall clock when the SQL statement entered the system. This
       * timestamp is in UTC timezone.
       * </pre>
       *
       * <code>optional string real_world_entry_timestamp = 1;</code>
       * @return The bytes for realWorldEntryTimestamp.
       */
      com.google.protobuf.ByteString
          getRealWorldEntryTimestampBytes();

      /**
       * <pre>
       **
       * Time from the wall clock when the SQL statement entered the system.
       * This is number of micro-seconds since 1970-01-01 00:00:00.
       * </pre>
       *
       * <code>optional uint64 real_world_entry_time = 2;</code>
       * @return Whether the realWorldEntryTime field is set.
       */
      boolean hasRealWorldEntryTime();
      /**
       * <pre>
       **
       * Time from the wall clock when the SQL statement entered the system.
       * This is number of micro-seconds since 1970-01-01 00:00:00.
       * </pre>
       *
       * <code>optional uint64 real_world_entry_time = 2;</code>
       * @return The realWorldEntryTime.
       */
      long getRealWorldEntryTime();

      /**
       * <pre>
       **
       * Time from the system clock when the SQL statement entered the system.
       * This time is collected together with &#64;c real_world_entry_timestamp.
       * </pre>
       *
       * <code>optional uint64 system_entry_time = 3;</code>
       * @return Whether the systemEntryTime field is set.
       */
      boolean hasSystemEntryTime();
      /**
       * <pre>
       **
       * Time from the system clock when the SQL statement entered the system.
       * This time is collected together with &#64;c real_world_entry_timestamp.
       * </pre>
       *
       * <code>optional uint64 system_entry_time = 3;</code>
       * @return The systemEntryTime.
       */
      long getSystemEntryTime();

      /**
       * <pre>
       *&#47; time from the system clock when the prepare of the SQL statement was started
       * </pre>
       *
       * <code>optional uint64 prepare_start_time = 4;</code>
       * @return Whether the prepareStartTime field is set.
       */
      boolean hasPrepareStartTime();
      /**
       * <pre>
       *&#47; time from the system clock when the prepare of the SQL statement was started
       * </pre>
       *
       * <code>optional uint64 prepare_start_time = 4;</code>
       * @return The prepareStartTime.
       */
      long getPrepareStartTime();

      /**
       * <pre>
       *&#47; time from the system clock when the prepare of the SQL statement has finished
       * </pre>
       *
       * <code>optional uint64 prepare_finish_time = 5;</code>
       * @return Whether the prepareFinishTime field is set.
       */
      boolean hasPrepareFinishTime();
      /**
       * <pre>
       *&#47; time from the system clock when the prepare of the SQL statement has finished
       * </pre>
       *
       * <code>optional uint64 prepare_finish_time = 5;</code>
       * @return The prepareFinishTime.
       */
      long getPrepareFinishTime();

      /**
       * <pre>
       *&#47; time from the system clock when execution of the SQL statement in the backend was started
       * </pre>
       *
       * <code>optional uint64 backend_execution_start_time = 6;</code>
       * @return Whether the backendExecutionStartTime field is set.
       */
      boolean hasBackendExecutionStartTime();
      /**
       * <pre>
       *&#47; time from the system clock when execution of the SQL statement in the backend was started
       * </pre>
       *
       * <code>optional uint64 backend_execution_start_time = 6;</code>
       * @return The backendExecutionStartTime.
       */
      long getBackendExecutionStartTime();

      /**
       * <pre>
       *&#47; time from the system clock when the first row was fetched from the backend
       * </pre>
       *
       * <code>optional uint64 backend_first_row_fetch_time = 7;</code>
       * @return Whether the backendFirstRowFetchTime field is set.
       */
      boolean hasBackendFirstRowFetchTime();
      /**
       * <pre>
       *&#47; time from the system clock when the first row was fetched from the backend
       * </pre>
       *
       * <code>optional uint64 backend_first_row_fetch_time = 7;</code>
       * @return The backendFirstRowFetchTime.
       */
      long getBackendFirstRowFetchTime();

      /**
       * <pre>
       *&#47; time from the system clock when execution of the SQL statement in the backend finished
       * / (note that result rows may still be fetched after statement execution finished)
       * </pre>
       *
       * <code>optional uint64 backend_execution_finish_time = 8;</code>
       * @return Whether the backendExecutionFinishTime field is set.
       */
      boolean hasBackendExecutionFinishTime();
      /**
       * <pre>
       *&#47; time from the system clock when execution of the SQL statement in the backend finished
       * / (note that result rows may still be fetched after statement execution finished)
       * </pre>
       *
       * <code>optional uint64 backend_execution_finish_time = 8;</code>
       * @return The backendExecutionFinishTime.
       */
      long getBackendExecutionFinishTime();

      /**
       * <pre>
       *&#47; time from the system clock when the last row was requested/sent to the client
       * </pre>
       *
       * <code>optional uint64 client_last_row_fetch_time = 9;</code>
       * @return Whether the clientLastRowFetchTime field is set.
       */
      boolean hasClientLastRowFetchTime();
      /**
       * <pre>
       *&#47; time from the system clock when the last row was requested/sent to the client
       * </pre>
       *
       * <code>optional uint64 client_last_row_fetch_time = 9;</code>
       * @return The clientLastRowFetchTime.
       */
      long getClientLastRowFetchTime();

      /**
       * <pre>
       *&#47; time from the system clock when the execution in the accelerator finished; that time
       * / does not include any post-processing time
       * </pre>
       *
       * <code>optional uint64 system_finish_time = 10;</code>
       * @return Whether the systemFinishTime field is set.
       */
      boolean hasSystemFinishTime();
      /**
       * <pre>
       *&#47; time from the system clock when the execution in the accelerator finished; that time
       * / does not include any post-processing time
       * </pre>
       *
       * <code>optional uint64 system_finish_time = 10;</code>
       * @return The systemFinishTime.
       */
      long getSystemFinishTime();

      /**
       * <pre>
       *&#47; time from the system clock when the post-processing was finished
       * </pre>
       *
       * <code>optional uint64 post_processing_exit_time = 11;</code>
       * @return Whether the postProcessingExitTime field is set.
       */
      boolean hasPostProcessingExitTime();
      /**
       * <pre>
       *&#47; time from the system clock when the post-processing was finished
       * </pre>
       *
       * <code>optional uint64 post_processing_exit_time = 11;</code>
       * @return The postProcessingExitTime.
       */
      long getPostProcessingExitTime();

      /**
       * <pre>
       *&#47; CPU time spent for the SQL statement in the accelerator only
       * / (CPU time spent in the backend is tracked in field &#64;c backend_cpu_time)
       * </pre>
       *
       * <code>optional uint64 dwa_cpu_time = 12;</code>
       * @return Whether the dwaCpuTime field is set.
       */
      boolean hasDwaCpuTime();
      /**
       * <pre>
       *&#47; CPU time spent for the SQL statement in the accelerator only
       * / (CPU time spent in the backend is tracked in field &#64;c backend_cpu_time)
       * </pre>
       *
       * <code>optional uint64 dwa_cpu_time = 12;</code>
       * @return The dwaCpuTime.
       */
      long getDwaCpuTime();

      /**
       * <pre>
       **
       * CPU time spend for SQL statement in the backend.
       * This information is available only after the SQL statement execution in the
       * backend has finished. It may also include the CPU time spend for fetching
       * the result set from the backend.
       * </pre>
       *
       * <code>optional uint64 backend_cpu_time = 13;</code>
       * @return Whether the backendCpuTime field is set.
       */
      boolean hasBackendCpuTime();
      /**
       * <pre>
       **
       * CPU time spend for SQL statement in the backend.
       * This information is available only after the SQL statement execution in the
       * backend has finished. It may also include the CPU time spend for fetching
       * the result set from the backend.
       * </pre>
       *
       * <code>optional uint64 backend_cpu_time = 13;</code>
       * @return The backendCpuTime.
       */
      long getBackendCpuTime();

      /**
       * <pre>
       **
       * Wait time for SQL statement in the backend.
       * This information is available only after the SQL statement execution in the
       * backend has finished.
       * </pre>
       *
       * <code>optional uint64 backend_wait_time = 14;</code>
       * @return Whether the backendWaitTime field is set.
       */
      boolean hasBackendWaitTime();
      /**
       * <pre>
       **
       * Wait time for SQL statement in the backend.
       * This information is available only after the SQL statement execution in the
       * backend has finished.
       * </pre>
       *
       * <code>optional uint64 backend_wait_time = 14;</code>
       * @return The backendWaitTime.
       */
      long getBackendWaitTime();

      /**
       * <pre>
       **
       * Time spend for collecting monitoring/accounting information from the backend.
       * Additional queries are executed before/after the execution of the actual SQL
       * statement to obtain monitoring counters from the backend.
       * </pre>
       *
       * <code>optional uint64 backend_accounting_collection_time = 15;</code>
       * @return Whether the backendAccountingCollectionTime field is set.
       */
      boolean hasBackendAccountingCollectionTime();
      /**
       * <pre>
       **
       * Time spend for collecting monitoring/accounting information from the backend.
       * Additional queries are executed before/after the execution of the actual SQL
       * statement to obtain monitoring counters from the backend.
       * </pre>
       *
       * <code>optional uint64 backend_accounting_collection_time = 15;</code>
       * @return The backendAccountingCollectionTime.
       */
      long getBackendAccountingCollectionTime();

      /**
       * <pre>
       *&#47; time spend for preparing the SQL statement;
       * / this is an elapsed time measured in seconds (with fractions)
       * </pre>
       *
       * <code>optional double prepare_time = 16;</code>
       * @return Whether the prepareTime field is set.
       */
      boolean hasPrepareTime();
      /**
       * <pre>
       *&#47; time spend for preparing the SQL statement;
       * / this is an elapsed time measured in seconds (with fractions)
       * </pre>
       *
       * <code>optional double prepare_time = 16;</code>
       * @return The prepareTime.
       */
      double getPrepareTime();

      /**
       * <pre>
       *&#47; time spend for executing the SQL statement (without result set fetching);
       * / this is an elapsed time measured in seconds (with fractions)
       * </pre>
       *
       * <code>optional double backendDBSExecTime = 17;</code>
       * @return Whether the backendDBSExecTime field is set.
       */
      boolean hasBackendDBSExecTime();
      /**
       * <pre>
       *&#47; time spend for executing the SQL statement (without result set fetching);
       * / this is an elapsed time measured in seconds (with fractions)
       * </pre>
       *
       * <code>optional double backendDBSExecTime = 17;</code>
       * @return The backendDBSExecTime.
       */
      double getBackendDBSExecTime();

      /**
       * <pre>
       *&#47; time spend for fetching the result set of the SQL statement after execution;
       * / this is an elapsed time measured in seconds (with fractions)
       * </pre>
       *
       * <code>optional double fetch_time = 18;</code>
       * @return Whether the fetchTime field is set.
       */
      boolean hasFetchTime();
      /**
       * <pre>
       *&#47; time spend for fetching the result set of the SQL statement after execution;
       * / this is an elapsed time measured in seconds (with fractions)
       * </pre>
       *
       * <code>optional double fetch_time = 18;</code>
       * @return The fetchTime.
       */
      double getFetchTime();

      /**
       * <pre>
       *&#47; time spend between &#64;c system_entry_time and &#64;c system_finish_time;
       * / this is an elapsed time measured in seconds (with fractions)
       * </pre>
       *
       * <code>optional double totalElapsedTime = 19;</code>
       * @return Whether the totalElapsedTime field is set.
       */
      boolean hasTotalElapsedTime();
      /**
       * <pre>
       *&#47; time spend between &#64;c system_entry_time and &#64;c system_finish_time;
       * / this is an elapsed time measured in seconds (with fractions)
       * </pre>
       *
       * <code>optional double totalElapsedTime = 19;</code>
       * @return The totalElapsedTime.
       */
      double getTotalElapsedTime();

      /**
       * <pre>
       *&#47; time spend for post-processing activities;
       * / this is an elapsed time measured in seconds (with fractions)
       * </pre>
       *
       * <code>optional double postProcessingTime = 20;</code>
       * @return Whether the postProcessingTime field is set.
       */
      boolean hasPostProcessingTime();
      /**
       * <pre>
       *&#47; time spend for post-processing activities;
       * / this is an elapsed time measured in seconds (with fractions)
       * </pre>
       *
       * <code>optional double postProcessingTime = 20;</code>
       * @return The postProcessingTime.
       */
      double getPostProcessingTime();

      /**
       * <pre>
       **
       * The value of the special register value stored in field &#64;c client_reference_timestamp)
       * is parsed into the internal representation and stored here. The value is a
       * time from the wall clock that measures the number of seconds from
       * 1970-01-01 00:00:00.
       * Note that this is _not_ like all the other timers. The purpose of this field
       * is very much unclear as well. But we cannot remove it to keep things
       * backward-compatible.
       * </pre>
       *
       * <code>optional uint64 cached_parsed_client_reference_timestamp = 21;</code>
       * @return Whether the cachedParsedClientReferenceTimestamp field is set.
       */
      boolean hasCachedParsedClientReferenceTimestamp();
      /**
       * <pre>
       **
       * The value of the special register value stored in field &#64;c client_reference_timestamp)
       * is parsed into the internal representation and stored here. The value is a
       * time from the wall clock that measures the number of seconds from
       * 1970-01-01 00:00:00.
       * Note that this is _not_ like all the other timers. The purpose of this field
       * is very much unclear as well. But we cannot remove it to keep things
       * backward-compatible.
       * </pre>
       *
       * <code>optional uint64 cached_parsed_client_reference_timestamp = 21;</code>
       * @return The cachedParsedClientReferenceTimestamp.
       */
      long getCachedParsedClientReferenceTimestamp();

      /**
       * <pre>
       **
       * The client sends CNTQRY (Continue Query) DRDA messages when fetching the result
       * set from the accelerator. Each such message is responded to with another chunk
       * of data in QRYDTA (Query Data) messages. The wait times between sending those
       * QRYDTA messages and receiving the next CNTQRY messages are tracked in the
       * following fields. The fields are updated and recalculated for each CNTQRY message.
       * </pre>
       *
       * <code>optional int64 total_continue_query_wait_time = 22;</code>
       * @return Whether the totalContinueQueryWaitTime field is set.
       */
      boolean hasTotalContinueQueryWaitTime();
      /**
       * <pre>
       **
       * The client sends CNTQRY (Continue Query) DRDA messages when fetching the result
       * set from the accelerator. Each such message is responded to with another chunk
       * of data in QRYDTA (Query Data) messages. The wait times between sending those
       * QRYDTA messages and receiving the next CNTQRY messages are tracked in the
       * following fields. The fields are updated and recalculated for each CNTQRY message.
       * </pre>
       *
       * <code>optional int64 total_continue_query_wait_time = 22;</code>
       * @return The totalContinueQueryWaitTime.
       */
      long getTotalContinueQueryWaitTime();

      /**
       * <code>optional int64 average_continue_query_wait_time = 23;</code>
       * @return Whether the averageContinueQueryWaitTime field is set.
       */
      boolean hasAverageContinueQueryWaitTime();
      /**
       * <code>optional int64 average_continue_query_wait_time = 23;</code>
       * @return The averageContinueQueryWaitTime.
       */
      long getAverageContinueQueryWaitTime();

      /**
       * <code>optional int64 smallest_continue_query_wait_time = 24;</code>
       * @return Whether the smallestContinueQueryWaitTime field is set.
       */
      boolean hasSmallestContinueQueryWaitTime();
      /**
       * <code>optional int64 smallest_continue_query_wait_time = 24;</code>
       * @return The smallestContinueQueryWaitTime.
       */
      long getSmallestContinueQueryWaitTime();

      /**
       * <code>optional int64 largest_continue_query_wait_time = 25;</code>
       * @return Whether the largestContinueQueryWaitTime field is set.
       */
      boolean hasLargestContinueQueryWaitTime();
      /**
       * <code>optional int64 largest_continue_query_wait_time = 25;</code>
       * @return The largestContinueQueryWaitTime.
       */
      long getLargestContinueQueryWaitTime();

      /**
       * <code>optional int64 num_continue_query_wait_times = 26;</code>
       * @return Whether the numContinueQueryWaitTimes field is set.
       */
      boolean hasNumContinueQueryWaitTimes();
      /**
       * <code>optional int64 num_continue_query_wait_times = 26;</code>
       * @return The numContinueQueryWaitTimes.
       */
      long getNumContinueQueryWaitTimes();
    }
    /**
     * <pre>
     **
     * All times that are based on the system clock. The system clock counts the number
     * of micro-seconds since the last boot of the operating system. That clock is stable
     * insofar as it will not jump forward or backwards (as other clocks may do in case
     * time adjustments are necessary).
     * In order to map values from the system clock to the corresponding wall clock time,
     * calculate the delta to field &#64;c system_entry_time, and add that delta to field
     * &#64;c real_world_entry_timestamp.
     * </pre>
     *
     * Protobuf type {@code SQLStatementDetailsData.Timings}
     */
    public  static final class Timings extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:SQLStatementDetailsData.Timings)
        TimingsOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Timings.newBuilder() to construct.
      private Timings(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Timings() {
        realWorldEntryTimestamp_ = "";
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new Timings();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Timings(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000001;
                realWorldEntryTimestamp_ = bs;
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                realWorldEntryTime_ = input.readUInt64();
                break;
              }
              case 24: {
                bitField0_ |= 0x00000004;
                systemEntryTime_ = input.readUInt64();
                break;
              }
              case 32: {
                bitField0_ |= 0x00000008;
                prepareStartTime_ = input.readUInt64();
                break;
              }
              case 40: {
                bitField0_ |= 0x00000010;
                prepareFinishTime_ = input.readUInt64();
                break;
              }
              case 48: {
                bitField0_ |= 0x00000020;
                backendExecutionStartTime_ = input.readUInt64();
                break;
              }
              case 56: {
                bitField0_ |= 0x00000040;
                backendFirstRowFetchTime_ = input.readUInt64();
                break;
              }
              case 64: {
                bitField0_ |= 0x00000080;
                backendExecutionFinishTime_ = input.readUInt64();
                break;
              }
              case 72: {
                bitField0_ |= 0x00000100;
                clientLastRowFetchTime_ = input.readUInt64();
                break;
              }
              case 80: {
                bitField0_ |= 0x00000200;
                systemFinishTime_ = input.readUInt64();
                break;
              }
              case 88: {
                bitField0_ |= 0x00000400;
                postProcessingExitTime_ = input.readUInt64();
                break;
              }
              case 96: {
                bitField0_ |= 0x00000800;
                dwaCpuTime_ = input.readUInt64();
                break;
              }
              case 104: {
                bitField0_ |= 0x00001000;
                backendCpuTime_ = input.readUInt64();
                break;
              }
              case 112: {
                bitField0_ |= 0x00002000;
                backendWaitTime_ = input.readUInt64();
                break;
              }
              case 120: {
                bitField0_ |= 0x00004000;
                backendAccountingCollectionTime_ = input.readUInt64();
                break;
              }
              case 129: {
                bitField0_ |= 0x00008000;
                prepareTime_ = input.readDouble();
                break;
              }
              case 137: {
                bitField0_ |= 0x00010000;
                backendDBSExecTime_ = input.readDouble();
                break;
              }
              case 145: {
                bitField0_ |= 0x00020000;
                fetchTime_ = input.readDouble();
                break;
              }
              case 153: {
                bitField0_ |= 0x00040000;
                totalElapsedTime_ = input.readDouble();
                break;
              }
              case 161: {
                bitField0_ |= 0x00080000;
                postProcessingTime_ = input.readDouble();
                break;
              }
              case 168: {
                bitField0_ |= 0x00100000;
                cachedParsedClientReferenceTimestamp_ = input.readUInt64();
                break;
              }
              case 176: {
                bitField0_ |= 0x00200000;
                totalContinueQueryWaitTime_ = input.readInt64();
                break;
              }
              case 184: {
                bitField0_ |= 0x00400000;
                averageContinueQueryWaitTime_ = input.readInt64();
                break;
              }
              case 192: {
                bitField0_ |= 0x00800000;
                smallestContinueQueryWaitTime_ = input.readInt64();
                break;
              }
              case 200: {
                bitField0_ |= 0x01000000;
                largestContinueQueryWaitTime_ = input.readInt64();
                break;
              }
              case 208: {
                bitField0_ |= 0x02000000;
                numContinueQueryWaitTimes_ = input.readInt64();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SQLStatementDetails.internal_static_SQLStatementDetailsData_Timings_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SQLStatementDetails.internal_static_SQLStatementDetailsData_Timings_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SQLStatementDetails.SQLStatementDetailsData.Timings.class, SQLStatementDetails.SQLStatementDetailsData.Timings.Builder.class);
      }

      private int bitField0_;
      public static final int REAL_WORLD_ENTRY_TIMESTAMP_FIELD_NUMBER = 1;
      private volatile java.lang.Object realWorldEntryTimestamp_;
      /**
       * <pre>
       **
       * Time from the wall clock when the SQL statement entered the system. This
       * timestamp is in UTC timezone.
       * </pre>
       *
       * <code>optional string real_world_entry_timestamp = 1;</code>
       * @return Whether the realWorldEntryTimestamp field is set.
       */
      public boolean hasRealWorldEntryTimestamp() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       **
       * Time from the wall clock when the SQL statement entered the system. This
       * timestamp is in UTC timezone.
       * </pre>
       *
       * <code>optional string real_world_entry_timestamp = 1;</code>
       * @return The realWorldEntryTimestamp.
       */
      public java.lang.String getRealWorldEntryTimestamp() {
        java.lang.Object ref = realWorldEntryTimestamp_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            realWorldEntryTimestamp_ = s;
          }
          return s;
        }
      }
      /**
       * <pre>
       **
       * Time from the wall clock when the SQL statement entered the system. This
       * timestamp is in UTC timezone.
       * </pre>
       *
       * <code>optional string real_world_entry_timestamp = 1;</code>
       * @return The bytes for realWorldEntryTimestamp.
       */
      public com.google.protobuf.ByteString
          getRealWorldEntryTimestampBytes() {
        java.lang.Object ref = realWorldEntryTimestamp_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          realWorldEntryTimestamp_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int REAL_WORLD_ENTRY_TIME_FIELD_NUMBER = 2;
      private long realWorldEntryTime_;
      /**
       * <pre>
       **
       * Time from the wall clock when the SQL statement entered the system.
       * This is number of micro-seconds since 1970-01-01 00:00:00.
       * </pre>
       *
       * <code>optional uint64 real_world_entry_time = 2;</code>
       * @return Whether the realWorldEntryTime field is set.
       */
      public boolean hasRealWorldEntryTime() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       **
       * Time from the wall clock when the SQL statement entered the system.
       * This is number of micro-seconds since 1970-01-01 00:00:00.
       * </pre>
       *
       * <code>optional uint64 real_world_entry_time = 2;</code>
       * @return The realWorldEntryTime.
       */
      public long getRealWorldEntryTime() {
        return realWorldEntryTime_;
      }

      public static final int SYSTEM_ENTRY_TIME_FIELD_NUMBER = 3;
      private long systemEntryTime_;
      /**
       * <pre>
       **
       * Time from the system clock when the SQL statement entered the system.
       * This time is collected together with &#64;c real_world_entry_timestamp.
       * </pre>
       *
       * <code>optional uint64 system_entry_time = 3;</code>
       * @return Whether the systemEntryTime field is set.
       */
      public boolean hasSystemEntryTime() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       **
       * Time from the system clock when the SQL statement entered the system.
       * This time is collected together with &#64;c real_world_entry_timestamp.
       * </pre>
       *
       * <code>optional uint64 system_entry_time = 3;</code>
       * @return The systemEntryTime.
       */
      public long getSystemEntryTime() {
        return systemEntryTime_;
      }

      public static final int PREPARE_START_TIME_FIELD_NUMBER = 4;
      private long prepareStartTime_;
      /**
       * <pre>
       *&#47; time from the system clock when the prepare of the SQL statement was started
       * </pre>
       *
       * <code>optional uint64 prepare_start_time = 4;</code>
       * @return Whether the prepareStartTime field is set.
       */
      public boolean hasPrepareStartTime() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       *&#47; time from the system clock when the prepare of the SQL statement was started
       * </pre>
       *
       * <code>optional uint64 prepare_start_time = 4;</code>
       * @return The prepareStartTime.
       */
      public long getPrepareStartTime() {
        return prepareStartTime_;
      }

      public static final int PREPARE_FINISH_TIME_FIELD_NUMBER = 5;
      private long prepareFinishTime_;
      /**
       * <pre>
       *&#47; time from the system clock when the prepare of the SQL statement has finished
       * </pre>
       *
       * <code>optional uint64 prepare_finish_time = 5;</code>
       * @return Whether the prepareFinishTime field is set.
       */
      public boolean hasPrepareFinishTime() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       *&#47; time from the system clock when the prepare of the SQL statement has finished
       * </pre>
       *
       * <code>optional uint64 prepare_finish_time = 5;</code>
       * @return The prepareFinishTime.
       */
      public long getPrepareFinishTime() {
        return prepareFinishTime_;
      }

      public static final int BACKEND_EXECUTION_START_TIME_FIELD_NUMBER = 6;
      private long backendExecutionStartTime_;
      /**
       * <pre>
       *&#47; time from the system clock when execution of the SQL statement in the backend was started
       * </pre>
       *
       * <code>optional uint64 backend_execution_start_time = 6;</code>
       * @return Whether the backendExecutionStartTime field is set.
       */
      public boolean hasBackendExecutionStartTime() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       *&#47; time from the system clock when execution of the SQL statement in the backend was started
       * </pre>
       *
       * <code>optional uint64 backend_execution_start_time = 6;</code>
       * @return The backendExecutionStartTime.
       */
      public long getBackendExecutionStartTime() {
        return backendExecutionStartTime_;
      }

      public static final int BACKEND_FIRST_ROW_FETCH_TIME_FIELD_NUMBER = 7;
      private long backendFirstRowFetchTime_;
      /**
       * <pre>
       *&#47; time from the system clock when the first row was fetched from the backend
       * </pre>
       *
       * <code>optional uint64 backend_first_row_fetch_time = 7;</code>
       * @return Whether the backendFirstRowFetchTime field is set.
       */
      public boolean hasBackendFirstRowFetchTime() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       *&#47; time from the system clock when the first row was fetched from the backend
       * </pre>
       *
       * <code>optional uint64 backend_first_row_fetch_time = 7;</code>
       * @return The backendFirstRowFetchTime.
       */
      public long getBackendFirstRowFetchTime() {
        return backendFirstRowFetchTime_;
      }

      public static final int BACKEND_EXECUTION_FINISH_TIME_FIELD_NUMBER = 8;
      private long backendExecutionFinishTime_;
      /**
       * <pre>
       *&#47; time from the system clock when execution of the SQL statement in the backend finished
       * / (note that result rows may still be fetched after statement execution finished)
       * </pre>
       *
       * <code>optional uint64 backend_execution_finish_time = 8;</code>
       * @return Whether the backendExecutionFinishTime field is set.
       */
      public boolean hasBackendExecutionFinishTime() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <pre>
       *&#47; time from the system clock when execution of the SQL statement in the backend finished
       * / (note that result rows may still be fetched after statement execution finished)
       * </pre>
       *
       * <code>optional uint64 backend_execution_finish_time = 8;</code>
       * @return The backendExecutionFinishTime.
       */
      public long getBackendExecutionFinishTime() {
        return backendExecutionFinishTime_;
      }

      public static final int CLIENT_LAST_ROW_FETCH_TIME_FIELD_NUMBER = 9;
      private long clientLastRowFetchTime_;
      /**
       * <pre>
       *&#47; time from the system clock when the last row was requested/sent to the client
       * </pre>
       *
       * <code>optional uint64 client_last_row_fetch_time = 9;</code>
       * @return Whether the clientLastRowFetchTime field is set.
       */
      public boolean hasClientLastRowFetchTime() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <pre>
       *&#47; time from the system clock when the last row was requested/sent to the client
       * </pre>
       *
       * <code>optional uint64 client_last_row_fetch_time = 9;</code>
       * @return The clientLastRowFetchTime.
       */
      public long getClientLastRowFetchTime() {
        return clientLastRowFetchTime_;
      }

      public static final int SYSTEM_FINISH_TIME_FIELD_NUMBER = 10;
      private long systemFinishTime_;
      /**
       * <pre>
       *&#47; time from the system clock when the execution in the accelerator finished; that time
       * / does not include any post-processing time
       * </pre>
       *
       * <code>optional uint64 system_finish_time = 10;</code>
       * @return Whether the systemFinishTime field is set.
       */
      public boolean hasSystemFinishTime() {
        return ((bitField0_ & 0x00000200) != 0);
      }
      /**
       * <pre>
       *&#47; time from the system clock when the execution in the accelerator finished; that time
       * / does not include any post-processing time
       * </pre>
       *
       * <code>optional uint64 system_finish_time = 10;</code>
       * @return The systemFinishTime.
       */
      public long getSystemFinishTime() {
        return systemFinishTime_;
      }

      public static final int POST_PROCESSING_EXIT_TIME_FIELD_NUMBER = 11;
      private long postProcessingExitTime_;
      /**
       * <pre>
       *&#47; time from the system clock when the post-processing was finished
       * </pre>
       *
       * <code>optional uint64 post_processing_exit_time = 11;</code>
       * @return Whether the postProcessingExitTime field is set.
       */
      public boolean hasPostProcessingExitTime() {
        return ((bitField0_ & 0x00000400) != 0);
      }
      /**
       * <pre>
       *&#47; time from the system clock when the post-processing was finished
       * </pre>
       *
       * <code>optional uint64 post_processing_exit_time = 11;</code>
       * @return The postProcessingExitTime.
       */
      public long getPostProcessingExitTime() {
        return postProcessingExitTime_;
      }

      public static final int DWA_CPU_TIME_FIELD_NUMBER = 12;
      private long dwaCpuTime_;
      /**
       * <pre>
       *&#47; CPU time spent for the SQL statement in the accelerator only
       * / (CPU time spent in the backend is tracked in field &#64;c backend_cpu_time)
       * </pre>
       *
       * <code>optional uint64 dwa_cpu_time = 12;</code>
       * @return Whether the dwaCpuTime field is set.
       */
      public boolean hasDwaCpuTime() {
        return ((bitField0_ & 0x00000800) != 0);
      }
      /**
       * <pre>
       *&#47; CPU time spent for the SQL statement in the accelerator only
       * / (CPU time spent in the backend is tracked in field &#64;c backend_cpu_time)
       * </pre>
       *
       * <code>optional uint64 dwa_cpu_time = 12;</code>
       * @return The dwaCpuTime.
       */
      public long getDwaCpuTime() {
        return dwaCpuTime_;
      }

      public static final int BACKEND_CPU_TIME_FIELD_NUMBER = 13;
      private long backendCpuTime_;
      /**
       * <pre>
       **
       * CPU time spend for SQL statement in the backend.
       * This information is available only after the SQL statement execution in the
       * backend has finished. It may also include the CPU time spend for fetching
       * the result set from the backend.
       * </pre>
       *
       * <code>optional uint64 backend_cpu_time = 13;</code>
       * @return Whether the backendCpuTime field is set.
       */
      public boolean hasBackendCpuTime() {
        return ((bitField0_ & 0x00001000) != 0);
      }
      /**
       * <pre>
       **
       * CPU time spend for SQL statement in the backend.
       * This information is available only after the SQL statement execution in the
       * backend has finished. It may also include the CPU time spend for fetching
       * the result set from the backend.
       * </pre>
       *
       * <code>optional uint64 backend_cpu_time = 13;</code>
       * @return The backendCpuTime.
       */
      public long getBackendCpuTime() {
        return backendCpuTime_;
      }

      public static final int BACKEND_WAIT_TIME_FIELD_NUMBER = 14;
      private long backendWaitTime_;
      /**
       * <pre>
       **
       * Wait time for SQL statement in the backend.
       * This information is available only after the SQL statement execution in the
       * backend has finished.
       * </pre>
       *
       * <code>optional uint64 backend_wait_time = 14;</code>
       * @return Whether the backendWaitTime field is set.
       */
      public boolean hasBackendWaitTime() {
        return ((bitField0_ & 0x00002000) != 0);
      }
      /**
       * <pre>
       **
       * Wait time for SQL statement in the backend.
       * This information is available only after the SQL statement execution in the
       * backend has finished.
       * </pre>
       *
       * <code>optional uint64 backend_wait_time = 14;</code>
       * @return The backendWaitTime.
       */
      public long getBackendWaitTime() {
        return backendWaitTime_;
      }

      public static final int BACKEND_ACCOUNTING_COLLECTION_TIME_FIELD_NUMBER = 15;
      private long backendAccountingCollectionTime_;
      /**
       * <pre>
       **
       * Time spend for collecting monitoring/accounting information from the backend.
       * Additional queries are executed before/after the execution of the actual SQL
       * statement to obtain monitoring counters from the backend.
       * </pre>
       *
       * <code>optional uint64 backend_accounting_collection_time = 15;</code>
       * @return Whether the backendAccountingCollectionTime field is set.
       */
      public boolean hasBackendAccountingCollectionTime() {
        return ((bitField0_ & 0x00004000) != 0);
      }
      /**
       * <pre>
       **
       * Time spend for collecting monitoring/accounting information from the backend.
       * Additional queries are executed before/after the execution of the actual SQL
       * statement to obtain monitoring counters from the backend.
       * </pre>
       *
       * <code>optional uint64 backend_accounting_collection_time = 15;</code>
       * @return The backendAccountingCollectionTime.
       */
      public long getBackendAccountingCollectionTime() {
        return backendAccountingCollectionTime_;
      }

      public static final int PREPARE_TIME_FIELD_NUMBER = 16;
      private double prepareTime_;
      /**
       * <pre>
       *&#47; time spend for preparing the SQL statement;
       * / this is an elapsed time measured in seconds (with fractions)
       * </pre>
       *
       * <code>optional double prepare_time = 16;</code>
       * @return Whether the prepareTime field is set.
       */
      public boolean hasPrepareTime() {
        return ((bitField0_ & 0x00008000) != 0);
      }
      /**
       * <pre>
       *&#47; time spend for preparing the SQL statement;
       * / this is an elapsed time measured in seconds (with fractions)
       * </pre>
       *
       * <code>optional double prepare_time = 16;</code>
       * @return The prepareTime.
       */
      public double getPrepareTime() {
        return prepareTime_;
      }

      public static final int BACKENDDBSEXECTIME_FIELD_NUMBER = 17;
      private double backendDBSExecTime_;
      /**
       * <pre>
       *&#47; time spend for executing the SQL statement (without result set fetching);
       * / this is an elapsed time measured in seconds (with fractions)
       * </pre>
       *
       * <code>optional double backendDBSExecTime = 17;</code>
       * @return Whether the backendDBSExecTime field is set.
       */
      public boolean hasBackendDBSExecTime() {
        return ((bitField0_ & 0x00010000) != 0);
      }
      /**
       * <pre>
       *&#47; time spend for executing the SQL statement (without result set fetching);
       * / this is an elapsed time measured in seconds (with fractions)
       * </pre>
       *
       * <code>optional double backendDBSExecTime = 17;</code>
       * @return The backendDBSExecTime.
       */
      public double getBackendDBSExecTime() {
        return backendDBSExecTime_;
      }

      public static final int FETCH_TIME_FIELD_NUMBER = 18;
      private double fetchTime_;
      /**
       * <pre>
       *&#47; time spend for fetching the result set of the SQL statement after execution;
       * / this is an elapsed time measured in seconds (with fractions)
       * </pre>
       *
       * <code>optional double fetch_time = 18;</code>
       * @return Whether the fetchTime field is set.
       */
      public boolean hasFetchTime() {
        return ((bitField0_ & 0x00020000) != 0);
      }
      /**
       * <pre>
       *&#47; time spend for fetching the result set of the SQL statement after execution;
       * / this is an elapsed time measured in seconds (with fractions)
       * </pre>
       *
       * <code>optional double fetch_time = 18;</code>
       * @return The fetchTime.
       */
      public double getFetchTime() {
        return fetchTime_;
      }

      public static final int TOTALELAPSEDTIME_FIELD_NUMBER = 19;
      private double totalElapsedTime_;
      /**
       * <pre>
       *&#47; time spend between &#64;c system_entry_time and &#64;c system_finish_time;
       * / this is an elapsed time measured in seconds (with fractions)
       * </pre>
       *
       * <code>optional double totalElapsedTime = 19;</code>
       * @return Whether the totalElapsedTime field is set.
       */
      public boolean hasTotalElapsedTime() {
        return ((bitField0_ & 0x00040000) != 0);
      }
      /**
       * <pre>
       *&#47; time spend between &#64;c system_entry_time and &#64;c system_finish_time;
       * / this is an elapsed time measured in seconds (with fractions)
       * </pre>
       *
       * <code>optional double totalElapsedTime = 19;</code>
       * @return The totalElapsedTime.
       */
      public double getTotalElapsedTime() {
        return totalElapsedTime_;
      }

      public static final int POSTPROCESSINGTIME_FIELD_NUMBER = 20;
      private double postProcessingTime_;
      /**
       * <pre>
       *&#47; time spend for post-processing activities;
       * / this is an elapsed time measured in seconds (with fractions)
       * </pre>
       *
       * <code>optional double postProcessingTime = 20;</code>
       * @return Whether the postProcessingTime field is set.
       */
      public boolean hasPostProcessingTime() {
        return ((bitField0_ & 0x00080000) != 0);
      }
      /**
       * <pre>
       *&#47; time spend for post-processing activities;
       * / this is an elapsed time measured in seconds (with fractions)
       * </pre>
       *
       * <code>optional double postProcessingTime = 20;</code>
       * @return The postProcessingTime.
       */
      public double getPostProcessingTime() {
        return postProcessingTime_;
      }

      public static final int CACHED_PARSED_CLIENT_REFERENCE_TIMESTAMP_FIELD_NUMBER = 21;
      private long cachedParsedClientReferenceTimestamp_;
      /**
       * <pre>
       **
       * The value of the special register value stored in field &#64;c client_reference_timestamp)
       * is parsed into the internal representation and stored here. The value is a
       * time from the wall clock that measures the number of seconds from
       * 1970-01-01 00:00:00.
       * Note that this is _not_ like all the other timers. The purpose of this field
       * is very much unclear as well. But we cannot remove it to keep things
       * backward-compatible.
       * </pre>
       *
       * <code>optional uint64 cached_parsed_client_reference_timestamp = 21;</code>
       * @return Whether the cachedParsedClientReferenceTimestamp field is set.
       */
      public boolean hasCachedParsedClientReferenceTimestamp() {
        return ((bitField0_ & 0x00100000) != 0);
      }
      /**
       * <pre>
       **
       * The value of the special register value stored in field &#64;c client_reference_timestamp)
       * is parsed into the internal representation and stored here. The value is a
       * time from the wall clock that measures the number of seconds from
       * 1970-01-01 00:00:00.
       * Note that this is _not_ like all the other timers. The purpose of this field
       * is very much unclear as well. But we cannot remove it to keep things
       * backward-compatible.
       * </pre>
       *
       * <code>optional uint64 cached_parsed_client_reference_timestamp = 21;</code>
       * @return The cachedParsedClientReferenceTimestamp.
       */
      public long getCachedParsedClientReferenceTimestamp() {
        return cachedParsedClientReferenceTimestamp_;
      }

      public static final int TOTAL_CONTINUE_QUERY_WAIT_TIME_FIELD_NUMBER = 22;
      private long totalContinueQueryWaitTime_;
      /**
       * <pre>
       **
       * The client sends CNTQRY (Continue Query) DRDA messages when fetching the result
       * set from the accelerator. Each such message is responded to with another chunk
       * of data in QRYDTA (Query Data) messages. The wait times between sending those
       * QRYDTA messages and receiving the next CNTQRY messages are tracked in the
       * following fields. The fields are updated and recalculated for each CNTQRY message.
       * </pre>
       *
       * <code>optional int64 total_continue_query_wait_time = 22;</code>
       * @return Whether the totalContinueQueryWaitTime field is set.
       */
      public boolean hasTotalContinueQueryWaitTime() {
        return ((bitField0_ & 0x00200000) != 0);
      }
      /**
       * <pre>
       **
       * The client sends CNTQRY (Continue Query) DRDA messages when fetching the result
       * set from the accelerator. Each such message is responded to with another chunk
       * of data in QRYDTA (Query Data) messages. The wait times between sending those
       * QRYDTA messages and receiving the next CNTQRY messages are tracked in the
       * following fields. The fields are updated and recalculated for each CNTQRY message.
       * </pre>
       *
       * <code>optional int64 total_continue_query_wait_time = 22;</code>
       * @return The totalContinueQueryWaitTime.
       */
      public long getTotalContinueQueryWaitTime() {
        return totalContinueQueryWaitTime_;
      }

      public static final int AVERAGE_CONTINUE_QUERY_WAIT_TIME_FIELD_NUMBER = 23;
      private long averageContinueQueryWaitTime_;
      /**
       * <code>optional int64 average_continue_query_wait_time = 23;</code>
       * @return Whether the averageContinueQueryWaitTime field is set.
       */
      public boolean hasAverageContinueQueryWaitTime() {
        return ((bitField0_ & 0x00400000) != 0);
      }
      /**
       * <code>optional int64 average_continue_query_wait_time = 23;</code>
       * @return The averageContinueQueryWaitTime.
       */
      public long getAverageContinueQueryWaitTime() {
        return averageContinueQueryWaitTime_;
      }

      public static final int SMALLEST_CONTINUE_QUERY_WAIT_TIME_FIELD_NUMBER = 24;
      private long smallestContinueQueryWaitTime_;
      /**
       * <code>optional int64 smallest_continue_query_wait_time = 24;</code>
       * @return Whether the smallestContinueQueryWaitTime field is set.
       */
      public boolean hasSmallestContinueQueryWaitTime() {
        return ((bitField0_ & 0x00800000) != 0);
      }
      /**
       * <code>optional int64 smallest_continue_query_wait_time = 24;</code>
       * @return The smallestContinueQueryWaitTime.
       */
      public long getSmallestContinueQueryWaitTime() {
        return smallestContinueQueryWaitTime_;
      }

      public static final int LARGEST_CONTINUE_QUERY_WAIT_TIME_FIELD_NUMBER = 25;
      private long largestContinueQueryWaitTime_;
      /**
       * <code>optional int64 largest_continue_query_wait_time = 25;</code>
       * @return Whether the largestContinueQueryWaitTime field is set.
       */
      public boolean hasLargestContinueQueryWaitTime() {
        return ((bitField0_ & 0x01000000) != 0);
      }
      /**
       * <code>optional int64 largest_continue_query_wait_time = 25;</code>
       * @return The largestContinueQueryWaitTime.
       */
      public long getLargestContinueQueryWaitTime() {
        return largestContinueQueryWaitTime_;
      }

      public static final int NUM_CONTINUE_QUERY_WAIT_TIMES_FIELD_NUMBER = 26;
      private long numContinueQueryWaitTimes_;
      /**
       * <code>optional int64 num_continue_query_wait_times = 26;</code>
       * @return Whether the numContinueQueryWaitTimes field is set.
       */
      public boolean hasNumContinueQueryWaitTimes() {
        return ((bitField0_ & 0x02000000) != 0);
      }
      /**
       * <code>optional int64 num_continue_query_wait_times = 26;</code>
       * @return The numContinueQueryWaitTimes.
       */
      public long getNumContinueQueryWaitTimes() {
        return numContinueQueryWaitTimes_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, realWorldEntryTimestamp_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeUInt64(2, realWorldEntryTime_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeUInt64(3, systemEntryTime_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          output.writeUInt64(4, prepareStartTime_);
        }
        if (((bitField0_ & 0x00000010) != 0)) {
          output.writeUInt64(5, prepareFinishTime_);
        }
        if (((bitField0_ & 0x00000020) != 0)) {
          output.writeUInt64(6, backendExecutionStartTime_);
        }
        if (((bitField0_ & 0x00000040) != 0)) {
          output.writeUInt64(7, backendFirstRowFetchTime_);
        }
        if (((bitField0_ & 0x00000080) != 0)) {
          output.writeUInt64(8, backendExecutionFinishTime_);
        }
        if (((bitField0_ & 0x00000100) != 0)) {
          output.writeUInt64(9, clientLastRowFetchTime_);
        }
        if (((bitField0_ & 0x00000200) != 0)) {
          output.writeUInt64(10, systemFinishTime_);
        }
        if (((bitField0_ & 0x00000400) != 0)) {
          output.writeUInt64(11, postProcessingExitTime_);
        }
        if (((bitField0_ & 0x00000800) != 0)) {
          output.writeUInt64(12, dwaCpuTime_);
        }
        if (((bitField0_ & 0x00001000) != 0)) {
          output.writeUInt64(13, backendCpuTime_);
        }
        if (((bitField0_ & 0x00002000) != 0)) {
          output.writeUInt64(14, backendWaitTime_);
        }
        if (((bitField0_ & 0x00004000) != 0)) {
          output.writeUInt64(15, backendAccountingCollectionTime_);
        }
        if (((bitField0_ & 0x00008000) != 0)) {
          output.writeDouble(16, prepareTime_);
        }
        if (((bitField0_ & 0x00010000) != 0)) {
          output.writeDouble(17, backendDBSExecTime_);
        }
        if (((bitField0_ & 0x00020000) != 0)) {
          output.writeDouble(18, fetchTime_);
        }
        if (((bitField0_ & 0x00040000) != 0)) {
          output.writeDouble(19, totalElapsedTime_);
        }
        if (((bitField0_ & 0x00080000) != 0)) {
          output.writeDouble(20, postProcessingTime_);
        }
        if (((bitField0_ & 0x00100000) != 0)) {
          output.writeUInt64(21, cachedParsedClientReferenceTimestamp_);
        }
        if (((bitField0_ & 0x00200000) != 0)) {
          output.writeInt64(22, totalContinueQueryWaitTime_);
        }
        if (((bitField0_ & 0x00400000) != 0)) {
          output.writeInt64(23, averageContinueQueryWaitTime_);
        }
        if (((bitField0_ & 0x00800000) != 0)) {
          output.writeInt64(24, smallestContinueQueryWaitTime_);
        }
        if (((bitField0_ & 0x01000000) != 0)) {
          output.writeInt64(25, largestContinueQueryWaitTime_);
        }
        if (((bitField0_ & 0x02000000) != 0)) {
          output.writeInt64(26, numContinueQueryWaitTimes_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, realWorldEntryTimestamp_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(2, realWorldEntryTime_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(3, systemEntryTime_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(4, prepareStartTime_);
        }
        if (((bitField0_ & 0x00000010) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(5, prepareFinishTime_);
        }
        if (((bitField0_ & 0x00000020) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(6, backendExecutionStartTime_);
        }
        if (((bitField0_ & 0x00000040) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(7, backendFirstRowFetchTime_);
        }
        if (((bitField0_ & 0x00000080) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(8, backendExecutionFinishTime_);
        }
        if (((bitField0_ & 0x00000100) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(9, clientLastRowFetchTime_);
        }
        if (((bitField0_ & 0x00000200) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(10, systemFinishTime_);
        }
        if (((bitField0_ & 0x00000400) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(11, postProcessingExitTime_);
        }
        if (((bitField0_ & 0x00000800) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(12, dwaCpuTime_);
        }
        if (((bitField0_ & 0x00001000) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(13, backendCpuTime_);
        }
        if (((bitField0_ & 0x00002000) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(14, backendWaitTime_);
        }
        if (((bitField0_ & 0x00004000) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(15, backendAccountingCollectionTime_);
        }
        if (((bitField0_ & 0x00008000) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(16, prepareTime_);
        }
        if (((bitField0_ & 0x00010000) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(17, backendDBSExecTime_);
        }
        if (((bitField0_ & 0x00020000) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(18, fetchTime_);
        }
        if (((bitField0_ & 0x00040000) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(19, totalElapsedTime_);
        }
        if (((bitField0_ & 0x00080000) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(20, postProcessingTime_);
        }
        if (((bitField0_ & 0x00100000) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(21, cachedParsedClientReferenceTimestamp_);
        }
        if (((bitField0_ & 0x00200000) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(22, totalContinueQueryWaitTime_);
        }
        if (((bitField0_ & 0x00400000) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(23, averageContinueQueryWaitTime_);
        }
        if (((bitField0_ & 0x00800000) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(24, smallestContinueQueryWaitTime_);
        }
        if (((bitField0_ & 0x01000000) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(25, largestContinueQueryWaitTime_);
        }
        if (((bitField0_ & 0x02000000) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(26, numContinueQueryWaitTimes_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof SQLStatementDetails.SQLStatementDetailsData.Timings)) {
          return super.equals(obj);
        }
        SQLStatementDetails.SQLStatementDetailsData.Timings other = (SQLStatementDetails.SQLStatementDetailsData.Timings) obj;

        if (hasRealWorldEntryTimestamp() != other.hasRealWorldEntryTimestamp()) return false;
        if (hasRealWorldEntryTimestamp()) {
          if (!getRealWorldEntryTimestamp()
              .equals(other.getRealWorldEntryTimestamp())) return false;
        }
        if (hasRealWorldEntryTime() != other.hasRealWorldEntryTime()) return false;
        if (hasRealWorldEntryTime()) {
          if (getRealWorldEntryTime()
              != other.getRealWorldEntryTime()) return false;
        }
        if (hasSystemEntryTime() != other.hasSystemEntryTime()) return false;
        if (hasSystemEntryTime()) {
          if (getSystemEntryTime()
              != other.getSystemEntryTime()) return false;
        }
        if (hasPrepareStartTime() != other.hasPrepareStartTime()) return false;
        if (hasPrepareStartTime()) {
          if (getPrepareStartTime()
              != other.getPrepareStartTime()) return false;
        }
        if (hasPrepareFinishTime() != other.hasPrepareFinishTime()) return false;
        if (hasPrepareFinishTime()) {
          if (getPrepareFinishTime()
              != other.getPrepareFinishTime()) return false;
        }
        if (hasBackendExecutionStartTime() != other.hasBackendExecutionStartTime()) return false;
        if (hasBackendExecutionStartTime()) {
          if (getBackendExecutionStartTime()
              != other.getBackendExecutionStartTime()) return false;
        }
        if (hasBackendFirstRowFetchTime() != other.hasBackendFirstRowFetchTime()) return false;
        if (hasBackendFirstRowFetchTime()) {
          if (getBackendFirstRowFetchTime()
              != other.getBackendFirstRowFetchTime()) return false;
        }
        if (hasBackendExecutionFinishTime() != other.hasBackendExecutionFinishTime()) return false;
        if (hasBackendExecutionFinishTime()) {
          if (getBackendExecutionFinishTime()
              != other.getBackendExecutionFinishTime()) return false;
        }
        if (hasClientLastRowFetchTime() != other.hasClientLastRowFetchTime()) return false;
        if (hasClientLastRowFetchTime()) {
          if (getClientLastRowFetchTime()
              != other.getClientLastRowFetchTime()) return false;
        }
        if (hasSystemFinishTime() != other.hasSystemFinishTime()) return false;
        if (hasSystemFinishTime()) {
          if (getSystemFinishTime()
              != other.getSystemFinishTime()) return false;
        }
        if (hasPostProcessingExitTime() != other.hasPostProcessingExitTime()) return false;
        if (hasPostProcessingExitTime()) {
          if (getPostProcessingExitTime()
              != other.getPostProcessingExitTime()) return false;
        }
        if (hasDwaCpuTime() != other.hasDwaCpuTime()) return false;
        if (hasDwaCpuTime()) {
          if (getDwaCpuTime()
              != other.getDwaCpuTime()) return false;
        }
        if (hasBackendCpuTime() != other.hasBackendCpuTime()) return false;
        if (hasBackendCpuTime()) {
          if (getBackendCpuTime()
              != other.getBackendCpuTime()) return false;
        }
        if (hasBackendWaitTime() != other.hasBackendWaitTime()) return false;
        if (hasBackendWaitTime()) {
          if (getBackendWaitTime()
              != other.getBackendWaitTime()) return false;
        }
        if (hasBackendAccountingCollectionTime() != other.hasBackendAccountingCollectionTime()) return false;
        if (hasBackendAccountingCollectionTime()) {
          if (getBackendAccountingCollectionTime()
              != other.getBackendAccountingCollectionTime()) return false;
        }
        if (hasPrepareTime() != other.hasPrepareTime()) return false;
        if (hasPrepareTime()) {
          if (java.lang.Double.doubleToLongBits(getPrepareTime())
              != java.lang.Double.doubleToLongBits(
                  other.getPrepareTime())) return false;
        }
        if (hasBackendDBSExecTime() != other.hasBackendDBSExecTime()) return false;
        if (hasBackendDBSExecTime()) {
          if (java.lang.Double.doubleToLongBits(getBackendDBSExecTime())
              != java.lang.Double.doubleToLongBits(
                  other.getBackendDBSExecTime())) return false;
        }
        if (hasFetchTime() != other.hasFetchTime()) return false;
        if (hasFetchTime()) {
          if (java.lang.Double.doubleToLongBits(getFetchTime())
              != java.lang.Double.doubleToLongBits(
                  other.getFetchTime())) return false;
        }
        if (hasTotalElapsedTime() != other.hasTotalElapsedTime()) return false;
        if (hasTotalElapsedTime()) {
          if (java.lang.Double.doubleToLongBits(getTotalElapsedTime())
              != java.lang.Double.doubleToLongBits(
                  other.getTotalElapsedTime())) return false;
        }
        if (hasPostProcessingTime() != other.hasPostProcessingTime()) return false;
        if (hasPostProcessingTime()) {
          if (java.lang.Double.doubleToLongBits(getPostProcessingTime())
              != java.lang.Double.doubleToLongBits(
                  other.getPostProcessingTime())) return false;
        }
        if (hasCachedParsedClientReferenceTimestamp() != other.hasCachedParsedClientReferenceTimestamp()) return false;
        if (hasCachedParsedClientReferenceTimestamp()) {
          if (getCachedParsedClientReferenceTimestamp()
              != other.getCachedParsedClientReferenceTimestamp()) return false;
        }
        if (hasTotalContinueQueryWaitTime() != other.hasTotalContinueQueryWaitTime()) return false;
        if (hasTotalContinueQueryWaitTime()) {
          if (getTotalContinueQueryWaitTime()
              != other.getTotalContinueQueryWaitTime()) return false;
        }
        if (hasAverageContinueQueryWaitTime() != other.hasAverageContinueQueryWaitTime()) return false;
        if (hasAverageContinueQueryWaitTime()) {
          if (getAverageContinueQueryWaitTime()
              != other.getAverageContinueQueryWaitTime()) return false;
        }
        if (hasSmallestContinueQueryWaitTime() != other.hasSmallestContinueQueryWaitTime()) return false;
        if (hasSmallestContinueQueryWaitTime()) {
          if (getSmallestContinueQueryWaitTime()
              != other.getSmallestContinueQueryWaitTime()) return false;
        }
        if (hasLargestContinueQueryWaitTime() != other.hasLargestContinueQueryWaitTime()) return false;
        if (hasLargestContinueQueryWaitTime()) {
          if (getLargestContinueQueryWaitTime()
              != other.getLargestContinueQueryWaitTime()) return false;
        }
        if (hasNumContinueQueryWaitTimes() != other.hasNumContinueQueryWaitTimes()) return false;
        if (hasNumContinueQueryWaitTimes()) {
          if (getNumContinueQueryWaitTimes()
              != other.getNumContinueQueryWaitTimes()) return false;
        }
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasRealWorldEntryTimestamp()) {
          hash = (37 * hash) + REAL_WORLD_ENTRY_TIMESTAMP_FIELD_NUMBER;
          hash = (53 * hash) + getRealWorldEntryTimestamp().hashCode();
        }
        if (hasRealWorldEntryTime()) {
          hash = (37 * hash) + REAL_WORLD_ENTRY_TIME_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getRealWorldEntryTime());
        }
        if (hasSystemEntryTime()) {
          hash = (37 * hash) + SYSTEM_ENTRY_TIME_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getSystemEntryTime());
        }
        if (hasPrepareStartTime()) {
          hash = (37 * hash) + PREPARE_START_TIME_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getPrepareStartTime());
        }
        if (hasPrepareFinishTime()) {
          hash = (37 * hash) + PREPARE_FINISH_TIME_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getPrepareFinishTime());
        }
        if (hasBackendExecutionStartTime()) {
          hash = (37 * hash) + BACKEND_EXECUTION_START_TIME_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getBackendExecutionStartTime());
        }
        if (hasBackendFirstRowFetchTime()) {
          hash = (37 * hash) + BACKEND_FIRST_ROW_FETCH_TIME_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getBackendFirstRowFetchTime());
        }
        if (hasBackendExecutionFinishTime()) {
          hash = (37 * hash) + BACKEND_EXECUTION_FINISH_TIME_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getBackendExecutionFinishTime());
        }
        if (hasClientLastRowFetchTime()) {
          hash = (37 * hash) + CLIENT_LAST_ROW_FETCH_TIME_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getClientLastRowFetchTime());
        }
        if (hasSystemFinishTime()) {
          hash = (37 * hash) + SYSTEM_FINISH_TIME_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getSystemFinishTime());
        }
        if (hasPostProcessingExitTime()) {
          hash = (37 * hash) + POST_PROCESSING_EXIT_TIME_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getPostProcessingExitTime());
        }
        if (hasDwaCpuTime()) {
          hash = (37 * hash) + DWA_CPU_TIME_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getDwaCpuTime());
        }
        if (hasBackendCpuTime()) {
          hash = (37 * hash) + BACKEND_CPU_TIME_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getBackendCpuTime());
        }
        if (hasBackendWaitTime()) {
          hash = (37 * hash) + BACKEND_WAIT_TIME_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getBackendWaitTime());
        }
        if (hasBackendAccountingCollectionTime()) {
          hash = (37 * hash) + BACKEND_ACCOUNTING_COLLECTION_TIME_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getBackendAccountingCollectionTime());
        }
        if (hasPrepareTime()) {
          hash = (37 * hash) + PREPARE_TIME_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              java.lang.Double.doubleToLongBits(getPrepareTime()));
        }
        if (hasBackendDBSExecTime()) {
          hash = (37 * hash) + BACKENDDBSEXECTIME_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              java.lang.Double.doubleToLongBits(getBackendDBSExecTime()));
        }
        if (hasFetchTime()) {
          hash = (37 * hash) + FETCH_TIME_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              java.lang.Double.doubleToLongBits(getFetchTime()));
        }
        if (hasTotalElapsedTime()) {
          hash = (37 * hash) + TOTALELAPSEDTIME_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              java.lang.Double.doubleToLongBits(getTotalElapsedTime()));
        }
        if (hasPostProcessingTime()) {
          hash = (37 * hash) + POSTPROCESSINGTIME_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              java.lang.Double.doubleToLongBits(getPostProcessingTime()));
        }
        if (hasCachedParsedClientReferenceTimestamp()) {
          hash = (37 * hash) + CACHED_PARSED_CLIENT_REFERENCE_TIMESTAMP_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getCachedParsedClientReferenceTimestamp());
        }
        if (hasTotalContinueQueryWaitTime()) {
          hash = (37 * hash) + TOTAL_CONTINUE_QUERY_WAIT_TIME_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getTotalContinueQueryWaitTime());
        }
        if (hasAverageContinueQueryWaitTime()) {
          hash = (37 * hash) + AVERAGE_CONTINUE_QUERY_WAIT_TIME_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getAverageContinueQueryWaitTime());
        }
        if (hasSmallestContinueQueryWaitTime()) {
          hash = (37 * hash) + SMALLEST_CONTINUE_QUERY_WAIT_TIME_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getSmallestContinueQueryWaitTime());
        }
        if (hasLargestContinueQueryWaitTime()) {
          hash = (37 * hash) + LARGEST_CONTINUE_QUERY_WAIT_TIME_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getLargestContinueQueryWaitTime());
        }
        if (hasNumContinueQueryWaitTimes()) {
          hash = (37 * hash) + NUM_CONTINUE_QUERY_WAIT_TIMES_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getNumContinueQueryWaitTimes());
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static SQLStatementDetails.SQLStatementDetailsData.Timings parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.Timings parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.Timings parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.Timings parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.Timings parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.Timings parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.Timings parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.Timings parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.Timings parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.Timings parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.Timings parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.Timings parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(SQLStatementDetails.SQLStatementDetailsData.Timings prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       **
       * All times that are based on the system clock. The system clock counts the number
       * of micro-seconds since the last boot of the operating system. That clock is stable
       * insofar as it will not jump forward or backwards (as other clocks may do in case
       * time adjustments are necessary).
       * In order to map values from the system clock to the corresponding wall clock time,
       * calculate the delta to field &#64;c system_entry_time, and add that delta to field
       * &#64;c real_world_entry_timestamp.
       * </pre>
       *
       * Protobuf type {@code SQLStatementDetailsData.Timings}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:SQLStatementDetailsData.Timings)
          SQLStatementDetails.SQLStatementDetailsData.TimingsOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return SQLStatementDetails.internal_static_SQLStatementDetailsData_Timings_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return SQLStatementDetails.internal_static_SQLStatementDetailsData_Timings_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  SQLStatementDetails.SQLStatementDetailsData.Timings.class, SQLStatementDetails.SQLStatementDetailsData.Timings.Builder.class);
        }

        // Construct using SQLStatementDetails.SQLStatementDetailsData.Timings.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          realWorldEntryTimestamp_ = "";
          bitField0_ = (bitField0_ & ~0x00000001);
          realWorldEntryTime_ = 0L;
          bitField0_ = (bitField0_ & ~0x00000002);
          systemEntryTime_ = 0L;
          bitField0_ = (bitField0_ & ~0x00000004);
          prepareStartTime_ = 0L;
          bitField0_ = (bitField0_ & ~0x00000008);
          prepareFinishTime_ = 0L;
          bitField0_ = (bitField0_ & ~0x00000010);
          backendExecutionStartTime_ = 0L;
          bitField0_ = (bitField0_ & ~0x00000020);
          backendFirstRowFetchTime_ = 0L;
          bitField0_ = (bitField0_ & ~0x00000040);
          backendExecutionFinishTime_ = 0L;
          bitField0_ = (bitField0_ & ~0x00000080);
          clientLastRowFetchTime_ = 0L;
          bitField0_ = (bitField0_ & ~0x00000100);
          systemFinishTime_ = 0L;
          bitField0_ = (bitField0_ & ~0x00000200);
          postProcessingExitTime_ = 0L;
          bitField0_ = (bitField0_ & ~0x00000400);
          dwaCpuTime_ = 0L;
          bitField0_ = (bitField0_ & ~0x00000800);
          backendCpuTime_ = 0L;
          bitField0_ = (bitField0_ & ~0x00001000);
          backendWaitTime_ = 0L;
          bitField0_ = (bitField0_ & ~0x00002000);
          backendAccountingCollectionTime_ = 0L;
          bitField0_ = (bitField0_ & ~0x00004000);
          prepareTime_ = 0D;
          bitField0_ = (bitField0_ & ~0x00008000);
          backendDBSExecTime_ = 0D;
          bitField0_ = (bitField0_ & ~0x00010000);
          fetchTime_ = 0D;
          bitField0_ = (bitField0_ & ~0x00020000);
          totalElapsedTime_ = 0D;
          bitField0_ = (bitField0_ & ~0x00040000);
          postProcessingTime_ = 0D;
          bitField0_ = (bitField0_ & ~0x00080000);
          cachedParsedClientReferenceTimestamp_ = 0L;
          bitField0_ = (bitField0_ & ~0x00100000);
          totalContinueQueryWaitTime_ = 0L;
          bitField0_ = (bitField0_ & ~0x00200000);
          averageContinueQueryWaitTime_ = 0L;
          bitField0_ = (bitField0_ & ~0x00400000);
          smallestContinueQueryWaitTime_ = 0L;
          bitField0_ = (bitField0_ & ~0x00800000);
          largestContinueQueryWaitTime_ = 0L;
          bitField0_ = (bitField0_ & ~0x01000000);
          numContinueQueryWaitTimes_ = 0L;
          bitField0_ = (bitField0_ & ~0x02000000);
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return SQLStatementDetails.internal_static_SQLStatementDetailsData_Timings_descriptor;
        }

        @java.lang.Override
        public SQLStatementDetails.SQLStatementDetailsData.Timings getDefaultInstanceForType() {
          return SQLStatementDetails.SQLStatementDetailsData.Timings.getDefaultInstance();
        }

        @java.lang.Override
        public SQLStatementDetails.SQLStatementDetailsData.Timings build() {
          SQLStatementDetails.SQLStatementDetailsData.Timings result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public SQLStatementDetails.SQLStatementDetailsData.Timings buildPartial() {
          SQLStatementDetails.SQLStatementDetailsData.Timings result = new SQLStatementDetails.SQLStatementDetailsData.Timings(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            to_bitField0_ |= 0x00000001;
          }
          result.realWorldEntryTimestamp_ = realWorldEntryTimestamp_;
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.realWorldEntryTime_ = realWorldEntryTime_;
            to_bitField0_ |= 0x00000002;
          }
          if (((from_bitField0_ & 0x00000004) != 0)) {
            result.systemEntryTime_ = systemEntryTime_;
            to_bitField0_ |= 0x00000004;
          }
          if (((from_bitField0_ & 0x00000008) != 0)) {
            result.prepareStartTime_ = prepareStartTime_;
            to_bitField0_ |= 0x00000008;
          }
          if (((from_bitField0_ & 0x00000010) != 0)) {
            result.prepareFinishTime_ = prepareFinishTime_;
            to_bitField0_ |= 0x00000010;
          }
          if (((from_bitField0_ & 0x00000020) != 0)) {
            result.backendExecutionStartTime_ = backendExecutionStartTime_;
            to_bitField0_ |= 0x00000020;
          }
          if (((from_bitField0_ & 0x00000040) != 0)) {
            result.backendFirstRowFetchTime_ = backendFirstRowFetchTime_;
            to_bitField0_ |= 0x00000040;
          }
          if (((from_bitField0_ & 0x00000080) != 0)) {
            result.backendExecutionFinishTime_ = backendExecutionFinishTime_;
            to_bitField0_ |= 0x00000080;
          }
          if (((from_bitField0_ & 0x00000100) != 0)) {
            result.clientLastRowFetchTime_ = clientLastRowFetchTime_;
            to_bitField0_ |= 0x00000100;
          }
          if (((from_bitField0_ & 0x00000200) != 0)) {
            result.systemFinishTime_ = systemFinishTime_;
            to_bitField0_ |= 0x00000200;
          }
          if (((from_bitField0_ & 0x00000400) != 0)) {
            result.postProcessingExitTime_ = postProcessingExitTime_;
            to_bitField0_ |= 0x00000400;
          }
          if (((from_bitField0_ & 0x00000800) != 0)) {
            result.dwaCpuTime_ = dwaCpuTime_;
            to_bitField0_ |= 0x00000800;
          }
          if (((from_bitField0_ & 0x00001000) != 0)) {
            result.backendCpuTime_ = backendCpuTime_;
            to_bitField0_ |= 0x00001000;
          }
          if (((from_bitField0_ & 0x00002000) != 0)) {
            result.backendWaitTime_ = backendWaitTime_;
            to_bitField0_ |= 0x00002000;
          }
          if (((from_bitField0_ & 0x00004000) != 0)) {
            result.backendAccountingCollectionTime_ = backendAccountingCollectionTime_;
            to_bitField0_ |= 0x00004000;
          }
          if (((from_bitField0_ & 0x00008000) != 0)) {
            result.prepareTime_ = prepareTime_;
            to_bitField0_ |= 0x00008000;
          }
          if (((from_bitField0_ & 0x00010000) != 0)) {
            result.backendDBSExecTime_ = backendDBSExecTime_;
            to_bitField0_ |= 0x00010000;
          }
          if (((from_bitField0_ & 0x00020000) != 0)) {
            result.fetchTime_ = fetchTime_;
            to_bitField0_ |= 0x00020000;
          }
          if (((from_bitField0_ & 0x00040000) != 0)) {
            result.totalElapsedTime_ = totalElapsedTime_;
            to_bitField0_ |= 0x00040000;
          }
          if (((from_bitField0_ & 0x00080000) != 0)) {
            result.postProcessingTime_ = postProcessingTime_;
            to_bitField0_ |= 0x00080000;
          }
          if (((from_bitField0_ & 0x00100000) != 0)) {
            result.cachedParsedClientReferenceTimestamp_ = cachedParsedClientReferenceTimestamp_;
            to_bitField0_ |= 0x00100000;
          }
          if (((from_bitField0_ & 0x00200000) != 0)) {
            result.totalContinueQueryWaitTime_ = totalContinueQueryWaitTime_;
            to_bitField0_ |= 0x00200000;
          }
          if (((from_bitField0_ & 0x00400000) != 0)) {
            result.averageContinueQueryWaitTime_ = averageContinueQueryWaitTime_;
            to_bitField0_ |= 0x00400000;
          }
          if (((from_bitField0_ & 0x00800000) != 0)) {
            result.smallestContinueQueryWaitTime_ = smallestContinueQueryWaitTime_;
            to_bitField0_ |= 0x00800000;
          }
          if (((from_bitField0_ & 0x01000000) != 0)) {
            result.largestContinueQueryWaitTime_ = largestContinueQueryWaitTime_;
            to_bitField0_ |= 0x01000000;
          }
          if (((from_bitField0_ & 0x02000000) != 0)) {
            result.numContinueQueryWaitTimes_ = numContinueQueryWaitTimes_;
            to_bitField0_ |= 0x02000000;
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof SQLStatementDetails.SQLStatementDetailsData.Timings) {
            return mergeFrom((SQLStatementDetails.SQLStatementDetailsData.Timings)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(SQLStatementDetails.SQLStatementDetailsData.Timings other) {
          if (other == SQLStatementDetails.SQLStatementDetailsData.Timings.getDefaultInstance()) return this;
          if (other.hasRealWorldEntryTimestamp()) {
            bitField0_ |= 0x00000001;
            realWorldEntryTimestamp_ = other.realWorldEntryTimestamp_;
            onChanged();
          }
          if (other.hasRealWorldEntryTime()) {
            setRealWorldEntryTime(other.getRealWorldEntryTime());
          }
          if (other.hasSystemEntryTime()) {
            setSystemEntryTime(other.getSystemEntryTime());
          }
          if (other.hasPrepareStartTime()) {
            setPrepareStartTime(other.getPrepareStartTime());
          }
          if (other.hasPrepareFinishTime()) {
            setPrepareFinishTime(other.getPrepareFinishTime());
          }
          if (other.hasBackendExecutionStartTime()) {
            setBackendExecutionStartTime(other.getBackendExecutionStartTime());
          }
          if (other.hasBackendFirstRowFetchTime()) {
            setBackendFirstRowFetchTime(other.getBackendFirstRowFetchTime());
          }
          if (other.hasBackendExecutionFinishTime()) {
            setBackendExecutionFinishTime(other.getBackendExecutionFinishTime());
          }
          if (other.hasClientLastRowFetchTime()) {
            setClientLastRowFetchTime(other.getClientLastRowFetchTime());
          }
          if (other.hasSystemFinishTime()) {
            setSystemFinishTime(other.getSystemFinishTime());
          }
          if (other.hasPostProcessingExitTime()) {
            setPostProcessingExitTime(other.getPostProcessingExitTime());
          }
          if (other.hasDwaCpuTime()) {
            setDwaCpuTime(other.getDwaCpuTime());
          }
          if (other.hasBackendCpuTime()) {
            setBackendCpuTime(other.getBackendCpuTime());
          }
          if (other.hasBackendWaitTime()) {
            setBackendWaitTime(other.getBackendWaitTime());
          }
          if (other.hasBackendAccountingCollectionTime()) {
            setBackendAccountingCollectionTime(other.getBackendAccountingCollectionTime());
          }
          if (other.hasPrepareTime()) {
            setPrepareTime(other.getPrepareTime());
          }
          if (other.hasBackendDBSExecTime()) {
            setBackendDBSExecTime(other.getBackendDBSExecTime());
          }
          if (other.hasFetchTime()) {
            setFetchTime(other.getFetchTime());
          }
          if (other.hasTotalElapsedTime()) {
            setTotalElapsedTime(other.getTotalElapsedTime());
          }
          if (other.hasPostProcessingTime()) {
            setPostProcessingTime(other.getPostProcessingTime());
          }
          if (other.hasCachedParsedClientReferenceTimestamp()) {
            setCachedParsedClientReferenceTimestamp(other.getCachedParsedClientReferenceTimestamp());
          }
          if (other.hasTotalContinueQueryWaitTime()) {
            setTotalContinueQueryWaitTime(other.getTotalContinueQueryWaitTime());
          }
          if (other.hasAverageContinueQueryWaitTime()) {
            setAverageContinueQueryWaitTime(other.getAverageContinueQueryWaitTime());
          }
          if (other.hasSmallestContinueQueryWaitTime()) {
            setSmallestContinueQueryWaitTime(other.getSmallestContinueQueryWaitTime());
          }
          if (other.hasLargestContinueQueryWaitTime()) {
            setLargestContinueQueryWaitTime(other.getLargestContinueQueryWaitTime());
          }
          if (other.hasNumContinueQueryWaitTimes()) {
            setNumContinueQueryWaitTimes(other.getNumContinueQueryWaitTimes());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          SQLStatementDetails.SQLStatementDetailsData.Timings parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (SQLStatementDetails.SQLStatementDetailsData.Timings) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private java.lang.Object realWorldEntryTimestamp_ = "";
        /**
         * <pre>
         **
         * Time from the wall clock when the SQL statement entered the system. This
         * timestamp is in UTC timezone.
         * </pre>
         *
         * <code>optional string real_world_entry_timestamp = 1;</code>
         * @return Whether the realWorldEntryTimestamp field is set.
         */
        public boolean hasRealWorldEntryTimestamp() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         **
         * Time from the wall clock when the SQL statement entered the system. This
         * timestamp is in UTC timezone.
         * </pre>
         *
         * <code>optional string real_world_entry_timestamp = 1;</code>
         * @return The realWorldEntryTimestamp.
         */
        public java.lang.String getRealWorldEntryTimestamp() {
          java.lang.Object ref = realWorldEntryTimestamp_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              realWorldEntryTimestamp_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         **
         * Time from the wall clock when the SQL statement entered the system. This
         * timestamp is in UTC timezone.
         * </pre>
         *
         * <code>optional string real_world_entry_timestamp = 1;</code>
         * @return The bytes for realWorldEntryTimestamp.
         */
        public com.google.protobuf.ByteString
            getRealWorldEntryTimestampBytes() {
          java.lang.Object ref = realWorldEntryTimestamp_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b =
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            realWorldEntryTimestamp_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         **
         * Time from the wall clock when the SQL statement entered the system. This
         * timestamp is in UTC timezone.
         * </pre>
         *
         * <code>optional string real_world_entry_timestamp = 1;</code>
         * @param value The realWorldEntryTimestamp to set.
         * @return This builder for chaining.
         */
        public Builder setRealWorldEntryTimestamp(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          realWorldEntryTimestamp_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         **
         * Time from the wall clock when the SQL statement entered the system. This
         * timestamp is in UTC timezone.
         * </pre>
         *
         * <code>optional string real_world_entry_timestamp = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearRealWorldEntryTimestamp() {
          bitField0_ = (bitField0_ & ~0x00000001);
          realWorldEntryTimestamp_ = getDefaultInstance().getRealWorldEntryTimestamp();
          onChanged();
          return this;
        }
        /**
         * <pre>
         **
         * Time from the wall clock when the SQL statement entered the system. This
         * timestamp is in UTC timezone.
         * </pre>
         *
         * <code>optional string real_world_entry_timestamp = 1;</code>
         * @param value The bytes for realWorldEntryTimestamp to set.
         * @return This builder for chaining.
         */
        public Builder setRealWorldEntryTimestampBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          realWorldEntryTimestamp_ = value;
          onChanged();
          return this;
        }

        private long realWorldEntryTime_ ;
        /**
         * <pre>
         **
         * Time from the wall clock when the SQL statement entered the system.
         * This is number of micro-seconds since 1970-01-01 00:00:00.
         * </pre>
         *
         * <code>optional uint64 real_world_entry_time = 2;</code>
         * @return Whether the realWorldEntryTime field is set.
         */
        public boolean hasRealWorldEntryTime() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         **
         * Time from the wall clock when the SQL statement entered the system.
         * This is number of micro-seconds since 1970-01-01 00:00:00.
         * </pre>
         *
         * <code>optional uint64 real_world_entry_time = 2;</code>
         * @return The realWorldEntryTime.
         */
        public long getRealWorldEntryTime() {
          return realWorldEntryTime_;
        }
        /**
         * <pre>
         **
         * Time from the wall clock when the SQL statement entered the system.
         * This is number of micro-seconds since 1970-01-01 00:00:00.
         * </pre>
         *
         * <code>optional uint64 real_world_entry_time = 2;</code>
         * @param value The realWorldEntryTime to set.
         * @return This builder for chaining.
         */
        public Builder setRealWorldEntryTime(long value) {
          bitField0_ |= 0x00000002;
          realWorldEntryTime_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         **
         * Time from the wall clock when the SQL statement entered the system.
         * This is number of micro-seconds since 1970-01-01 00:00:00.
         * </pre>
         *
         * <code>optional uint64 real_world_entry_time = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearRealWorldEntryTime() {
          bitField0_ = (bitField0_ & ~0x00000002);
          realWorldEntryTime_ = 0L;
          onChanged();
          return this;
        }

        private long systemEntryTime_ ;
        /**
         * <pre>
         **
         * Time from the system clock when the SQL statement entered the system.
         * This time is collected together with &#64;c real_world_entry_timestamp.
         * </pre>
         *
         * <code>optional uint64 system_entry_time = 3;</code>
         * @return Whether the systemEntryTime field is set.
         */
        public boolean hasSystemEntryTime() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <pre>
         **
         * Time from the system clock when the SQL statement entered the system.
         * This time is collected together with &#64;c real_world_entry_timestamp.
         * </pre>
         *
         * <code>optional uint64 system_entry_time = 3;</code>
         * @return The systemEntryTime.
         */
        public long getSystemEntryTime() {
          return systemEntryTime_;
        }
        /**
         * <pre>
         **
         * Time from the system clock when the SQL statement entered the system.
         * This time is collected together with &#64;c real_world_entry_timestamp.
         * </pre>
         *
         * <code>optional uint64 system_entry_time = 3;</code>
         * @param value The systemEntryTime to set.
         * @return This builder for chaining.
         */
        public Builder setSystemEntryTime(long value) {
          bitField0_ |= 0x00000004;
          systemEntryTime_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         **
         * Time from the system clock when the SQL statement entered the system.
         * This time is collected together with &#64;c real_world_entry_timestamp.
         * </pre>
         *
         * <code>optional uint64 system_entry_time = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearSystemEntryTime() {
          bitField0_ = (bitField0_ & ~0x00000004);
          systemEntryTime_ = 0L;
          onChanged();
          return this;
        }

        private long prepareStartTime_ ;
        /**
         * <pre>
         *&#47; time from the system clock when the prepare of the SQL statement was started
         * </pre>
         *
         * <code>optional uint64 prepare_start_time = 4;</code>
         * @return Whether the prepareStartTime field is set.
         */
        public boolean hasPrepareStartTime() {
          return ((bitField0_ & 0x00000008) != 0);
        }
        /**
         * <pre>
         *&#47; time from the system clock when the prepare of the SQL statement was started
         * </pre>
         *
         * <code>optional uint64 prepare_start_time = 4;</code>
         * @return The prepareStartTime.
         */
        public long getPrepareStartTime() {
          return prepareStartTime_;
        }
        /**
         * <pre>
         *&#47; time from the system clock when the prepare of the SQL statement was started
         * </pre>
         *
         * <code>optional uint64 prepare_start_time = 4;</code>
         * @param value The prepareStartTime to set.
         * @return This builder for chaining.
         */
        public Builder setPrepareStartTime(long value) {
          bitField0_ |= 0x00000008;
          prepareStartTime_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *&#47; time from the system clock when the prepare of the SQL statement was started
         * </pre>
         *
         * <code>optional uint64 prepare_start_time = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearPrepareStartTime() {
          bitField0_ = (bitField0_ & ~0x00000008);
          prepareStartTime_ = 0L;
          onChanged();
          return this;
        }

        private long prepareFinishTime_ ;
        /**
         * <pre>
         *&#47; time from the system clock when the prepare of the SQL statement has finished
         * </pre>
         *
         * <code>optional uint64 prepare_finish_time = 5;</code>
         * @return Whether the prepareFinishTime field is set.
         */
        public boolean hasPrepareFinishTime() {
          return ((bitField0_ & 0x00000010) != 0);
        }
        /**
         * <pre>
         *&#47; time from the system clock when the prepare of the SQL statement has finished
         * </pre>
         *
         * <code>optional uint64 prepare_finish_time = 5;</code>
         * @return The prepareFinishTime.
         */
        public long getPrepareFinishTime() {
          return prepareFinishTime_;
        }
        /**
         * <pre>
         *&#47; time from the system clock when the prepare of the SQL statement has finished
         * </pre>
         *
         * <code>optional uint64 prepare_finish_time = 5;</code>
         * @param value The prepareFinishTime to set.
         * @return This builder for chaining.
         */
        public Builder setPrepareFinishTime(long value) {
          bitField0_ |= 0x00000010;
          prepareFinishTime_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *&#47; time from the system clock when the prepare of the SQL statement has finished
         * </pre>
         *
         * <code>optional uint64 prepare_finish_time = 5;</code>
         * @return This builder for chaining.
         */
        public Builder clearPrepareFinishTime() {
          bitField0_ = (bitField0_ & ~0x00000010);
          prepareFinishTime_ = 0L;
          onChanged();
          return this;
        }

        private long backendExecutionStartTime_ ;
        /**
         * <pre>
         *&#47; time from the system clock when execution of the SQL statement in the backend was started
         * </pre>
         *
         * <code>optional uint64 backend_execution_start_time = 6;</code>
         * @return Whether the backendExecutionStartTime field is set.
         */
        public boolean hasBackendExecutionStartTime() {
          return ((bitField0_ & 0x00000020) != 0);
        }
        /**
         * <pre>
         *&#47; time from the system clock when execution of the SQL statement in the backend was started
         * </pre>
         *
         * <code>optional uint64 backend_execution_start_time = 6;</code>
         * @return The backendExecutionStartTime.
         */
        public long getBackendExecutionStartTime() {
          return backendExecutionStartTime_;
        }
        /**
         * <pre>
         *&#47; time from the system clock when execution of the SQL statement in the backend was started
         * </pre>
         *
         * <code>optional uint64 backend_execution_start_time = 6;</code>
         * @param value The backendExecutionStartTime to set.
         * @return This builder for chaining.
         */
        public Builder setBackendExecutionStartTime(long value) {
          bitField0_ |= 0x00000020;
          backendExecutionStartTime_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *&#47; time from the system clock when execution of the SQL statement in the backend was started
         * </pre>
         *
         * <code>optional uint64 backend_execution_start_time = 6;</code>
         * @return This builder for chaining.
         */
        public Builder clearBackendExecutionStartTime() {
          bitField0_ = (bitField0_ & ~0x00000020);
          backendExecutionStartTime_ = 0L;
          onChanged();
          return this;
        }

        private long backendFirstRowFetchTime_ ;
        /**
         * <pre>
         *&#47; time from the system clock when the first row was fetched from the backend
         * </pre>
         *
         * <code>optional uint64 backend_first_row_fetch_time = 7;</code>
         * @return Whether the backendFirstRowFetchTime field is set.
         */
        public boolean hasBackendFirstRowFetchTime() {
          return ((bitField0_ & 0x00000040) != 0);
        }
        /**
         * <pre>
         *&#47; time from the system clock when the first row was fetched from the backend
         * </pre>
         *
         * <code>optional uint64 backend_first_row_fetch_time = 7;</code>
         * @return The backendFirstRowFetchTime.
         */
        public long getBackendFirstRowFetchTime() {
          return backendFirstRowFetchTime_;
        }
        /**
         * <pre>
         *&#47; time from the system clock when the first row was fetched from the backend
         * </pre>
         *
         * <code>optional uint64 backend_first_row_fetch_time = 7;</code>
         * @param value The backendFirstRowFetchTime to set.
         * @return This builder for chaining.
         */
        public Builder setBackendFirstRowFetchTime(long value) {
          bitField0_ |= 0x00000040;
          backendFirstRowFetchTime_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *&#47; time from the system clock when the first row was fetched from the backend
         * </pre>
         *
         * <code>optional uint64 backend_first_row_fetch_time = 7;</code>
         * @return This builder for chaining.
         */
        public Builder clearBackendFirstRowFetchTime() {
          bitField0_ = (bitField0_ & ~0x00000040);
          backendFirstRowFetchTime_ = 0L;
          onChanged();
          return this;
        }

        private long backendExecutionFinishTime_ ;
        /**
         * <pre>
         *&#47; time from the system clock when execution of the SQL statement in the backend finished
         * / (note that result rows may still be fetched after statement execution finished)
         * </pre>
         *
         * <code>optional uint64 backend_execution_finish_time = 8;</code>
         * @return Whether the backendExecutionFinishTime field is set.
         */
        public boolean hasBackendExecutionFinishTime() {
          return ((bitField0_ & 0x00000080) != 0);
        }
        /**
         * <pre>
         *&#47; time from the system clock when execution of the SQL statement in the backend finished
         * / (note that result rows may still be fetched after statement execution finished)
         * </pre>
         *
         * <code>optional uint64 backend_execution_finish_time = 8;</code>
         * @return The backendExecutionFinishTime.
         */
        public long getBackendExecutionFinishTime() {
          return backendExecutionFinishTime_;
        }
        /**
         * <pre>
         *&#47; time from the system clock when execution of the SQL statement in the backend finished
         * / (note that result rows may still be fetched after statement execution finished)
         * </pre>
         *
         * <code>optional uint64 backend_execution_finish_time = 8;</code>
         * @param value The backendExecutionFinishTime to set.
         * @return This builder for chaining.
         */
        public Builder setBackendExecutionFinishTime(long value) {
          bitField0_ |= 0x00000080;
          backendExecutionFinishTime_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *&#47; time from the system clock when execution of the SQL statement in the backend finished
         * / (note that result rows may still be fetched after statement execution finished)
         * </pre>
         *
         * <code>optional uint64 backend_execution_finish_time = 8;</code>
         * @return This builder for chaining.
         */
        public Builder clearBackendExecutionFinishTime() {
          bitField0_ = (bitField0_ & ~0x00000080);
          backendExecutionFinishTime_ = 0L;
          onChanged();
          return this;
        }

        private long clientLastRowFetchTime_ ;
        /**
         * <pre>
         *&#47; time from the system clock when the last row was requested/sent to the client
         * </pre>
         *
         * <code>optional uint64 client_last_row_fetch_time = 9;</code>
         * @return Whether the clientLastRowFetchTime field is set.
         */
        public boolean hasClientLastRowFetchTime() {
          return ((bitField0_ & 0x00000100) != 0);
        }
        /**
         * <pre>
         *&#47; time from the system clock when the last row was requested/sent to the client
         * </pre>
         *
         * <code>optional uint64 client_last_row_fetch_time = 9;</code>
         * @return The clientLastRowFetchTime.
         */
        public long getClientLastRowFetchTime() {
          return clientLastRowFetchTime_;
        }
        /**
         * <pre>
         *&#47; time from the system clock when the last row was requested/sent to the client
         * </pre>
         *
         * <code>optional uint64 client_last_row_fetch_time = 9;</code>
         * @param value The clientLastRowFetchTime to set.
         * @return This builder for chaining.
         */
        public Builder setClientLastRowFetchTime(long value) {
          bitField0_ |= 0x00000100;
          clientLastRowFetchTime_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *&#47; time from the system clock when the last row was requested/sent to the client
         * </pre>
         *
         * <code>optional uint64 client_last_row_fetch_time = 9;</code>
         * @return This builder for chaining.
         */
        public Builder clearClientLastRowFetchTime() {
          bitField0_ = (bitField0_ & ~0x00000100);
          clientLastRowFetchTime_ = 0L;
          onChanged();
          return this;
        }

        private long systemFinishTime_ ;
        /**
         * <pre>
         *&#47; time from the system clock when the execution in the accelerator finished; that time
         * / does not include any post-processing time
         * </pre>
         *
         * <code>optional uint64 system_finish_time = 10;</code>
         * @return Whether the systemFinishTime field is set.
         */
        public boolean hasSystemFinishTime() {
          return ((bitField0_ & 0x00000200) != 0);
        }
        /**
         * <pre>
         *&#47; time from the system clock when the execution in the accelerator finished; that time
         * / does not include any post-processing time
         * </pre>
         *
         * <code>optional uint64 system_finish_time = 10;</code>
         * @return The systemFinishTime.
         */
        public long getSystemFinishTime() {
          return systemFinishTime_;
        }
        /**
         * <pre>
         *&#47; time from the system clock when the execution in the accelerator finished; that time
         * / does not include any post-processing time
         * </pre>
         *
         * <code>optional uint64 system_finish_time = 10;</code>
         * @param value The systemFinishTime to set.
         * @return This builder for chaining.
         */
        public Builder setSystemFinishTime(long value) {
          bitField0_ |= 0x00000200;
          systemFinishTime_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *&#47; time from the system clock when the execution in the accelerator finished; that time
         * / does not include any post-processing time
         * </pre>
         *
         * <code>optional uint64 system_finish_time = 10;</code>
         * @return This builder for chaining.
         */
        public Builder clearSystemFinishTime() {
          bitField0_ = (bitField0_ & ~0x00000200);
          systemFinishTime_ = 0L;
          onChanged();
          return this;
        }

        private long postProcessingExitTime_ ;
        /**
         * <pre>
         *&#47; time from the system clock when the post-processing was finished
         * </pre>
         *
         * <code>optional uint64 post_processing_exit_time = 11;</code>
         * @return Whether the postProcessingExitTime field is set.
         */
        public boolean hasPostProcessingExitTime() {
          return ((bitField0_ & 0x00000400) != 0);
        }
        /**
         * <pre>
         *&#47; time from the system clock when the post-processing was finished
         * </pre>
         *
         * <code>optional uint64 post_processing_exit_time = 11;</code>
         * @return The postProcessingExitTime.
         */
        public long getPostProcessingExitTime() {
          return postProcessingExitTime_;
        }
        /**
         * <pre>
         *&#47; time from the system clock when the post-processing was finished
         * </pre>
         *
         * <code>optional uint64 post_processing_exit_time = 11;</code>
         * @param value The postProcessingExitTime to set.
         * @return This builder for chaining.
         */
        public Builder setPostProcessingExitTime(long value) {
          bitField0_ |= 0x00000400;
          postProcessingExitTime_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *&#47; time from the system clock when the post-processing was finished
         * </pre>
         *
         * <code>optional uint64 post_processing_exit_time = 11;</code>
         * @return This builder for chaining.
         */
        public Builder clearPostProcessingExitTime() {
          bitField0_ = (bitField0_ & ~0x00000400);
          postProcessingExitTime_ = 0L;
          onChanged();
          return this;
        }

        private long dwaCpuTime_ ;
        /**
         * <pre>
         *&#47; CPU time spent for the SQL statement in the accelerator only
         * / (CPU time spent in the backend is tracked in field &#64;c backend_cpu_time)
         * </pre>
         *
         * <code>optional uint64 dwa_cpu_time = 12;</code>
         * @return Whether the dwaCpuTime field is set.
         */
        public boolean hasDwaCpuTime() {
          return ((bitField0_ & 0x00000800) != 0);
        }
        /**
         * <pre>
         *&#47; CPU time spent for the SQL statement in the accelerator only
         * / (CPU time spent in the backend is tracked in field &#64;c backend_cpu_time)
         * </pre>
         *
         * <code>optional uint64 dwa_cpu_time = 12;</code>
         * @return The dwaCpuTime.
         */
        public long getDwaCpuTime() {
          return dwaCpuTime_;
        }
        /**
         * <pre>
         *&#47; CPU time spent for the SQL statement in the accelerator only
         * / (CPU time spent in the backend is tracked in field &#64;c backend_cpu_time)
         * </pre>
         *
         * <code>optional uint64 dwa_cpu_time = 12;</code>
         * @param value The dwaCpuTime to set.
         * @return This builder for chaining.
         */
        public Builder setDwaCpuTime(long value) {
          bitField0_ |= 0x00000800;
          dwaCpuTime_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *&#47; CPU time spent for the SQL statement in the accelerator only
         * / (CPU time spent in the backend is tracked in field &#64;c backend_cpu_time)
         * </pre>
         *
         * <code>optional uint64 dwa_cpu_time = 12;</code>
         * @return This builder for chaining.
         */
        public Builder clearDwaCpuTime() {
          bitField0_ = (bitField0_ & ~0x00000800);
          dwaCpuTime_ = 0L;
          onChanged();
          return this;
        }

        private long backendCpuTime_ ;
        /**
         * <pre>
         **
         * CPU time spend for SQL statement in the backend.
         * This information is available only after the SQL statement execution in the
         * backend has finished. It may also include the CPU time spend for fetching
         * the result set from the backend.
         * </pre>
         *
         * <code>optional uint64 backend_cpu_time = 13;</code>
         * @return Whether the backendCpuTime field is set.
         */
        public boolean hasBackendCpuTime() {
          return ((bitField0_ & 0x00001000) != 0);
        }
        /**
         * <pre>
         **
         * CPU time spend for SQL statement in the backend.
         * This information is available only after the SQL statement execution in the
         * backend has finished. It may also include the CPU time spend for fetching
         * the result set from the backend.
         * </pre>
         *
         * <code>optional uint64 backend_cpu_time = 13;</code>
         * @return The backendCpuTime.
         */
        public long getBackendCpuTime() {
          return backendCpuTime_;
        }
        /**
         * <pre>
         **
         * CPU time spend for SQL statement in the backend.
         * This information is available only after the SQL statement execution in the
         * backend has finished. It may also include the CPU time spend for fetching
         * the result set from the backend.
         * </pre>
         *
         * <code>optional uint64 backend_cpu_time = 13;</code>
         * @param value The backendCpuTime to set.
         * @return This builder for chaining.
         */
        public Builder setBackendCpuTime(long value) {
          bitField0_ |= 0x00001000;
          backendCpuTime_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         **
         * CPU time spend for SQL statement in the backend.
         * This information is available only after the SQL statement execution in the
         * backend has finished. It may also include the CPU time spend for fetching
         * the result set from the backend.
         * </pre>
         *
         * <code>optional uint64 backend_cpu_time = 13;</code>
         * @return This builder for chaining.
         */
        public Builder clearBackendCpuTime() {
          bitField0_ = (bitField0_ & ~0x00001000);
          backendCpuTime_ = 0L;
          onChanged();
          return this;
        }

        private long backendWaitTime_ ;
        /**
         * <pre>
         **
         * Wait time for SQL statement in the backend.
         * This information is available only after the SQL statement execution in the
         * backend has finished.
         * </pre>
         *
         * <code>optional uint64 backend_wait_time = 14;</code>
         * @return Whether the backendWaitTime field is set.
         */
        public boolean hasBackendWaitTime() {
          return ((bitField0_ & 0x00002000) != 0);
        }
        /**
         * <pre>
         **
         * Wait time for SQL statement in the backend.
         * This information is available only after the SQL statement execution in the
         * backend has finished.
         * </pre>
         *
         * <code>optional uint64 backend_wait_time = 14;</code>
         * @return The backendWaitTime.
         */
        public long getBackendWaitTime() {
          return backendWaitTime_;
        }
        /**
         * <pre>
         **
         * Wait time for SQL statement in the backend.
         * This information is available only after the SQL statement execution in the
         * backend has finished.
         * </pre>
         *
         * <code>optional uint64 backend_wait_time = 14;</code>
         * @param value The backendWaitTime to set.
         * @return This builder for chaining.
         */
        public Builder setBackendWaitTime(long value) {
          bitField0_ |= 0x00002000;
          backendWaitTime_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         **
         * Wait time for SQL statement in the backend.
         * This information is available only after the SQL statement execution in the
         * backend has finished.
         * </pre>
         *
         * <code>optional uint64 backend_wait_time = 14;</code>
         * @return This builder for chaining.
         */
        public Builder clearBackendWaitTime() {
          bitField0_ = (bitField0_ & ~0x00002000);
          backendWaitTime_ = 0L;
          onChanged();
          return this;
        }

        private long backendAccountingCollectionTime_ ;
        /**
         * <pre>
         **
         * Time spend for collecting monitoring/accounting information from the backend.
         * Additional queries are executed before/after the execution of the actual SQL
         * statement to obtain monitoring counters from the backend.
         * </pre>
         *
         * <code>optional uint64 backend_accounting_collection_time = 15;</code>
         * @return Whether the backendAccountingCollectionTime field is set.
         */
        public boolean hasBackendAccountingCollectionTime() {
          return ((bitField0_ & 0x00004000) != 0);
        }
        /**
         * <pre>
         **
         * Time spend for collecting monitoring/accounting information from the backend.
         * Additional queries are executed before/after the execution of the actual SQL
         * statement to obtain monitoring counters from the backend.
         * </pre>
         *
         * <code>optional uint64 backend_accounting_collection_time = 15;</code>
         * @return The backendAccountingCollectionTime.
         */
        public long getBackendAccountingCollectionTime() {
          return backendAccountingCollectionTime_;
        }
        /**
         * <pre>
         **
         * Time spend for collecting monitoring/accounting information from the backend.
         * Additional queries are executed before/after the execution of the actual SQL
         * statement to obtain monitoring counters from the backend.
         * </pre>
         *
         * <code>optional uint64 backend_accounting_collection_time = 15;</code>
         * @param value The backendAccountingCollectionTime to set.
         * @return This builder for chaining.
         */
        public Builder setBackendAccountingCollectionTime(long value) {
          bitField0_ |= 0x00004000;
          backendAccountingCollectionTime_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         **
         * Time spend for collecting monitoring/accounting information from the backend.
         * Additional queries are executed before/after the execution of the actual SQL
         * statement to obtain monitoring counters from the backend.
         * </pre>
         *
         * <code>optional uint64 backend_accounting_collection_time = 15;</code>
         * @return This builder for chaining.
         */
        public Builder clearBackendAccountingCollectionTime() {
          bitField0_ = (bitField0_ & ~0x00004000);
          backendAccountingCollectionTime_ = 0L;
          onChanged();
          return this;
        }

        private double prepareTime_ ;
        /**
         * <pre>
         *&#47; time spend for preparing the SQL statement;
         * / this is an elapsed time measured in seconds (with fractions)
         * </pre>
         *
         * <code>optional double prepare_time = 16;</code>
         * @return Whether the prepareTime field is set.
         */
        public boolean hasPrepareTime() {
          return ((bitField0_ & 0x00008000) != 0);
        }
        /**
         * <pre>
         *&#47; time spend for preparing the SQL statement;
         * / this is an elapsed time measured in seconds (with fractions)
         * </pre>
         *
         * <code>optional double prepare_time = 16;</code>
         * @return The prepareTime.
         */
        public double getPrepareTime() {
          return prepareTime_;
        }
        /**
         * <pre>
         *&#47; time spend for preparing the SQL statement;
         * / this is an elapsed time measured in seconds (with fractions)
         * </pre>
         *
         * <code>optional double prepare_time = 16;</code>
         * @param value The prepareTime to set.
         * @return This builder for chaining.
         */
        public Builder setPrepareTime(double value) {
          bitField0_ |= 0x00008000;
          prepareTime_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *&#47; time spend for preparing the SQL statement;
         * / this is an elapsed time measured in seconds (with fractions)
         * </pre>
         *
         * <code>optional double prepare_time = 16;</code>
         * @return This builder for chaining.
         */
        public Builder clearPrepareTime() {
          bitField0_ = (bitField0_ & ~0x00008000);
          prepareTime_ = 0D;
          onChanged();
          return this;
        }

        private double backendDBSExecTime_ ;
        /**
         * <pre>
         *&#47; time spend for executing the SQL statement (without result set fetching);
         * / this is an elapsed time measured in seconds (with fractions)
         * </pre>
         *
         * <code>optional double backendDBSExecTime = 17;</code>
         * @return Whether the backendDBSExecTime field is set.
         */
        public boolean hasBackendDBSExecTime() {
          return ((bitField0_ & 0x00010000) != 0);
        }
        /**
         * <pre>
         *&#47; time spend for executing the SQL statement (without result set fetching);
         * / this is an elapsed time measured in seconds (with fractions)
         * </pre>
         *
         * <code>optional double backendDBSExecTime = 17;</code>
         * @return The backendDBSExecTime.
         */
        public double getBackendDBSExecTime() {
          return backendDBSExecTime_;
        }
        /**
         * <pre>
         *&#47; time spend for executing the SQL statement (without result set fetching);
         * / this is an elapsed time measured in seconds (with fractions)
         * </pre>
         *
         * <code>optional double backendDBSExecTime = 17;</code>
         * @param value The backendDBSExecTime to set.
         * @return This builder for chaining.
         */
        public Builder setBackendDBSExecTime(double value) {
          bitField0_ |= 0x00010000;
          backendDBSExecTime_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *&#47; time spend for executing the SQL statement (without result set fetching);
         * / this is an elapsed time measured in seconds (with fractions)
         * </pre>
         *
         * <code>optional double backendDBSExecTime = 17;</code>
         * @return This builder for chaining.
         */
        public Builder clearBackendDBSExecTime() {
          bitField0_ = (bitField0_ & ~0x00010000);
          backendDBSExecTime_ = 0D;
          onChanged();
          return this;
        }

        private double fetchTime_ ;
        /**
         * <pre>
         *&#47; time spend for fetching the result set of the SQL statement after execution;
         * / this is an elapsed time measured in seconds (with fractions)
         * </pre>
         *
         * <code>optional double fetch_time = 18;</code>
         * @return Whether the fetchTime field is set.
         */
        public boolean hasFetchTime() {
          return ((bitField0_ & 0x00020000) != 0);
        }
        /**
         * <pre>
         *&#47; time spend for fetching the result set of the SQL statement after execution;
         * / this is an elapsed time measured in seconds (with fractions)
         * </pre>
         *
         * <code>optional double fetch_time = 18;</code>
         * @return The fetchTime.
         */
        public double getFetchTime() {
          return fetchTime_;
        }
        /**
         * <pre>
         *&#47; time spend for fetching the result set of the SQL statement after execution;
         * / this is an elapsed time measured in seconds (with fractions)
         * </pre>
         *
         * <code>optional double fetch_time = 18;</code>
         * @param value The fetchTime to set.
         * @return This builder for chaining.
         */
        public Builder setFetchTime(double value) {
          bitField0_ |= 0x00020000;
          fetchTime_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *&#47; time spend for fetching the result set of the SQL statement after execution;
         * / this is an elapsed time measured in seconds (with fractions)
         * </pre>
         *
         * <code>optional double fetch_time = 18;</code>
         * @return This builder for chaining.
         */
        public Builder clearFetchTime() {
          bitField0_ = (bitField0_ & ~0x00020000);
          fetchTime_ = 0D;
          onChanged();
          return this;
        }

        private double totalElapsedTime_ ;
        /**
         * <pre>
         *&#47; time spend between &#64;c system_entry_time and &#64;c system_finish_time;
         * / this is an elapsed time measured in seconds (with fractions)
         * </pre>
         *
         * <code>optional double totalElapsedTime = 19;</code>
         * @return Whether the totalElapsedTime field is set.
         */
        public boolean hasTotalElapsedTime() {
          return ((bitField0_ & 0x00040000) != 0);
        }
        /**
         * <pre>
         *&#47; time spend between &#64;c system_entry_time and &#64;c system_finish_time;
         * / this is an elapsed time measured in seconds (with fractions)
         * </pre>
         *
         * <code>optional double totalElapsedTime = 19;</code>
         * @return The totalElapsedTime.
         */
        public double getTotalElapsedTime() {
          return totalElapsedTime_;
        }
        /**
         * <pre>
         *&#47; time spend between &#64;c system_entry_time and &#64;c system_finish_time;
         * / this is an elapsed time measured in seconds (with fractions)
         * </pre>
         *
         * <code>optional double totalElapsedTime = 19;</code>
         * @param value The totalElapsedTime to set.
         * @return This builder for chaining.
         */
        public Builder setTotalElapsedTime(double value) {
          bitField0_ |= 0x00040000;
          totalElapsedTime_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *&#47; time spend between &#64;c system_entry_time and &#64;c system_finish_time;
         * / this is an elapsed time measured in seconds (with fractions)
         * </pre>
         *
         * <code>optional double totalElapsedTime = 19;</code>
         * @return This builder for chaining.
         */
        public Builder clearTotalElapsedTime() {
          bitField0_ = (bitField0_ & ~0x00040000);
          totalElapsedTime_ = 0D;
          onChanged();
          return this;
        }

        private double postProcessingTime_ ;
        /**
         * <pre>
         *&#47; time spend for post-processing activities;
         * / this is an elapsed time measured in seconds (with fractions)
         * </pre>
         *
         * <code>optional double postProcessingTime = 20;</code>
         * @return Whether the postProcessingTime field is set.
         */
        public boolean hasPostProcessingTime() {
          return ((bitField0_ & 0x00080000) != 0);
        }
        /**
         * <pre>
         *&#47; time spend for post-processing activities;
         * / this is an elapsed time measured in seconds (with fractions)
         * </pre>
         *
         * <code>optional double postProcessingTime = 20;</code>
         * @return The postProcessingTime.
         */
        public double getPostProcessingTime() {
          return postProcessingTime_;
        }
        /**
         * <pre>
         *&#47; time spend for post-processing activities;
         * / this is an elapsed time measured in seconds (with fractions)
         * </pre>
         *
         * <code>optional double postProcessingTime = 20;</code>
         * @param value The postProcessingTime to set.
         * @return This builder for chaining.
         */
        public Builder setPostProcessingTime(double value) {
          bitField0_ |= 0x00080000;
          postProcessingTime_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *&#47; time spend for post-processing activities;
         * / this is an elapsed time measured in seconds (with fractions)
         * </pre>
         *
         * <code>optional double postProcessingTime = 20;</code>
         * @return This builder for chaining.
         */
        public Builder clearPostProcessingTime() {
          bitField0_ = (bitField0_ & ~0x00080000);
          postProcessingTime_ = 0D;
          onChanged();
          return this;
        }

        private long cachedParsedClientReferenceTimestamp_ ;
        /**
         * <pre>
         **
         * The value of the special register value stored in field &#64;c client_reference_timestamp)
         * is parsed into the internal representation and stored here. The value is a
         * time from the wall clock that measures the number of seconds from
         * 1970-01-01 00:00:00.
         * Note that this is _not_ like all the other timers. The purpose of this field
         * is very much unclear as well. But we cannot remove it to keep things
         * backward-compatible.
         * </pre>
         *
         * <code>optional uint64 cached_parsed_client_reference_timestamp = 21;</code>
         * @return Whether the cachedParsedClientReferenceTimestamp field is set.
         */
        public boolean hasCachedParsedClientReferenceTimestamp() {
          return ((bitField0_ & 0x00100000) != 0);
        }
        /**
         * <pre>
         **
         * The value of the special register value stored in field &#64;c client_reference_timestamp)
         * is parsed into the internal representation and stored here. The value is a
         * time from the wall clock that measures the number of seconds from
         * 1970-01-01 00:00:00.
         * Note that this is _not_ like all the other timers. The purpose of this field
         * is very much unclear as well. But we cannot remove it to keep things
         * backward-compatible.
         * </pre>
         *
         * <code>optional uint64 cached_parsed_client_reference_timestamp = 21;</code>
         * @return The cachedParsedClientReferenceTimestamp.
         */
        public long getCachedParsedClientReferenceTimestamp() {
          return cachedParsedClientReferenceTimestamp_;
        }
        /**
         * <pre>
         **
         * The value of the special register value stored in field &#64;c client_reference_timestamp)
         * is parsed into the internal representation and stored here. The value is a
         * time from the wall clock that measures the number of seconds from
         * 1970-01-01 00:00:00.
         * Note that this is _not_ like all the other timers. The purpose of this field
         * is very much unclear as well. But we cannot remove it to keep things
         * backward-compatible.
         * </pre>
         *
         * <code>optional uint64 cached_parsed_client_reference_timestamp = 21;</code>
         * @param value The cachedParsedClientReferenceTimestamp to set.
         * @return This builder for chaining.
         */
        public Builder setCachedParsedClientReferenceTimestamp(long value) {
          bitField0_ |= 0x00100000;
          cachedParsedClientReferenceTimestamp_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         **
         * The value of the special register value stored in field &#64;c client_reference_timestamp)
         * is parsed into the internal representation and stored here. The value is a
         * time from the wall clock that measures the number of seconds from
         * 1970-01-01 00:00:00.
         * Note that this is _not_ like all the other timers. The purpose of this field
         * is very much unclear as well. But we cannot remove it to keep things
         * backward-compatible.
         * </pre>
         *
         * <code>optional uint64 cached_parsed_client_reference_timestamp = 21;</code>
         * @return This builder for chaining.
         */
        public Builder clearCachedParsedClientReferenceTimestamp() {
          bitField0_ = (bitField0_ & ~0x00100000);
          cachedParsedClientReferenceTimestamp_ = 0L;
          onChanged();
          return this;
        }

        private long totalContinueQueryWaitTime_ ;
        /**
         * <pre>
         **
         * The client sends CNTQRY (Continue Query) DRDA messages when fetching the result
         * set from the accelerator. Each such message is responded to with another chunk
         * of data in QRYDTA (Query Data) messages. The wait times between sending those
         * QRYDTA messages and receiving the next CNTQRY messages are tracked in the
         * following fields. The fields are updated and recalculated for each CNTQRY message.
         * </pre>
         *
         * <code>optional int64 total_continue_query_wait_time = 22;</code>
         * @return Whether the totalContinueQueryWaitTime field is set.
         */
        public boolean hasTotalContinueQueryWaitTime() {
          return ((bitField0_ & 0x00200000) != 0);
        }
        /**
         * <pre>
         **
         * The client sends CNTQRY (Continue Query) DRDA messages when fetching the result
         * set from the accelerator. Each such message is responded to with another chunk
         * of data in QRYDTA (Query Data) messages. The wait times between sending those
         * QRYDTA messages and receiving the next CNTQRY messages are tracked in the
         * following fields. The fields are updated and recalculated for each CNTQRY message.
         * </pre>
         *
         * <code>optional int64 total_continue_query_wait_time = 22;</code>
         * @return The totalContinueQueryWaitTime.
         */
        public long getTotalContinueQueryWaitTime() {
          return totalContinueQueryWaitTime_;
        }
        /**
         * <pre>
         **
         * The client sends CNTQRY (Continue Query) DRDA messages when fetching the result
         * set from the accelerator. Each such message is responded to with another chunk
         * of data in QRYDTA (Query Data) messages. The wait times between sending those
         * QRYDTA messages and receiving the next CNTQRY messages are tracked in the
         * following fields. The fields are updated and recalculated for each CNTQRY message.
         * </pre>
         *
         * <code>optional int64 total_continue_query_wait_time = 22;</code>
         * @param value The totalContinueQueryWaitTime to set.
         * @return This builder for chaining.
         */
        public Builder setTotalContinueQueryWaitTime(long value) {
          bitField0_ |= 0x00200000;
          totalContinueQueryWaitTime_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         **
         * The client sends CNTQRY (Continue Query) DRDA messages when fetching the result
         * set from the accelerator. Each such message is responded to with another chunk
         * of data in QRYDTA (Query Data) messages. The wait times between sending those
         * QRYDTA messages and receiving the next CNTQRY messages are tracked in the
         * following fields. The fields are updated and recalculated for each CNTQRY message.
         * </pre>
         *
         * <code>optional int64 total_continue_query_wait_time = 22;</code>
         * @return This builder for chaining.
         */
        public Builder clearTotalContinueQueryWaitTime() {
          bitField0_ = (bitField0_ & ~0x00200000);
          totalContinueQueryWaitTime_ = 0L;
          onChanged();
          return this;
        }

        private long averageContinueQueryWaitTime_ ;
        /**
         * <code>optional int64 average_continue_query_wait_time = 23;</code>
         * @return Whether the averageContinueQueryWaitTime field is set.
         */
        public boolean hasAverageContinueQueryWaitTime() {
          return ((bitField0_ & 0x00400000) != 0);
        }
        /**
         * <code>optional int64 average_continue_query_wait_time = 23;</code>
         * @return The averageContinueQueryWaitTime.
         */
        public long getAverageContinueQueryWaitTime() {
          return averageContinueQueryWaitTime_;
        }
        /**
         * <code>optional int64 average_continue_query_wait_time = 23;</code>
         * @param value The averageContinueQueryWaitTime to set.
         * @return This builder for chaining.
         */
        public Builder setAverageContinueQueryWaitTime(long value) {
          bitField0_ |= 0x00400000;
          averageContinueQueryWaitTime_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int64 average_continue_query_wait_time = 23;</code>
         * @return This builder for chaining.
         */
        public Builder clearAverageContinueQueryWaitTime() {
          bitField0_ = (bitField0_ & ~0x00400000);
          averageContinueQueryWaitTime_ = 0L;
          onChanged();
          return this;
        }

        private long smallestContinueQueryWaitTime_ ;
        /**
         * <code>optional int64 smallest_continue_query_wait_time = 24;</code>
         * @return Whether the smallestContinueQueryWaitTime field is set.
         */
        public boolean hasSmallestContinueQueryWaitTime() {
          return ((bitField0_ & 0x00800000) != 0);
        }
        /**
         * <code>optional int64 smallest_continue_query_wait_time = 24;</code>
         * @return The smallestContinueQueryWaitTime.
         */
        public long getSmallestContinueQueryWaitTime() {
          return smallestContinueQueryWaitTime_;
        }
        /**
         * <code>optional int64 smallest_continue_query_wait_time = 24;</code>
         * @param value The smallestContinueQueryWaitTime to set.
         * @return This builder for chaining.
         */
        public Builder setSmallestContinueQueryWaitTime(long value) {
          bitField0_ |= 0x00800000;
          smallestContinueQueryWaitTime_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int64 smallest_continue_query_wait_time = 24;</code>
         * @return This builder for chaining.
         */
        public Builder clearSmallestContinueQueryWaitTime() {
          bitField0_ = (bitField0_ & ~0x00800000);
          smallestContinueQueryWaitTime_ = 0L;
          onChanged();
          return this;
        }

        private long largestContinueQueryWaitTime_ ;
        /**
         * <code>optional int64 largest_continue_query_wait_time = 25;</code>
         * @return Whether the largestContinueQueryWaitTime field is set.
         */
        public boolean hasLargestContinueQueryWaitTime() {
          return ((bitField0_ & 0x01000000) != 0);
        }
        /**
         * <code>optional int64 largest_continue_query_wait_time = 25;</code>
         * @return The largestContinueQueryWaitTime.
         */
        public long getLargestContinueQueryWaitTime() {
          return largestContinueQueryWaitTime_;
        }
        /**
         * <code>optional int64 largest_continue_query_wait_time = 25;</code>
         * @param value The largestContinueQueryWaitTime to set.
         * @return This builder for chaining.
         */
        public Builder setLargestContinueQueryWaitTime(long value) {
          bitField0_ |= 0x01000000;
          largestContinueQueryWaitTime_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int64 largest_continue_query_wait_time = 25;</code>
         * @return This builder for chaining.
         */
        public Builder clearLargestContinueQueryWaitTime() {
          bitField0_ = (bitField0_ & ~0x01000000);
          largestContinueQueryWaitTime_ = 0L;
          onChanged();
          return this;
        }

        private long numContinueQueryWaitTimes_ ;
        /**
         * <code>optional int64 num_continue_query_wait_times = 26;</code>
         * @return Whether the numContinueQueryWaitTimes field is set.
         */
        public boolean hasNumContinueQueryWaitTimes() {
          return ((bitField0_ & 0x02000000) != 0);
        }
        /**
         * <code>optional int64 num_continue_query_wait_times = 26;</code>
         * @return The numContinueQueryWaitTimes.
         */
        public long getNumContinueQueryWaitTimes() {
          return numContinueQueryWaitTimes_;
        }
        /**
         * <code>optional int64 num_continue_query_wait_times = 26;</code>
         * @param value The numContinueQueryWaitTimes to set.
         * @return This builder for chaining.
         */
        public Builder setNumContinueQueryWaitTimes(long value) {
          bitField0_ |= 0x02000000;
          numContinueQueryWaitTimes_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int64 num_continue_query_wait_times = 26;</code>
         * @return This builder for chaining.
         */
        public Builder clearNumContinueQueryWaitTimes() {
          bitField0_ = (bitField0_ & ~0x02000000);
          numContinueQueryWaitTimes_ = 0L;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:SQLStatementDetailsData.Timings)
      }

      // @@protoc_insertion_point(class_scope:SQLStatementDetailsData.Timings)
      private static final SQLStatementDetails.SQLStatementDetailsData.Timings DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new SQLStatementDetails.SQLStatementDetailsData.Timings();
      }

      public static SQLStatementDetails.SQLStatementDetailsData.Timings getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<Timings>
          PARSER = new com.google.protobuf.AbstractParser<Timings>() {
        @java.lang.Override
        public Timings parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Timings(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Timings> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Timings> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public SQLStatementDetails.SQLStatementDetailsData.Timings getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface ExecutionResultOrBuilder extends
        // @@protoc_insertion_point(interface_extends:SQLStatementDetailsData.ExecutionResult)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       *&#47; Error message received from the backend if SQL statement execution failed there
       * </pre>
       *
       * <code>optional string backend_error_message = 1;</code>
       * @return Whether the backendErrorMessage field is set.
       */
      boolean hasBackendErrorMessage();
      /**
       * <pre>
       *&#47; Error message received from the backend if SQL statement execution failed there
       * </pre>
       *
       * <code>optional string backend_error_message = 1;</code>
       * @return The backendErrorMessage.
       */
      java.lang.String getBackendErrorMessage();
      /**
       * <pre>
       *&#47; Error message received from the backend if SQL statement execution failed there
       * </pre>
       *
       * <code>optional string backend_error_message = 1;</code>
       * @return The bytes for backendErrorMessage.
       */
      com.google.protobuf.ByteString
          getBackendErrorMessageBytes();

      /**
       * <pre>
       *&#47; SQLState of statement execution (&gt;= 0 on success; negative for errors; +100 indicates end-of-result-set)
       * </pre>
       *
       * <code>optional string sql_state = 2;</code>
       * @return Whether the sqlState field is set.
       */
      boolean hasSqlState();
      /**
       * <pre>
       *&#47; SQLState of statement execution (&gt;= 0 on success; negative for errors; +100 indicates end-of-result-set)
       * </pre>
       *
       * <code>optional string sql_state = 2;</code>
       * @return The sqlState.
       */
      java.lang.String getSqlState();
      /**
       * <pre>
       *&#47; SQLState of statement execution (&gt;= 0 on success; negative for errors; +100 indicates end-of-result-set)
       * </pre>
       *
       * <code>optional string sql_state = 2;</code>
       * @return The bytes for sqlState.
       */
      com.google.protobuf.ByteString
          getSqlStateBytes();

      /**
       * <pre>
       *&#47; SQLCode of statement execution ("02000" indicates end-of-result-set)
       * </pre>
       *
       * <code>optional int32 sql_code = 3;</code>
       * @return Whether the sqlCode field is set.
       */
      boolean hasSqlCode();
      /**
       * <pre>
       *&#47; SQLCode of statement execution ("02000" indicates end-of-result-set)
       * </pre>
       *
       * <code>optional int32 sql_code = 3;</code>
       * @return The sqlCode.
       */
      int getSqlCode();

      /**
       * <pre>
       *&#47; Number of rows produced by the backend for the result set for a query; or the number of rows
       * / affected by a DML statement like INSERT/UPDATE/DELETE.
       * </pre>
       *
       * <code>optional uint64 num_result_rows = 4;</code>
       * @return Whether the numResultRows field is set.
       */
      boolean hasNumResultRows();
      /**
       * <pre>
       *&#47; Number of rows produced by the backend for the result set for a query; or the number of rows
       * / affected by a DML statement like INSERT/UPDATE/DELETE.
       * </pre>
       *
       * <code>optional uint64 num_result_rows = 4;</code>
       * @return The numResultRows.
       */
      long getNumResultRows();

      /**
       * <pre>
       *&#47; total number of bytes in the returned result set of queries
       * </pre>
       *
       * <code>optional uint64 num_result_bytes = 5;</code>
       * @return Whether the numResultBytes field is set.
       */
      boolean hasNumResultBytes();
      /**
       * <pre>
       *&#47; total number of bytes in the returned result set of queries
       * </pre>
       *
       * <code>optional uint64 num_result_bytes = 5;</code>
       * @return The numResultBytes.
       */
      long getNumResultBytes();
    }
    /**
     * Protobuf type {@code SQLStatementDetailsData.ExecutionResult}
     */
    public  static final class ExecutionResult extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:SQLStatementDetailsData.ExecutionResult)
        ExecutionResultOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use ExecutionResult.newBuilder() to construct.
      private ExecutionResult(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private ExecutionResult() {
        backendErrorMessage_ = "";
        sqlState_ = "";
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new ExecutionResult();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private ExecutionResult(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000001;
                backendErrorMessage_ = bs;
                break;
              }
              case 18: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000002;
                sqlState_ = bs;
                break;
              }
              case 24: {
                bitField0_ |= 0x00000004;
                sqlCode_ = input.readInt32();
                break;
              }
              case 32: {
                bitField0_ |= 0x00000008;
                numResultRows_ = input.readUInt64();
                break;
              }
              case 40: {
                bitField0_ |= 0x00000010;
                numResultBytes_ = input.readUInt64();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SQLStatementDetails.internal_static_SQLStatementDetailsData_ExecutionResult_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SQLStatementDetails.internal_static_SQLStatementDetailsData_ExecutionResult_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SQLStatementDetails.SQLStatementDetailsData.ExecutionResult.class, SQLStatementDetails.SQLStatementDetailsData.ExecutionResult.Builder.class);
      }

      private int bitField0_;
      public static final int BACKEND_ERROR_MESSAGE_FIELD_NUMBER = 1;
      private volatile java.lang.Object backendErrorMessage_;
      /**
       * <pre>
       *&#47; Error message received from the backend if SQL statement execution failed there
       * </pre>
       *
       * <code>optional string backend_error_message = 1;</code>
       * @return Whether the backendErrorMessage field is set.
       */
      public boolean hasBackendErrorMessage() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       *&#47; Error message received from the backend if SQL statement execution failed there
       * </pre>
       *
       * <code>optional string backend_error_message = 1;</code>
       * @return The backendErrorMessage.
       */
      public java.lang.String getBackendErrorMessage() {
        java.lang.Object ref = backendErrorMessage_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            backendErrorMessage_ = s;
          }
          return s;
        }
      }
      /**
       * <pre>
       *&#47; Error message received from the backend if SQL statement execution failed there
       * </pre>
       *
       * <code>optional string backend_error_message = 1;</code>
       * @return The bytes for backendErrorMessage.
       */
      public com.google.protobuf.ByteString
          getBackendErrorMessageBytes() {
        java.lang.Object ref = backendErrorMessage_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          backendErrorMessage_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int SQL_STATE_FIELD_NUMBER = 2;
      private volatile java.lang.Object sqlState_;
      /**
       * <pre>
       *&#47; SQLState of statement execution (&gt;= 0 on success; negative for errors; +100 indicates end-of-result-set)
       * </pre>
       *
       * <code>optional string sql_state = 2;</code>
       * @return Whether the sqlState field is set.
       */
      public boolean hasSqlState() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       *&#47; SQLState of statement execution (&gt;= 0 on success; negative for errors; +100 indicates end-of-result-set)
       * </pre>
       *
       * <code>optional string sql_state = 2;</code>
       * @return The sqlState.
       */
      public java.lang.String getSqlState() {
        java.lang.Object ref = sqlState_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            sqlState_ = s;
          }
          return s;
        }
      }
      /**
       * <pre>
       *&#47; SQLState of statement execution (&gt;= 0 on success; negative for errors; +100 indicates end-of-result-set)
       * </pre>
       *
       * <code>optional string sql_state = 2;</code>
       * @return The bytes for sqlState.
       */
      public com.google.protobuf.ByteString
          getSqlStateBytes() {
        java.lang.Object ref = sqlState_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          sqlState_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int SQL_CODE_FIELD_NUMBER = 3;
      private int sqlCode_;
      /**
       * <pre>
       *&#47; SQLCode of statement execution ("02000" indicates end-of-result-set)
       * </pre>
       *
       * <code>optional int32 sql_code = 3;</code>
       * @return Whether the sqlCode field is set.
       */
      public boolean hasSqlCode() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       *&#47; SQLCode of statement execution ("02000" indicates end-of-result-set)
       * </pre>
       *
       * <code>optional int32 sql_code = 3;</code>
       * @return The sqlCode.
       */
      public int getSqlCode() {
        return sqlCode_;
      }

      public static final int NUM_RESULT_ROWS_FIELD_NUMBER = 4;
      private long numResultRows_;
      /**
       * <pre>
       *&#47; Number of rows produced by the backend for the result set for a query; or the number of rows
       * / affected by a DML statement like INSERT/UPDATE/DELETE.
       * </pre>
       *
       * <code>optional uint64 num_result_rows = 4;</code>
       * @return Whether the numResultRows field is set.
       */
      public boolean hasNumResultRows() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       *&#47; Number of rows produced by the backend for the result set for a query; or the number of rows
       * / affected by a DML statement like INSERT/UPDATE/DELETE.
       * </pre>
       *
       * <code>optional uint64 num_result_rows = 4;</code>
       * @return The numResultRows.
       */
      public long getNumResultRows() {
        return numResultRows_;
      }

      public static final int NUM_RESULT_BYTES_FIELD_NUMBER = 5;
      private long numResultBytes_;
      /**
       * <pre>
       *&#47; total number of bytes in the returned result set of queries
       * </pre>
       *
       * <code>optional uint64 num_result_bytes = 5;</code>
       * @return Whether the numResultBytes field is set.
       */
      public boolean hasNumResultBytes() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       *&#47; total number of bytes in the returned result set of queries
       * </pre>
       *
       * <code>optional uint64 num_result_bytes = 5;</code>
       * @return The numResultBytes.
       */
      public long getNumResultBytes() {
        return numResultBytes_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, backendErrorMessage_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, sqlState_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeInt32(3, sqlCode_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          output.writeUInt64(4, numResultRows_);
        }
        if (((bitField0_ & 0x00000010) != 0)) {
          output.writeUInt64(5, numResultBytes_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, backendErrorMessage_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, sqlState_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(3, sqlCode_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(4, numResultRows_);
        }
        if (((bitField0_ & 0x00000010) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(5, numResultBytes_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof SQLStatementDetails.SQLStatementDetailsData.ExecutionResult)) {
          return super.equals(obj);
        }
        SQLStatementDetails.SQLStatementDetailsData.ExecutionResult other = (SQLStatementDetails.SQLStatementDetailsData.ExecutionResult) obj;

        if (hasBackendErrorMessage() != other.hasBackendErrorMessage()) return false;
        if (hasBackendErrorMessage()) {
          if (!getBackendErrorMessage()
              .equals(other.getBackendErrorMessage())) return false;
        }
        if (hasSqlState() != other.hasSqlState()) return false;
        if (hasSqlState()) {
          if (!getSqlState()
              .equals(other.getSqlState())) return false;
        }
        if (hasSqlCode() != other.hasSqlCode()) return false;
        if (hasSqlCode()) {
          if (getSqlCode()
              != other.getSqlCode()) return false;
        }
        if (hasNumResultRows() != other.hasNumResultRows()) return false;
        if (hasNumResultRows()) {
          if (getNumResultRows()
              != other.getNumResultRows()) return false;
        }
        if (hasNumResultBytes() != other.hasNumResultBytes()) return false;
        if (hasNumResultBytes()) {
          if (getNumResultBytes()
              != other.getNumResultBytes()) return false;
        }
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasBackendErrorMessage()) {
          hash = (37 * hash) + BACKEND_ERROR_MESSAGE_FIELD_NUMBER;
          hash = (53 * hash) + getBackendErrorMessage().hashCode();
        }
        if (hasSqlState()) {
          hash = (37 * hash) + SQL_STATE_FIELD_NUMBER;
          hash = (53 * hash) + getSqlState().hashCode();
        }
        if (hasSqlCode()) {
          hash = (37 * hash) + SQL_CODE_FIELD_NUMBER;
          hash = (53 * hash) + getSqlCode();
        }
        if (hasNumResultRows()) {
          hash = (37 * hash) + NUM_RESULT_ROWS_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getNumResultRows());
        }
        if (hasNumResultBytes()) {
          hash = (37 * hash) + NUM_RESULT_BYTES_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getNumResultBytes());
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static SQLStatementDetails.SQLStatementDetailsData.ExecutionResult parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.ExecutionResult parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.ExecutionResult parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.ExecutionResult parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.ExecutionResult parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.ExecutionResult parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.ExecutionResult parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.ExecutionResult parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.ExecutionResult parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.ExecutionResult parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.ExecutionResult parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.ExecutionResult parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(SQLStatementDetails.SQLStatementDetailsData.ExecutionResult prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code SQLStatementDetailsData.ExecutionResult}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:SQLStatementDetailsData.ExecutionResult)
          SQLStatementDetails.SQLStatementDetailsData.ExecutionResultOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return SQLStatementDetails.internal_static_SQLStatementDetailsData_ExecutionResult_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return SQLStatementDetails.internal_static_SQLStatementDetailsData_ExecutionResult_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  SQLStatementDetails.SQLStatementDetailsData.ExecutionResult.class, SQLStatementDetails.SQLStatementDetailsData.ExecutionResult.Builder.class);
        }

        // Construct using SQLStatementDetails.SQLStatementDetailsData.ExecutionResult.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          backendErrorMessage_ = "";
          bitField0_ = (bitField0_ & ~0x00000001);
          sqlState_ = "";
          bitField0_ = (bitField0_ & ~0x00000002);
          sqlCode_ = 0;
          bitField0_ = (bitField0_ & ~0x00000004);
          numResultRows_ = 0L;
          bitField0_ = (bitField0_ & ~0x00000008);
          numResultBytes_ = 0L;
          bitField0_ = (bitField0_ & ~0x00000010);
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return SQLStatementDetails.internal_static_SQLStatementDetailsData_ExecutionResult_descriptor;
        }

        @java.lang.Override
        public SQLStatementDetails.SQLStatementDetailsData.ExecutionResult getDefaultInstanceForType() {
          return SQLStatementDetails.SQLStatementDetailsData.ExecutionResult.getDefaultInstance();
        }

        @java.lang.Override
        public SQLStatementDetails.SQLStatementDetailsData.ExecutionResult build() {
          SQLStatementDetails.SQLStatementDetailsData.ExecutionResult result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public SQLStatementDetails.SQLStatementDetailsData.ExecutionResult buildPartial() {
          SQLStatementDetails.SQLStatementDetailsData.ExecutionResult result = new SQLStatementDetails.SQLStatementDetailsData.ExecutionResult(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            to_bitField0_ |= 0x00000001;
          }
          result.backendErrorMessage_ = backendErrorMessage_;
          if (((from_bitField0_ & 0x00000002) != 0)) {
            to_bitField0_ |= 0x00000002;
          }
          result.sqlState_ = sqlState_;
          if (((from_bitField0_ & 0x00000004) != 0)) {
            result.sqlCode_ = sqlCode_;
            to_bitField0_ |= 0x00000004;
          }
          if (((from_bitField0_ & 0x00000008) != 0)) {
            result.numResultRows_ = numResultRows_;
            to_bitField0_ |= 0x00000008;
          }
          if (((from_bitField0_ & 0x00000010) != 0)) {
            result.numResultBytes_ = numResultBytes_;
            to_bitField0_ |= 0x00000010;
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof SQLStatementDetails.SQLStatementDetailsData.ExecutionResult) {
            return mergeFrom((SQLStatementDetails.SQLStatementDetailsData.ExecutionResult)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(SQLStatementDetails.SQLStatementDetailsData.ExecutionResult other) {
          if (other == SQLStatementDetails.SQLStatementDetailsData.ExecutionResult.getDefaultInstance()) return this;
          if (other.hasBackendErrorMessage()) {
            bitField0_ |= 0x00000001;
            backendErrorMessage_ = other.backendErrorMessage_;
            onChanged();
          }
          if (other.hasSqlState()) {
            bitField0_ |= 0x00000002;
            sqlState_ = other.sqlState_;
            onChanged();
          }
          if (other.hasSqlCode()) {
            setSqlCode(other.getSqlCode());
          }
          if (other.hasNumResultRows()) {
            setNumResultRows(other.getNumResultRows());
          }
          if (other.hasNumResultBytes()) {
            setNumResultBytes(other.getNumResultBytes());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          SQLStatementDetails.SQLStatementDetailsData.ExecutionResult parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (SQLStatementDetails.SQLStatementDetailsData.ExecutionResult) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private java.lang.Object backendErrorMessage_ = "";
        /**
         * <pre>
         *&#47; Error message received from the backend if SQL statement execution failed there
         * </pre>
         *
         * <code>optional string backend_error_message = 1;</code>
         * @return Whether the backendErrorMessage field is set.
         */
        public boolean hasBackendErrorMessage() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         *&#47; Error message received from the backend if SQL statement execution failed there
         * </pre>
         *
         * <code>optional string backend_error_message = 1;</code>
         * @return The backendErrorMessage.
         */
        public java.lang.String getBackendErrorMessage() {
          java.lang.Object ref = backendErrorMessage_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              backendErrorMessage_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         *&#47; Error message received from the backend if SQL statement execution failed there
         * </pre>
         *
         * <code>optional string backend_error_message = 1;</code>
         * @return The bytes for backendErrorMessage.
         */
        public com.google.protobuf.ByteString
            getBackendErrorMessageBytes() {
          java.lang.Object ref = backendErrorMessage_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b =
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            backendErrorMessage_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         *&#47; Error message received from the backend if SQL statement execution failed there
         * </pre>
         *
         * <code>optional string backend_error_message = 1;</code>
         * @param value The backendErrorMessage to set.
         * @return This builder for chaining.
         */
        public Builder setBackendErrorMessage(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          backendErrorMessage_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *&#47; Error message received from the backend if SQL statement execution failed there
         * </pre>
         *
         * <code>optional string backend_error_message = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearBackendErrorMessage() {
          bitField0_ = (bitField0_ & ~0x00000001);
          backendErrorMessage_ = getDefaultInstance().getBackendErrorMessage();
          onChanged();
          return this;
        }
        /**
         * <pre>
         *&#47; Error message received from the backend if SQL statement execution failed there
         * </pre>
         *
         * <code>optional string backend_error_message = 1;</code>
         * @param value The bytes for backendErrorMessage to set.
         * @return This builder for chaining.
         */
        public Builder setBackendErrorMessageBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          backendErrorMessage_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object sqlState_ = "";
        /**
         * <pre>
         *&#47; SQLState of statement execution (&gt;= 0 on success; negative for errors; +100 indicates end-of-result-set)
         * </pre>
         *
         * <code>optional string sql_state = 2;</code>
         * @return Whether the sqlState field is set.
         */
        public boolean hasSqlState() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         *&#47; SQLState of statement execution (&gt;= 0 on success; negative for errors; +100 indicates end-of-result-set)
         * </pre>
         *
         * <code>optional string sql_state = 2;</code>
         * @return The sqlState.
         */
        public java.lang.String getSqlState() {
          java.lang.Object ref = sqlState_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              sqlState_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         *&#47; SQLState of statement execution (&gt;= 0 on success; negative for errors; +100 indicates end-of-result-set)
         * </pre>
         *
         * <code>optional string sql_state = 2;</code>
         * @return The bytes for sqlState.
         */
        public com.google.protobuf.ByteString
            getSqlStateBytes() {
          java.lang.Object ref = sqlState_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b =
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            sqlState_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         *&#47; SQLState of statement execution (&gt;= 0 on success; negative for errors; +100 indicates end-of-result-set)
         * </pre>
         *
         * <code>optional string sql_state = 2;</code>
         * @param value The sqlState to set.
         * @return This builder for chaining.
         */
        public Builder setSqlState(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          sqlState_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *&#47; SQLState of statement execution (&gt;= 0 on success; negative for errors; +100 indicates end-of-result-set)
         * </pre>
         *
         * <code>optional string sql_state = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearSqlState() {
          bitField0_ = (bitField0_ & ~0x00000002);
          sqlState_ = getDefaultInstance().getSqlState();
          onChanged();
          return this;
        }
        /**
         * <pre>
         *&#47; SQLState of statement execution (&gt;= 0 on success; negative for errors; +100 indicates end-of-result-set)
         * </pre>
         *
         * <code>optional string sql_state = 2;</code>
         * @param value The bytes for sqlState to set.
         * @return This builder for chaining.
         */
        public Builder setSqlStateBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          sqlState_ = value;
          onChanged();
          return this;
        }

        private int sqlCode_ ;
        /**
         * <pre>
         *&#47; SQLCode of statement execution ("02000" indicates end-of-result-set)
         * </pre>
         *
         * <code>optional int32 sql_code = 3;</code>
         * @return Whether the sqlCode field is set.
         */
        public boolean hasSqlCode() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <pre>
         *&#47; SQLCode of statement execution ("02000" indicates end-of-result-set)
         * </pre>
         *
         * <code>optional int32 sql_code = 3;</code>
         * @return The sqlCode.
         */
        public int getSqlCode() {
          return sqlCode_;
        }
        /**
         * <pre>
         *&#47; SQLCode of statement execution ("02000" indicates end-of-result-set)
         * </pre>
         *
         * <code>optional int32 sql_code = 3;</code>
         * @param value The sqlCode to set.
         * @return This builder for chaining.
         */
        public Builder setSqlCode(int value) {
          bitField0_ |= 0x00000004;
          sqlCode_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *&#47; SQLCode of statement execution ("02000" indicates end-of-result-set)
         * </pre>
         *
         * <code>optional int32 sql_code = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearSqlCode() {
          bitField0_ = (bitField0_ & ~0x00000004);
          sqlCode_ = 0;
          onChanged();
          return this;
        }

        private long numResultRows_ ;
        /**
         * <pre>
         *&#47; Number of rows produced by the backend for the result set for a query; or the number of rows
         * / affected by a DML statement like INSERT/UPDATE/DELETE.
         * </pre>
         *
         * <code>optional uint64 num_result_rows = 4;</code>
         * @return Whether the numResultRows field is set.
         */
        public boolean hasNumResultRows() {
          return ((bitField0_ & 0x00000008) != 0);
        }
        /**
         * <pre>
         *&#47; Number of rows produced by the backend for the result set for a query; or the number of rows
         * / affected by a DML statement like INSERT/UPDATE/DELETE.
         * </pre>
         *
         * <code>optional uint64 num_result_rows = 4;</code>
         * @return The numResultRows.
         */
        public long getNumResultRows() {
          return numResultRows_;
        }
        /**
         * <pre>
         *&#47; Number of rows produced by the backend for the result set for a query; or the number of rows
         * / affected by a DML statement like INSERT/UPDATE/DELETE.
         * </pre>
         *
         * <code>optional uint64 num_result_rows = 4;</code>
         * @param value The numResultRows to set.
         * @return This builder for chaining.
         */
        public Builder setNumResultRows(long value) {
          bitField0_ |= 0x00000008;
          numResultRows_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *&#47; Number of rows produced by the backend for the result set for a query; or the number of rows
         * / affected by a DML statement like INSERT/UPDATE/DELETE.
         * </pre>
         *
         * <code>optional uint64 num_result_rows = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearNumResultRows() {
          bitField0_ = (bitField0_ & ~0x00000008);
          numResultRows_ = 0L;
          onChanged();
          return this;
        }

        private long numResultBytes_ ;
        /**
         * <pre>
         *&#47; total number of bytes in the returned result set of queries
         * </pre>
         *
         * <code>optional uint64 num_result_bytes = 5;</code>
         * @return Whether the numResultBytes field is set.
         */
        public boolean hasNumResultBytes() {
          return ((bitField0_ & 0x00000010) != 0);
        }
        /**
         * <pre>
         *&#47; total number of bytes in the returned result set of queries
         * </pre>
         *
         * <code>optional uint64 num_result_bytes = 5;</code>
         * @return The numResultBytes.
         */
        public long getNumResultBytes() {
          return numResultBytes_;
        }
        /**
         * <pre>
         *&#47; total number of bytes in the returned result set of queries
         * </pre>
         *
         * <code>optional uint64 num_result_bytes = 5;</code>
         * @param value The numResultBytes to set.
         * @return This builder for chaining.
         */
        public Builder setNumResultBytes(long value) {
          bitField0_ |= 0x00000010;
          numResultBytes_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *&#47; total number of bytes in the returned result set of queries
         * </pre>
         *
         * <code>optional uint64 num_result_bytes = 5;</code>
         * @return This builder for chaining.
         */
        public Builder clearNumResultBytes() {
          bitField0_ = (bitField0_ & ~0x00000010);
          numResultBytes_ = 0L;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:SQLStatementDetailsData.ExecutionResult)
      }

      // @@protoc_insertion_point(class_scope:SQLStatementDetailsData.ExecutionResult)
      private static final SQLStatementDetails.SQLStatementDetailsData.ExecutionResult DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new SQLStatementDetails.SQLStatementDetailsData.ExecutionResult();
      }

      public static SQLStatementDetails.SQLStatementDetailsData.ExecutionResult getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<ExecutionResult>
          PARSER = new com.google.protobuf.AbstractParser<ExecutionResult>() {
        @java.lang.Override
        public ExecutionResult parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new ExecutionResult(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<ExecutionResult> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<ExecutionResult> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public SQLStatementDetails.SQLStatementDetailsData.ExecutionResult getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface WaitForDataStatisticsOrBuilder extends
        // @@protoc_insertion_point(interface_extends:SQLStatementDetailsData.WaitForDataStatistics)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       *&#47; result of WaitForLogPositionCommand call
       * </pre>
       *
       * <code>optional uint32 wait_for_log_position_result = 1;</code>
       * @return Whether the waitForLogPositionResult field is set.
       */
      boolean hasWaitForLogPositionResult();
      /**
       * <pre>
       *&#47; result of WaitForLogPositionCommand call
       * </pre>
       *
       * <code>optional uint32 wait_for_log_position_result = 1;</code>
       * @return The waitForLogPositionResult.
       */
      int getWaitForLogPositionResult();

      /**
       * <pre>
       *&#47; time from the system clock when waitForLogPosition started
       * </pre>
       *
       * <code>optional uint64 time_waited_for_delay_protocol_start_time = 2;</code>
       * @return Whether the timeWaitedForDelayProtocolStartTime field is set.
       */
      boolean hasTimeWaitedForDelayProtocolStartTime();
      /**
       * <pre>
       *&#47; time from the system clock when waitForLogPosition started
       * </pre>
       *
       * <code>optional uint64 time_waited_for_delay_protocol_start_time = 2;</code>
       * @return The timeWaitedForDelayProtocolStartTime.
       */
      long getTimeWaitedForDelayProtocolStartTime();

      /**
       * <pre>
       *&#47; time from the system clock when waitForLogPosition finished
       * </pre>
       *
       * <code>optional uint64 time_waited_for_delay_protocol_finish_time = 3;</code>
       * @return Whether the timeWaitedForDelayProtocolFinishTime field is set.
       */
      boolean hasTimeWaitedForDelayProtocolFinishTime();
      /**
       * <pre>
       *&#47; time from the system clock when waitForLogPosition finished
       * </pre>
       *
       * <code>optional uint64 time_waited_for_delay_protocol_finish_time = 3;</code>
       * @return The timeWaitedForDelayProtocolFinishTime.
       */
      long getTimeWaitedForDelayProtocolFinishTime();

      /**
       * <pre>
       **
       * This is the value of CURRENT QUERY ACCELERATION WAITFORDATA. It is
       * stored here in case the timeout for waitForLogPosition has expired and
       * the desired log position count was not reached.
       * </pre>
       *
       * <code>optional uint32 count_wait_time_for_delay_protocol_expired = 4;</code>
       * @return Whether the countWaitTimeForDelayProtocolExpired field is set.
       */
      boolean hasCountWaitTimeForDelayProtocolExpired();
      /**
       * <pre>
       **
       * This is the value of CURRENT QUERY ACCELERATION WAITFORDATA. It is
       * stored here in case the timeout for waitForLogPosition has expired and
       * the desired log position count was not reached.
       * </pre>
       *
       * <code>optional uint32 count_wait_time_for_delay_protocol_expired = 4;</code>
       * @return The countWaitTimeForDelayProtocolExpired.
       */
      int getCountWaitTimeForDelayProtocolExpired();

      /**
       * <pre>
       *&#47; value of the Log Record Sequence Number Log Position (LRSNLOGP) from the client (DB2z)
       * / that should have been or was reached
       * </pre>
       *
       * <code>optional string log_record_sequence_number_log_position = 5;</code>
       * @return Whether the logRecordSequenceNumberLogPosition field is set.
       */
      boolean hasLogRecordSequenceNumberLogPosition();
      /**
       * <pre>
       *&#47; value of the Log Record Sequence Number Log Position (LRSNLOGP) from the client (DB2z)
       * / that should have been or was reached
       * </pre>
       *
       * <code>optional string log_record_sequence_number_log_position = 5;</code>
       * @return The logRecordSequenceNumberLogPosition.
       */
      java.lang.String getLogRecordSequenceNumberLogPosition();
      /**
       * <pre>
       *&#47; value of the Log Record Sequence Number Log Position (LRSNLOGP) from the client (DB2z)
       * / that should have been or was reached
       * </pre>
       *
       * <code>optional string log_record_sequence_number_log_position = 5;</code>
       * @return The bytes for logRecordSequenceNumberLogPosition.
       */
      com.google.protobuf.ByteString
          getLogRecordSequenceNumberLogPositionBytes();

      /**
       * <pre>
       *&#47; value of the Relative Byte Address Log Position (RBALOGP) from the client (DB2z)
       * / that should have been or was reached
       * </pre>
       *
       * <code>optional string relative_byte_address_log_position = 6;</code>
       * @return Whether the relativeByteAddressLogPosition field is set.
       */
      boolean hasRelativeByteAddressLogPosition();
      /**
       * <pre>
       *&#47; value of the Relative Byte Address Log Position (RBALOGP) from the client (DB2z)
       * / that should have been or was reached
       * </pre>
       *
       * <code>optional string relative_byte_address_log_position = 6;</code>
       * @return The relativeByteAddressLogPosition.
       */
      java.lang.String getRelativeByteAddressLogPosition();
      /**
       * <pre>
       *&#47; value of the Relative Byte Address Log Position (RBALOGP) from the client (DB2z)
       * / that should have been or was reached
       * </pre>
       *
       * <code>optional string relative_byte_address_log_position = 6;</code>
       * @return The bytes for relativeByteAddressLogPosition.
       */
      com.google.protobuf.ByteString
          getRelativeByteAddressLogPositionBytes();

      /**
       * <pre>
       *&#47; allow loaded tables with WAITFORDATA&gt;
       * </pre>
       *
       * <code>optional bool allow_non_replicated_tables_for_wait_for_data = 7;</code>
       * @return Whether the allowNonReplicatedTablesForWaitForData field is set.
       */
      boolean hasAllowNonReplicatedTablesForWaitForData();
      /**
       * <pre>
       *&#47; allow loaded tables with WAITFORDATA&gt;
       * </pre>
       *
       * <code>optional bool allow_non_replicated_tables_for_wait_for_data = 7;</code>
       * @return The allowNonReplicatedTablesForWaitForData.
       */
      boolean getAllowNonReplicatedTablesForWaitForData();

      /**
       * <pre>
       *&#47; indicator whether the waitForLogPosition feature has been used
       * </pre>
       *
       * <code>optional bool use_delay_protocol = 8;</code>
       * @return Whether the useDelayProtocol field is set.
       */
      boolean hasUseDelayProtocol();
      /**
       * <pre>
       *&#47; indicator whether the waitForLogPosition feature has been used
       * </pre>
       *
       * <code>optional bool use_delay_protocol = 8;</code>
       * @return The useDelayProtocol.
       */
      boolean getUseDelayProtocol();

      /**
       * <pre>
       *&#47; overall time the SQL statement had to wait for the desired log position to be reached
       * </pre>
       *
       * <code>optional double time_waited_for_delay_protocol = 9;</code>
       * @return Whether the timeWaitedForDelayProtocol field is set.
       */
      boolean hasTimeWaitedForDelayProtocol();
      /**
       * <pre>
       *&#47; overall time the SQL statement had to wait for the desired log position to be reached
       * </pre>
       *
       * <code>optional double time_waited_for_delay_protocol = 9;</code>
       * @return The timeWaitedForDelayProtocol.
       */
      double getTimeWaitedForDelayProtocol();
    }
    /**
     * Protobuf type {@code SQLStatementDetailsData.WaitForDataStatistics}
     */
    public  static final class WaitForDataStatistics extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:SQLStatementDetailsData.WaitForDataStatistics)
        WaitForDataStatisticsOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use WaitForDataStatistics.newBuilder() to construct.
      private WaitForDataStatistics(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private WaitForDataStatistics() {
        logRecordSequenceNumberLogPosition_ = "";
        relativeByteAddressLogPosition_ = "";
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new WaitForDataStatistics();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private WaitForDataStatistics(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                bitField0_ |= 0x00000001;
                waitForLogPositionResult_ = input.readUInt32();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                timeWaitedForDelayProtocolStartTime_ = input.readUInt64();
                break;
              }
              case 24: {
                bitField0_ |= 0x00000004;
                timeWaitedForDelayProtocolFinishTime_ = input.readUInt64();
                break;
              }
              case 32: {
                bitField0_ |= 0x00000008;
                countWaitTimeForDelayProtocolExpired_ = input.readUInt32();
                break;
              }
              case 42: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000010;
                logRecordSequenceNumberLogPosition_ = bs;
                break;
              }
              case 50: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000020;
                relativeByteAddressLogPosition_ = bs;
                break;
              }
              case 56: {
                bitField0_ |= 0x00000040;
                allowNonReplicatedTablesForWaitForData_ = input.readBool();
                break;
              }
              case 64: {
                bitField0_ |= 0x00000080;
                useDelayProtocol_ = input.readBool();
                break;
              }
              case 73: {
                bitField0_ |= 0x00000100;
                timeWaitedForDelayProtocol_ = input.readDouble();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SQLStatementDetails.internal_static_SQLStatementDetailsData_WaitForDataStatistics_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SQLStatementDetails.internal_static_SQLStatementDetailsData_WaitForDataStatistics_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics.class, SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics.Builder.class);
      }

      private int bitField0_;
      public static final int WAIT_FOR_LOG_POSITION_RESULT_FIELD_NUMBER = 1;
      private int waitForLogPositionResult_;
      /**
       * <pre>
       *&#47; result of WaitForLogPositionCommand call
       * </pre>
       *
       * <code>optional uint32 wait_for_log_position_result = 1;</code>
       * @return Whether the waitForLogPositionResult field is set.
       */
      public boolean hasWaitForLogPositionResult() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       *&#47; result of WaitForLogPositionCommand call
       * </pre>
       *
       * <code>optional uint32 wait_for_log_position_result = 1;</code>
       * @return The waitForLogPositionResult.
       */
      public int getWaitForLogPositionResult() {
        return waitForLogPositionResult_;
      }

      public static final int TIME_WAITED_FOR_DELAY_PROTOCOL_START_TIME_FIELD_NUMBER = 2;
      private long timeWaitedForDelayProtocolStartTime_;
      /**
       * <pre>
       *&#47; time from the system clock when waitForLogPosition started
       * </pre>
       *
       * <code>optional uint64 time_waited_for_delay_protocol_start_time = 2;</code>
       * @return Whether the timeWaitedForDelayProtocolStartTime field is set.
       */
      public boolean hasTimeWaitedForDelayProtocolStartTime() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       *&#47; time from the system clock when waitForLogPosition started
       * </pre>
       *
       * <code>optional uint64 time_waited_for_delay_protocol_start_time = 2;</code>
       * @return The timeWaitedForDelayProtocolStartTime.
       */
      public long getTimeWaitedForDelayProtocolStartTime() {
        return timeWaitedForDelayProtocolStartTime_;
      }

      public static final int TIME_WAITED_FOR_DELAY_PROTOCOL_FINISH_TIME_FIELD_NUMBER = 3;
      private long timeWaitedForDelayProtocolFinishTime_;
      /**
       * <pre>
       *&#47; time from the system clock when waitForLogPosition finished
       * </pre>
       *
       * <code>optional uint64 time_waited_for_delay_protocol_finish_time = 3;</code>
       * @return Whether the timeWaitedForDelayProtocolFinishTime field is set.
       */
      public boolean hasTimeWaitedForDelayProtocolFinishTime() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       *&#47; time from the system clock when waitForLogPosition finished
       * </pre>
       *
       * <code>optional uint64 time_waited_for_delay_protocol_finish_time = 3;</code>
       * @return The timeWaitedForDelayProtocolFinishTime.
       */
      public long getTimeWaitedForDelayProtocolFinishTime() {
        return timeWaitedForDelayProtocolFinishTime_;
      }

      public static final int COUNT_WAIT_TIME_FOR_DELAY_PROTOCOL_EXPIRED_FIELD_NUMBER = 4;
      private int countWaitTimeForDelayProtocolExpired_;
      /**
       * <pre>
       **
       * This is the value of CURRENT QUERY ACCELERATION WAITFORDATA. It is
       * stored here in case the timeout for waitForLogPosition has expired and
       * the desired log position count was not reached.
       * </pre>
       *
       * <code>optional uint32 count_wait_time_for_delay_protocol_expired = 4;</code>
       * @return Whether the countWaitTimeForDelayProtocolExpired field is set.
       */
      public boolean hasCountWaitTimeForDelayProtocolExpired() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       **
       * This is the value of CURRENT QUERY ACCELERATION WAITFORDATA. It is
       * stored here in case the timeout for waitForLogPosition has expired and
       * the desired log position count was not reached.
       * </pre>
       *
       * <code>optional uint32 count_wait_time_for_delay_protocol_expired = 4;</code>
       * @return The countWaitTimeForDelayProtocolExpired.
       */
      public int getCountWaitTimeForDelayProtocolExpired() {
        return countWaitTimeForDelayProtocolExpired_;
      }

      public static final int LOG_RECORD_SEQUENCE_NUMBER_LOG_POSITION_FIELD_NUMBER = 5;
      private volatile java.lang.Object logRecordSequenceNumberLogPosition_;
      /**
       * <pre>
       *&#47; value of the Log Record Sequence Number Log Position (LRSNLOGP) from the client (DB2z)
       * / that should have been or was reached
       * </pre>
       *
       * <code>optional string log_record_sequence_number_log_position = 5;</code>
       * @return Whether the logRecordSequenceNumberLogPosition field is set.
       */
      public boolean hasLogRecordSequenceNumberLogPosition() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       *&#47; value of the Log Record Sequence Number Log Position (LRSNLOGP) from the client (DB2z)
       * / that should have been or was reached
       * </pre>
       *
       * <code>optional string log_record_sequence_number_log_position = 5;</code>
       * @return The logRecordSequenceNumberLogPosition.
       */
      public java.lang.String getLogRecordSequenceNumberLogPosition() {
        java.lang.Object ref = logRecordSequenceNumberLogPosition_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            logRecordSequenceNumberLogPosition_ = s;
          }
          return s;
        }
      }
      /**
       * <pre>
       *&#47; value of the Log Record Sequence Number Log Position (LRSNLOGP) from the client (DB2z)
       * / that should have been or was reached
       * </pre>
       *
       * <code>optional string log_record_sequence_number_log_position = 5;</code>
       * @return The bytes for logRecordSequenceNumberLogPosition.
       */
      public com.google.protobuf.ByteString
          getLogRecordSequenceNumberLogPositionBytes() {
        java.lang.Object ref = logRecordSequenceNumberLogPosition_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          logRecordSequenceNumberLogPosition_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int RELATIVE_BYTE_ADDRESS_LOG_POSITION_FIELD_NUMBER = 6;
      private volatile java.lang.Object relativeByteAddressLogPosition_;
      /**
       * <pre>
       *&#47; value of the Relative Byte Address Log Position (RBALOGP) from the client (DB2z)
       * / that should have been or was reached
       * </pre>
       *
       * <code>optional string relative_byte_address_log_position = 6;</code>
       * @return Whether the relativeByteAddressLogPosition field is set.
       */
      public boolean hasRelativeByteAddressLogPosition() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       *&#47; value of the Relative Byte Address Log Position (RBALOGP) from the client (DB2z)
       * / that should have been or was reached
       * </pre>
       *
       * <code>optional string relative_byte_address_log_position = 6;</code>
       * @return The relativeByteAddressLogPosition.
       */
      public java.lang.String getRelativeByteAddressLogPosition() {
        java.lang.Object ref = relativeByteAddressLogPosition_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            relativeByteAddressLogPosition_ = s;
          }
          return s;
        }
      }
      /**
       * <pre>
       *&#47; value of the Relative Byte Address Log Position (RBALOGP) from the client (DB2z)
       * / that should have been or was reached
       * </pre>
       *
       * <code>optional string relative_byte_address_log_position = 6;</code>
       * @return The bytes for relativeByteAddressLogPosition.
       */
      public com.google.protobuf.ByteString
          getRelativeByteAddressLogPositionBytes() {
        java.lang.Object ref = relativeByteAddressLogPosition_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          relativeByteAddressLogPosition_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int ALLOW_NON_REPLICATED_TABLES_FOR_WAIT_FOR_DATA_FIELD_NUMBER = 7;
      private boolean allowNonReplicatedTablesForWaitForData_;
      /**
       * <pre>
       *&#47; allow loaded tables with WAITFORDATA&gt;
       * </pre>
       *
       * <code>optional bool allow_non_replicated_tables_for_wait_for_data = 7;</code>
       * @return Whether the allowNonReplicatedTablesForWaitForData field is set.
       */
      public boolean hasAllowNonReplicatedTablesForWaitForData() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       *&#47; allow loaded tables with WAITFORDATA&gt;
       * </pre>
       *
       * <code>optional bool allow_non_replicated_tables_for_wait_for_data = 7;</code>
       * @return The allowNonReplicatedTablesForWaitForData.
       */
      public boolean getAllowNonReplicatedTablesForWaitForData() {
        return allowNonReplicatedTablesForWaitForData_;
      }

      public static final int USE_DELAY_PROTOCOL_FIELD_NUMBER = 8;
      private boolean useDelayProtocol_;
      /**
       * <pre>
       *&#47; indicator whether the waitForLogPosition feature has been used
       * </pre>
       *
       * <code>optional bool use_delay_protocol = 8;</code>
       * @return Whether the useDelayProtocol field is set.
       */
      public boolean hasUseDelayProtocol() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <pre>
       *&#47; indicator whether the waitForLogPosition feature has been used
       * </pre>
       *
       * <code>optional bool use_delay_protocol = 8;</code>
       * @return The useDelayProtocol.
       */
      public boolean getUseDelayProtocol() {
        return useDelayProtocol_;
      }

      public static final int TIME_WAITED_FOR_DELAY_PROTOCOL_FIELD_NUMBER = 9;
      private double timeWaitedForDelayProtocol_;
      /**
       * <pre>
       *&#47; overall time the SQL statement had to wait for the desired log position to be reached
       * </pre>
       *
       * <code>optional double time_waited_for_delay_protocol = 9;</code>
       * @return Whether the timeWaitedForDelayProtocol field is set.
       */
      public boolean hasTimeWaitedForDelayProtocol() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <pre>
       *&#47; overall time the SQL statement had to wait for the desired log position to be reached
       * </pre>
       *
       * <code>optional double time_waited_for_delay_protocol = 9;</code>
       * @return The timeWaitedForDelayProtocol.
       */
      public double getTimeWaitedForDelayProtocol() {
        return timeWaitedForDelayProtocol_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeUInt32(1, waitForLogPositionResult_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeUInt64(2, timeWaitedForDelayProtocolStartTime_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeUInt64(3, timeWaitedForDelayProtocolFinishTime_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          output.writeUInt32(4, countWaitTimeForDelayProtocolExpired_);
        }
        if (((bitField0_ & 0x00000010) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 5, logRecordSequenceNumberLogPosition_);
        }
        if (((bitField0_ & 0x00000020) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 6, relativeByteAddressLogPosition_);
        }
        if (((bitField0_ & 0x00000040) != 0)) {
          output.writeBool(7, allowNonReplicatedTablesForWaitForData_);
        }
        if (((bitField0_ & 0x00000080) != 0)) {
          output.writeBool(8, useDelayProtocol_);
        }
        if (((bitField0_ & 0x00000100) != 0)) {
          output.writeDouble(9, timeWaitedForDelayProtocol_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, waitForLogPositionResult_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(2, timeWaitedForDelayProtocolStartTime_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(3, timeWaitedForDelayProtocolFinishTime_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(4, countWaitTimeForDelayProtocolExpired_);
        }
        if (((bitField0_ & 0x00000010) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, logRecordSequenceNumberLogPosition_);
        }
        if (((bitField0_ & 0x00000020) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, relativeByteAddressLogPosition_);
        }
        if (((bitField0_ & 0x00000040) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(7, allowNonReplicatedTablesForWaitForData_);
        }
        if (((bitField0_ & 0x00000080) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(8, useDelayProtocol_);
        }
        if (((bitField0_ & 0x00000100) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(9, timeWaitedForDelayProtocol_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics)) {
          return super.equals(obj);
        }
        SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics other = (SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics) obj;

        if (hasWaitForLogPositionResult() != other.hasWaitForLogPositionResult()) return false;
        if (hasWaitForLogPositionResult()) {
          if (getWaitForLogPositionResult()
              != other.getWaitForLogPositionResult()) return false;
        }
        if (hasTimeWaitedForDelayProtocolStartTime() != other.hasTimeWaitedForDelayProtocolStartTime()) return false;
        if (hasTimeWaitedForDelayProtocolStartTime()) {
          if (getTimeWaitedForDelayProtocolStartTime()
              != other.getTimeWaitedForDelayProtocolStartTime()) return false;
        }
        if (hasTimeWaitedForDelayProtocolFinishTime() != other.hasTimeWaitedForDelayProtocolFinishTime()) return false;
        if (hasTimeWaitedForDelayProtocolFinishTime()) {
          if (getTimeWaitedForDelayProtocolFinishTime()
              != other.getTimeWaitedForDelayProtocolFinishTime()) return false;
        }
        if (hasCountWaitTimeForDelayProtocolExpired() != other.hasCountWaitTimeForDelayProtocolExpired()) return false;
        if (hasCountWaitTimeForDelayProtocolExpired()) {
          if (getCountWaitTimeForDelayProtocolExpired()
              != other.getCountWaitTimeForDelayProtocolExpired()) return false;
        }
        if (hasLogRecordSequenceNumberLogPosition() != other.hasLogRecordSequenceNumberLogPosition()) return false;
        if (hasLogRecordSequenceNumberLogPosition()) {
          if (!getLogRecordSequenceNumberLogPosition()
              .equals(other.getLogRecordSequenceNumberLogPosition())) return false;
        }
        if (hasRelativeByteAddressLogPosition() != other.hasRelativeByteAddressLogPosition()) return false;
        if (hasRelativeByteAddressLogPosition()) {
          if (!getRelativeByteAddressLogPosition()
              .equals(other.getRelativeByteAddressLogPosition())) return false;
        }
        if (hasAllowNonReplicatedTablesForWaitForData() != other.hasAllowNonReplicatedTablesForWaitForData()) return false;
        if (hasAllowNonReplicatedTablesForWaitForData()) {
          if (getAllowNonReplicatedTablesForWaitForData()
              != other.getAllowNonReplicatedTablesForWaitForData()) return false;
        }
        if (hasUseDelayProtocol() != other.hasUseDelayProtocol()) return false;
        if (hasUseDelayProtocol()) {
          if (getUseDelayProtocol()
              != other.getUseDelayProtocol()) return false;
        }
        if (hasTimeWaitedForDelayProtocol() != other.hasTimeWaitedForDelayProtocol()) return false;
        if (hasTimeWaitedForDelayProtocol()) {
          if (java.lang.Double.doubleToLongBits(getTimeWaitedForDelayProtocol())
              != java.lang.Double.doubleToLongBits(
                  other.getTimeWaitedForDelayProtocol())) return false;
        }
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasWaitForLogPositionResult()) {
          hash = (37 * hash) + WAIT_FOR_LOG_POSITION_RESULT_FIELD_NUMBER;
          hash = (53 * hash) + getWaitForLogPositionResult();
        }
        if (hasTimeWaitedForDelayProtocolStartTime()) {
          hash = (37 * hash) + TIME_WAITED_FOR_DELAY_PROTOCOL_START_TIME_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getTimeWaitedForDelayProtocolStartTime());
        }
        if (hasTimeWaitedForDelayProtocolFinishTime()) {
          hash = (37 * hash) + TIME_WAITED_FOR_DELAY_PROTOCOL_FINISH_TIME_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getTimeWaitedForDelayProtocolFinishTime());
        }
        if (hasCountWaitTimeForDelayProtocolExpired()) {
          hash = (37 * hash) + COUNT_WAIT_TIME_FOR_DELAY_PROTOCOL_EXPIRED_FIELD_NUMBER;
          hash = (53 * hash) + getCountWaitTimeForDelayProtocolExpired();
        }
        if (hasLogRecordSequenceNumberLogPosition()) {
          hash = (37 * hash) + LOG_RECORD_SEQUENCE_NUMBER_LOG_POSITION_FIELD_NUMBER;
          hash = (53 * hash) + getLogRecordSequenceNumberLogPosition().hashCode();
        }
        if (hasRelativeByteAddressLogPosition()) {
          hash = (37 * hash) + RELATIVE_BYTE_ADDRESS_LOG_POSITION_FIELD_NUMBER;
          hash = (53 * hash) + getRelativeByteAddressLogPosition().hashCode();
        }
        if (hasAllowNonReplicatedTablesForWaitForData()) {
          hash = (37 * hash) + ALLOW_NON_REPLICATED_TABLES_FOR_WAIT_FOR_DATA_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getAllowNonReplicatedTablesForWaitForData());
        }
        if (hasUseDelayProtocol()) {
          hash = (37 * hash) + USE_DELAY_PROTOCOL_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getUseDelayProtocol());
        }
        if (hasTimeWaitedForDelayProtocol()) {
          hash = (37 * hash) + TIME_WAITED_FOR_DELAY_PROTOCOL_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              java.lang.Double.doubleToLongBits(getTimeWaitedForDelayProtocol()));
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code SQLStatementDetailsData.WaitForDataStatistics}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:SQLStatementDetailsData.WaitForDataStatistics)
          SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatisticsOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return SQLStatementDetails.internal_static_SQLStatementDetailsData_WaitForDataStatistics_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return SQLStatementDetails.internal_static_SQLStatementDetailsData_WaitForDataStatistics_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics.class, SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics.Builder.class);
        }

        // Construct using SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          waitForLogPositionResult_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          timeWaitedForDelayProtocolStartTime_ = 0L;
          bitField0_ = (bitField0_ & ~0x00000002);
          timeWaitedForDelayProtocolFinishTime_ = 0L;
          bitField0_ = (bitField0_ & ~0x00000004);
          countWaitTimeForDelayProtocolExpired_ = 0;
          bitField0_ = (bitField0_ & ~0x00000008);
          logRecordSequenceNumberLogPosition_ = "";
          bitField0_ = (bitField0_ & ~0x00000010);
          relativeByteAddressLogPosition_ = "";
          bitField0_ = (bitField0_ & ~0x00000020);
          allowNonReplicatedTablesForWaitForData_ = false;
          bitField0_ = (bitField0_ & ~0x00000040);
          useDelayProtocol_ = false;
          bitField0_ = (bitField0_ & ~0x00000080);
          timeWaitedForDelayProtocol_ = 0D;
          bitField0_ = (bitField0_ & ~0x00000100);
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return SQLStatementDetails.internal_static_SQLStatementDetailsData_WaitForDataStatistics_descriptor;
        }

        @java.lang.Override
        public SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics getDefaultInstanceForType() {
          return SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics.getDefaultInstance();
        }

        @java.lang.Override
        public SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics build() {
          SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics buildPartial() {
          SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics result = new SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.waitForLogPositionResult_ = waitForLogPositionResult_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.timeWaitedForDelayProtocolStartTime_ = timeWaitedForDelayProtocolStartTime_;
            to_bitField0_ |= 0x00000002;
          }
          if (((from_bitField0_ & 0x00000004) != 0)) {
            result.timeWaitedForDelayProtocolFinishTime_ = timeWaitedForDelayProtocolFinishTime_;
            to_bitField0_ |= 0x00000004;
          }
          if (((from_bitField0_ & 0x00000008) != 0)) {
            result.countWaitTimeForDelayProtocolExpired_ = countWaitTimeForDelayProtocolExpired_;
            to_bitField0_ |= 0x00000008;
          }
          if (((from_bitField0_ & 0x00000010) != 0)) {
            to_bitField0_ |= 0x00000010;
          }
          result.logRecordSequenceNumberLogPosition_ = logRecordSequenceNumberLogPosition_;
          if (((from_bitField0_ & 0x00000020) != 0)) {
            to_bitField0_ |= 0x00000020;
          }
          result.relativeByteAddressLogPosition_ = relativeByteAddressLogPosition_;
          if (((from_bitField0_ & 0x00000040) != 0)) {
            result.allowNonReplicatedTablesForWaitForData_ = allowNonReplicatedTablesForWaitForData_;
            to_bitField0_ |= 0x00000040;
          }
          if (((from_bitField0_ & 0x00000080) != 0)) {
            result.useDelayProtocol_ = useDelayProtocol_;
            to_bitField0_ |= 0x00000080;
          }
          if (((from_bitField0_ & 0x00000100) != 0)) {
            result.timeWaitedForDelayProtocol_ = timeWaitedForDelayProtocol_;
            to_bitField0_ |= 0x00000100;
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics) {
            return mergeFrom((SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics other) {
          if (other == SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics.getDefaultInstance()) return this;
          if (other.hasWaitForLogPositionResult()) {
            setWaitForLogPositionResult(other.getWaitForLogPositionResult());
          }
          if (other.hasTimeWaitedForDelayProtocolStartTime()) {
            setTimeWaitedForDelayProtocolStartTime(other.getTimeWaitedForDelayProtocolStartTime());
          }
          if (other.hasTimeWaitedForDelayProtocolFinishTime()) {
            setTimeWaitedForDelayProtocolFinishTime(other.getTimeWaitedForDelayProtocolFinishTime());
          }
          if (other.hasCountWaitTimeForDelayProtocolExpired()) {
            setCountWaitTimeForDelayProtocolExpired(other.getCountWaitTimeForDelayProtocolExpired());
          }
          if (other.hasLogRecordSequenceNumberLogPosition()) {
            bitField0_ |= 0x00000010;
            logRecordSequenceNumberLogPosition_ = other.logRecordSequenceNumberLogPosition_;
            onChanged();
          }
          if (other.hasRelativeByteAddressLogPosition()) {
            bitField0_ |= 0x00000020;
            relativeByteAddressLogPosition_ = other.relativeByteAddressLogPosition_;
            onChanged();
          }
          if (other.hasAllowNonReplicatedTablesForWaitForData()) {
            setAllowNonReplicatedTablesForWaitForData(other.getAllowNonReplicatedTablesForWaitForData());
          }
          if (other.hasUseDelayProtocol()) {
            setUseDelayProtocol(other.getUseDelayProtocol());
          }
          if (other.hasTimeWaitedForDelayProtocol()) {
            setTimeWaitedForDelayProtocol(other.getTimeWaitedForDelayProtocol());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private int waitForLogPositionResult_ ;
        /**
         * <pre>
         *&#47; result of WaitForLogPositionCommand call
         * </pre>
         *
         * <code>optional uint32 wait_for_log_position_result = 1;</code>
         * @return Whether the waitForLogPositionResult field is set.
         */
        public boolean hasWaitForLogPositionResult() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         *&#47; result of WaitForLogPositionCommand call
         * </pre>
         *
         * <code>optional uint32 wait_for_log_position_result = 1;</code>
         * @return The waitForLogPositionResult.
         */
        public int getWaitForLogPositionResult() {
          return waitForLogPositionResult_;
        }
        /**
         * <pre>
         *&#47; result of WaitForLogPositionCommand call
         * </pre>
         *
         * <code>optional uint32 wait_for_log_position_result = 1;</code>
         * @param value The waitForLogPositionResult to set.
         * @return This builder for chaining.
         */
        public Builder setWaitForLogPositionResult(int value) {
          bitField0_ |= 0x00000001;
          waitForLogPositionResult_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *&#47; result of WaitForLogPositionCommand call
         * </pre>
         *
         * <code>optional uint32 wait_for_log_position_result = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearWaitForLogPositionResult() {
          bitField0_ = (bitField0_ & ~0x00000001);
          waitForLogPositionResult_ = 0;
          onChanged();
          return this;
        }

        private long timeWaitedForDelayProtocolStartTime_ ;
        /**
         * <pre>
         *&#47; time from the system clock when waitForLogPosition started
         * </pre>
         *
         * <code>optional uint64 time_waited_for_delay_protocol_start_time = 2;</code>
         * @return Whether the timeWaitedForDelayProtocolStartTime field is set.
         */
        public boolean hasTimeWaitedForDelayProtocolStartTime() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         *&#47; time from the system clock when waitForLogPosition started
         * </pre>
         *
         * <code>optional uint64 time_waited_for_delay_protocol_start_time = 2;</code>
         * @return The timeWaitedForDelayProtocolStartTime.
         */
        public long getTimeWaitedForDelayProtocolStartTime() {
          return timeWaitedForDelayProtocolStartTime_;
        }
        /**
         * <pre>
         *&#47; time from the system clock when waitForLogPosition started
         * </pre>
         *
         * <code>optional uint64 time_waited_for_delay_protocol_start_time = 2;</code>
         * @param value The timeWaitedForDelayProtocolStartTime to set.
         * @return This builder for chaining.
         */
        public Builder setTimeWaitedForDelayProtocolStartTime(long value) {
          bitField0_ |= 0x00000002;
          timeWaitedForDelayProtocolStartTime_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *&#47; time from the system clock when waitForLogPosition started
         * </pre>
         *
         * <code>optional uint64 time_waited_for_delay_protocol_start_time = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearTimeWaitedForDelayProtocolStartTime() {
          bitField0_ = (bitField0_ & ~0x00000002);
          timeWaitedForDelayProtocolStartTime_ = 0L;
          onChanged();
          return this;
        }

        private long timeWaitedForDelayProtocolFinishTime_ ;
        /**
         * <pre>
         *&#47; time from the system clock when waitForLogPosition finished
         * </pre>
         *
         * <code>optional uint64 time_waited_for_delay_protocol_finish_time = 3;</code>
         * @return Whether the timeWaitedForDelayProtocolFinishTime field is set.
         */
        public boolean hasTimeWaitedForDelayProtocolFinishTime() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <pre>
         *&#47; time from the system clock when waitForLogPosition finished
         * </pre>
         *
         * <code>optional uint64 time_waited_for_delay_protocol_finish_time = 3;</code>
         * @return The timeWaitedForDelayProtocolFinishTime.
         */
        public long getTimeWaitedForDelayProtocolFinishTime() {
          return timeWaitedForDelayProtocolFinishTime_;
        }
        /**
         * <pre>
         *&#47; time from the system clock when waitForLogPosition finished
         * </pre>
         *
         * <code>optional uint64 time_waited_for_delay_protocol_finish_time = 3;</code>
         * @param value The timeWaitedForDelayProtocolFinishTime to set.
         * @return This builder for chaining.
         */
        public Builder setTimeWaitedForDelayProtocolFinishTime(long value) {
          bitField0_ |= 0x00000004;
          timeWaitedForDelayProtocolFinishTime_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *&#47; time from the system clock when waitForLogPosition finished
         * </pre>
         *
         * <code>optional uint64 time_waited_for_delay_protocol_finish_time = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearTimeWaitedForDelayProtocolFinishTime() {
          bitField0_ = (bitField0_ & ~0x00000004);
          timeWaitedForDelayProtocolFinishTime_ = 0L;
          onChanged();
          return this;
        }

        private int countWaitTimeForDelayProtocolExpired_ ;
        /**
         * <pre>
         **
         * This is the value of CURRENT QUERY ACCELERATION WAITFORDATA. It is
         * stored here in case the timeout for waitForLogPosition has expired and
         * the desired log position count was not reached.
         * </pre>
         *
         * <code>optional uint32 count_wait_time_for_delay_protocol_expired = 4;</code>
         * @return Whether the countWaitTimeForDelayProtocolExpired field is set.
         */
        public boolean hasCountWaitTimeForDelayProtocolExpired() {
          return ((bitField0_ & 0x00000008) != 0);
        }
        /**
         * <pre>
         **
         * This is the value of CURRENT QUERY ACCELERATION WAITFORDATA. It is
         * stored here in case the timeout for waitForLogPosition has expired and
         * the desired log position count was not reached.
         * </pre>
         *
         * <code>optional uint32 count_wait_time_for_delay_protocol_expired = 4;</code>
         * @return The countWaitTimeForDelayProtocolExpired.
         */
        public int getCountWaitTimeForDelayProtocolExpired() {
          return countWaitTimeForDelayProtocolExpired_;
        }
        /**
         * <pre>
         **
         * This is the value of CURRENT QUERY ACCELERATION WAITFORDATA. It is
         * stored here in case the timeout for waitForLogPosition has expired and
         * the desired log position count was not reached.
         * </pre>
         *
         * <code>optional uint32 count_wait_time_for_delay_protocol_expired = 4;</code>
         * @param value The countWaitTimeForDelayProtocolExpired to set.
         * @return This builder for chaining.
         */
        public Builder setCountWaitTimeForDelayProtocolExpired(int value) {
          bitField0_ |= 0x00000008;
          countWaitTimeForDelayProtocolExpired_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         **
         * This is the value of CURRENT QUERY ACCELERATION WAITFORDATA. It is
         * stored here in case the timeout for waitForLogPosition has expired and
         * the desired log position count was not reached.
         * </pre>
         *
         * <code>optional uint32 count_wait_time_for_delay_protocol_expired = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearCountWaitTimeForDelayProtocolExpired() {
          bitField0_ = (bitField0_ & ~0x00000008);
          countWaitTimeForDelayProtocolExpired_ = 0;
          onChanged();
          return this;
        }

        private java.lang.Object logRecordSequenceNumberLogPosition_ = "";
        /**
         * <pre>
         *&#47; value of the Log Record Sequence Number Log Position (LRSNLOGP) from the client (DB2z)
         * / that should have been or was reached
         * </pre>
         *
         * <code>optional string log_record_sequence_number_log_position = 5;</code>
         * @return Whether the logRecordSequenceNumberLogPosition field is set.
         */
        public boolean hasLogRecordSequenceNumberLogPosition() {
          return ((bitField0_ & 0x00000010) != 0);
        }
        /**
         * <pre>
         *&#47; value of the Log Record Sequence Number Log Position (LRSNLOGP) from the client (DB2z)
         * / that should have been or was reached
         * </pre>
         *
         * <code>optional string log_record_sequence_number_log_position = 5;</code>
         * @return The logRecordSequenceNumberLogPosition.
         */
        public java.lang.String getLogRecordSequenceNumberLogPosition() {
          java.lang.Object ref = logRecordSequenceNumberLogPosition_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              logRecordSequenceNumberLogPosition_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         *&#47; value of the Log Record Sequence Number Log Position (LRSNLOGP) from the client (DB2z)
         * / that should have been or was reached
         * </pre>
         *
         * <code>optional string log_record_sequence_number_log_position = 5;</code>
         * @return The bytes for logRecordSequenceNumberLogPosition.
         */
        public com.google.protobuf.ByteString
            getLogRecordSequenceNumberLogPositionBytes() {
          java.lang.Object ref = logRecordSequenceNumberLogPosition_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b =
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            logRecordSequenceNumberLogPosition_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         *&#47; value of the Log Record Sequence Number Log Position (LRSNLOGP) from the client (DB2z)
         * / that should have been or was reached
         * </pre>
         *
         * <code>optional string log_record_sequence_number_log_position = 5;</code>
         * @param value The logRecordSequenceNumberLogPosition to set.
         * @return This builder for chaining.
         */
        public Builder setLogRecordSequenceNumberLogPosition(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
          logRecordSequenceNumberLogPosition_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *&#47; value of the Log Record Sequence Number Log Position (LRSNLOGP) from the client (DB2z)
         * / that should have been or was reached
         * </pre>
         *
         * <code>optional string log_record_sequence_number_log_position = 5;</code>
         * @return This builder for chaining.
         */
        public Builder clearLogRecordSequenceNumberLogPosition() {
          bitField0_ = (bitField0_ & ~0x00000010);
          logRecordSequenceNumberLogPosition_ = getDefaultInstance().getLogRecordSequenceNumberLogPosition();
          onChanged();
          return this;
        }
        /**
         * <pre>
         *&#47; value of the Log Record Sequence Number Log Position (LRSNLOGP) from the client (DB2z)
         * / that should have been or was reached
         * </pre>
         *
         * <code>optional string log_record_sequence_number_log_position = 5;</code>
         * @param value The bytes for logRecordSequenceNumberLogPosition to set.
         * @return This builder for chaining.
         */
        public Builder setLogRecordSequenceNumberLogPositionBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
          logRecordSequenceNumberLogPosition_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object relativeByteAddressLogPosition_ = "";
        /**
         * <pre>
         *&#47; value of the Relative Byte Address Log Position (RBALOGP) from the client (DB2z)
         * / that should have been or was reached
         * </pre>
         *
         * <code>optional string relative_byte_address_log_position = 6;</code>
         * @return Whether the relativeByteAddressLogPosition field is set.
         */
        public boolean hasRelativeByteAddressLogPosition() {
          return ((bitField0_ & 0x00000020) != 0);
        }
        /**
         * <pre>
         *&#47; value of the Relative Byte Address Log Position (RBALOGP) from the client (DB2z)
         * / that should have been or was reached
         * </pre>
         *
         * <code>optional string relative_byte_address_log_position = 6;</code>
         * @return The relativeByteAddressLogPosition.
         */
        public java.lang.String getRelativeByteAddressLogPosition() {
          java.lang.Object ref = relativeByteAddressLogPosition_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              relativeByteAddressLogPosition_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         *&#47; value of the Relative Byte Address Log Position (RBALOGP) from the client (DB2z)
         * / that should have been or was reached
         * </pre>
         *
         * <code>optional string relative_byte_address_log_position = 6;</code>
         * @return The bytes for relativeByteAddressLogPosition.
         */
        public com.google.protobuf.ByteString
            getRelativeByteAddressLogPositionBytes() {
          java.lang.Object ref = relativeByteAddressLogPosition_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b =
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            relativeByteAddressLogPosition_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         *&#47; value of the Relative Byte Address Log Position (RBALOGP) from the client (DB2z)
         * / that should have been or was reached
         * </pre>
         *
         * <code>optional string relative_byte_address_log_position = 6;</code>
         * @param value The relativeByteAddressLogPosition to set.
         * @return This builder for chaining.
         */
        public Builder setRelativeByteAddressLogPosition(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
          relativeByteAddressLogPosition_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *&#47; value of the Relative Byte Address Log Position (RBALOGP) from the client (DB2z)
         * / that should have been or was reached
         * </pre>
         *
         * <code>optional string relative_byte_address_log_position = 6;</code>
         * @return This builder for chaining.
         */
        public Builder clearRelativeByteAddressLogPosition() {
          bitField0_ = (bitField0_ & ~0x00000020);
          relativeByteAddressLogPosition_ = getDefaultInstance().getRelativeByteAddressLogPosition();
          onChanged();
          return this;
        }
        /**
         * <pre>
         *&#47; value of the Relative Byte Address Log Position (RBALOGP) from the client (DB2z)
         * / that should have been or was reached
         * </pre>
         *
         * <code>optional string relative_byte_address_log_position = 6;</code>
         * @param value The bytes for relativeByteAddressLogPosition to set.
         * @return This builder for chaining.
         */
        public Builder setRelativeByteAddressLogPositionBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
          relativeByteAddressLogPosition_ = value;
          onChanged();
          return this;
        }

        private boolean allowNonReplicatedTablesForWaitForData_ ;
        /**
         * <pre>
         *&#47; allow loaded tables with WAITFORDATA&gt;
         * </pre>
         *
         * <code>optional bool allow_non_replicated_tables_for_wait_for_data = 7;</code>
         * @return Whether the allowNonReplicatedTablesForWaitForData field is set.
         */
        public boolean hasAllowNonReplicatedTablesForWaitForData() {
          return ((bitField0_ & 0x00000040) != 0);
        }
        /**
         * <pre>
         *&#47; allow loaded tables with WAITFORDATA&gt;
         * </pre>
         *
         * <code>optional bool allow_non_replicated_tables_for_wait_for_data = 7;</code>
         * @return The allowNonReplicatedTablesForWaitForData.
         */
        public boolean getAllowNonReplicatedTablesForWaitForData() {
          return allowNonReplicatedTablesForWaitForData_;
        }
        /**
         * <pre>
         *&#47; allow loaded tables with WAITFORDATA&gt;
         * </pre>
         *
         * <code>optional bool allow_non_replicated_tables_for_wait_for_data = 7;</code>
         * @param value The allowNonReplicatedTablesForWaitForData to set.
         * @return This builder for chaining.
         */
        public Builder setAllowNonReplicatedTablesForWaitForData(boolean value) {
          bitField0_ |= 0x00000040;
          allowNonReplicatedTablesForWaitForData_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *&#47; allow loaded tables with WAITFORDATA&gt;
         * </pre>
         *
         * <code>optional bool allow_non_replicated_tables_for_wait_for_data = 7;</code>
         * @return This builder for chaining.
         */
        public Builder clearAllowNonReplicatedTablesForWaitForData() {
          bitField0_ = (bitField0_ & ~0x00000040);
          allowNonReplicatedTablesForWaitForData_ = false;
          onChanged();
          return this;
        }

        private boolean useDelayProtocol_ ;
        /**
         * <pre>
         *&#47; indicator whether the waitForLogPosition feature has been used
         * </pre>
         *
         * <code>optional bool use_delay_protocol = 8;</code>
         * @return Whether the useDelayProtocol field is set.
         */
        public boolean hasUseDelayProtocol() {
          return ((bitField0_ & 0x00000080) != 0);
        }
        /**
         * <pre>
         *&#47; indicator whether the waitForLogPosition feature has been used
         * </pre>
         *
         * <code>optional bool use_delay_protocol = 8;</code>
         * @return The useDelayProtocol.
         */
        public boolean getUseDelayProtocol() {
          return useDelayProtocol_;
        }
        /**
         * <pre>
         *&#47; indicator whether the waitForLogPosition feature has been used
         * </pre>
         *
         * <code>optional bool use_delay_protocol = 8;</code>
         * @param value The useDelayProtocol to set.
         * @return This builder for chaining.
         */
        public Builder setUseDelayProtocol(boolean value) {
          bitField0_ |= 0x00000080;
          useDelayProtocol_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *&#47; indicator whether the waitForLogPosition feature has been used
         * </pre>
         *
         * <code>optional bool use_delay_protocol = 8;</code>
         * @return This builder for chaining.
         */
        public Builder clearUseDelayProtocol() {
          bitField0_ = (bitField0_ & ~0x00000080);
          useDelayProtocol_ = false;
          onChanged();
          return this;
        }

        private double timeWaitedForDelayProtocol_ ;
        /**
         * <pre>
         *&#47; overall time the SQL statement had to wait for the desired log position to be reached
         * </pre>
         *
         * <code>optional double time_waited_for_delay_protocol = 9;</code>
         * @return Whether the timeWaitedForDelayProtocol field is set.
         */
        public boolean hasTimeWaitedForDelayProtocol() {
          return ((bitField0_ & 0x00000100) != 0);
        }
        /**
         * <pre>
         *&#47; overall time the SQL statement had to wait for the desired log position to be reached
         * </pre>
         *
         * <code>optional double time_waited_for_delay_protocol = 9;</code>
         * @return The timeWaitedForDelayProtocol.
         */
        public double getTimeWaitedForDelayProtocol() {
          return timeWaitedForDelayProtocol_;
        }
        /**
         * <pre>
         *&#47; overall time the SQL statement had to wait for the desired log position to be reached
         * </pre>
         *
         * <code>optional double time_waited_for_delay_protocol = 9;</code>
         * @param value The timeWaitedForDelayProtocol to set.
         * @return This builder for chaining.
         */
        public Builder setTimeWaitedForDelayProtocol(double value) {
          bitField0_ |= 0x00000100;
          timeWaitedForDelayProtocol_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *&#47; overall time the SQL statement had to wait for the desired log position to be reached
         * </pre>
         *
         * <code>optional double time_waited_for_delay_protocol = 9;</code>
         * @return This builder for chaining.
         */
        public Builder clearTimeWaitedForDelayProtocol() {
          bitField0_ = (bitField0_ & ~0x00000100);
          timeWaitedForDelayProtocol_ = 0D;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:SQLStatementDetailsData.WaitForDataStatistics)
      }

      // @@protoc_insertion_point(class_scope:SQLStatementDetailsData.WaitForDataStatistics)
      private static final SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics();
      }

      public static SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<WaitForDataStatistics>
          PARSER = new com.google.protobuf.AbstractParser<WaitForDataStatistics>() {
        @java.lang.Override
        public WaitForDataStatistics parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new WaitForDataStatistics(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<WaitForDataStatistics> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<WaitForDataStatistics> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface MultiRowInsertDetailsOrBuilder extends
        // @@protoc_insertion_point(interface_extends:SQLStatementDetailsData.MultiRowInsertDetails)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       *&#47; indicator whether this is a multi-row insert statement
       * </pre>
       *
       * <code>optional bool enabled = 1;</code>
       * @return Whether the enabled field is set.
       */
      boolean hasEnabled();
      /**
       * <pre>
       *&#47; indicator whether this is a multi-row insert statement
       * </pre>
       *
       * <code>optional bool enabled = 1;</code>
       * @return The enabled.
       */
      boolean getEnabled();

      /**
       * <pre>
       *&#47; indicator whether this is an atomic multi-row insert statement
       * </pre>
       *
       * <code>optional bool atomic = 2;</code>
       * @return Whether the atomic field is set.
       */
      boolean hasAtomic();
      /**
       * <pre>
       *&#47; indicator whether this is an atomic multi-row insert statement
       * </pre>
       *
       * <code>optional bool atomic = 2;</code>
       * @return The atomic.
       */
      boolean getAtomic();

      /**
       * <pre>
       *&#47; number of rows that were requested to be inserted
       * </pre>
       *
       * <code>optional uint64 number_of_rows_received_from_client = 3;</code>
       * @return Whether the numberOfRowsReceivedFromClient field is set.
       */
      boolean hasNumberOfRowsReceivedFromClient();
      /**
       * <pre>
       *&#47; number of rows that were requested to be inserted
       * </pre>
       *
       * <code>optional uint64 number_of_rows_received_from_client = 3;</code>
       * @return The numberOfRowsReceivedFromClient.
       */
      long getNumberOfRowsReceivedFromClient();

      /**
       * <pre>
       *&#47; number of rows that were inserted into the backend
       * </pre>
       *
       * <code>optional uint64 number_of_rows_successfully_inserted = 4;</code>
       * @return Whether the numberOfRowsSuccessfullyInserted field is set.
       */
      boolean hasNumberOfRowsSuccessfullyInserted();
      /**
       * <pre>
       *&#47; number of rows that were inserted into the backend
       * </pre>
       *
       * <code>optional uint64 number_of_rows_successfully_inserted = 4;</code>
       * @return The numberOfRowsSuccessfullyInserted.
       */
      long getNumberOfRowsSuccessfullyInserted();
    }
    /**
     * Protobuf type {@code SQLStatementDetailsData.MultiRowInsertDetails}
     */
    public  static final class MultiRowInsertDetails extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:SQLStatementDetailsData.MultiRowInsertDetails)
        MultiRowInsertDetailsOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use MultiRowInsertDetails.newBuilder() to construct.
      private MultiRowInsertDetails(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private MultiRowInsertDetails() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new MultiRowInsertDetails();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private MultiRowInsertDetails(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                bitField0_ |= 0x00000001;
                enabled_ = input.readBool();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                atomic_ = input.readBool();
                break;
              }
              case 24: {
                bitField0_ |= 0x00000004;
                numberOfRowsReceivedFromClient_ = input.readUInt64();
                break;
              }
              case 32: {
                bitField0_ |= 0x00000008;
                numberOfRowsSuccessfullyInserted_ = input.readUInt64();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SQLStatementDetails.internal_static_SQLStatementDetailsData_MultiRowInsertDetails_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SQLStatementDetails.internal_static_SQLStatementDetailsData_MultiRowInsertDetails_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails.class, SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails.Builder.class);
      }

      private int bitField0_;
      public static final int ENABLED_FIELD_NUMBER = 1;
      private boolean enabled_;
      /**
       * <pre>
       *&#47; indicator whether this is a multi-row insert statement
       * </pre>
       *
       * <code>optional bool enabled = 1;</code>
       * @return Whether the enabled field is set.
       */
      public boolean hasEnabled() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       *&#47; indicator whether this is a multi-row insert statement
       * </pre>
       *
       * <code>optional bool enabled = 1;</code>
       * @return The enabled.
       */
      public boolean getEnabled() {
        return enabled_;
      }

      public static final int ATOMIC_FIELD_NUMBER = 2;
      private boolean atomic_;
      /**
       * <pre>
       *&#47; indicator whether this is an atomic multi-row insert statement
       * </pre>
       *
       * <code>optional bool atomic = 2;</code>
       * @return Whether the atomic field is set.
       */
      public boolean hasAtomic() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       *&#47; indicator whether this is an atomic multi-row insert statement
       * </pre>
       *
       * <code>optional bool atomic = 2;</code>
       * @return The atomic.
       */
      public boolean getAtomic() {
        return atomic_;
      }

      public static final int NUMBER_OF_ROWS_RECEIVED_FROM_CLIENT_FIELD_NUMBER = 3;
      private long numberOfRowsReceivedFromClient_;
      /**
       * <pre>
       *&#47; number of rows that were requested to be inserted
       * </pre>
       *
       * <code>optional uint64 number_of_rows_received_from_client = 3;</code>
       * @return Whether the numberOfRowsReceivedFromClient field is set.
       */
      public boolean hasNumberOfRowsReceivedFromClient() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       *&#47; number of rows that were requested to be inserted
       * </pre>
       *
       * <code>optional uint64 number_of_rows_received_from_client = 3;</code>
       * @return The numberOfRowsReceivedFromClient.
       */
      public long getNumberOfRowsReceivedFromClient() {
        return numberOfRowsReceivedFromClient_;
      }

      public static final int NUMBER_OF_ROWS_SUCCESSFULLY_INSERTED_FIELD_NUMBER = 4;
      private long numberOfRowsSuccessfullyInserted_;
      /**
       * <pre>
       *&#47; number of rows that were inserted into the backend
       * </pre>
       *
       * <code>optional uint64 number_of_rows_successfully_inserted = 4;</code>
       * @return Whether the numberOfRowsSuccessfullyInserted field is set.
       */
      public boolean hasNumberOfRowsSuccessfullyInserted() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       *&#47; number of rows that were inserted into the backend
       * </pre>
       *
       * <code>optional uint64 number_of_rows_successfully_inserted = 4;</code>
       * @return The numberOfRowsSuccessfullyInserted.
       */
      public long getNumberOfRowsSuccessfullyInserted() {
        return numberOfRowsSuccessfullyInserted_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeBool(1, enabled_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeBool(2, atomic_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeUInt64(3, numberOfRowsReceivedFromClient_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          output.writeUInt64(4, numberOfRowsSuccessfullyInserted_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(1, enabled_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(2, atomic_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(3, numberOfRowsReceivedFromClient_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(4, numberOfRowsSuccessfullyInserted_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails)) {
          return super.equals(obj);
        }
        SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails other = (SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails) obj;

        if (hasEnabled() != other.hasEnabled()) return false;
        if (hasEnabled()) {
          if (getEnabled()
              != other.getEnabled()) return false;
        }
        if (hasAtomic() != other.hasAtomic()) return false;
        if (hasAtomic()) {
          if (getAtomic()
              != other.getAtomic()) return false;
        }
        if (hasNumberOfRowsReceivedFromClient() != other.hasNumberOfRowsReceivedFromClient()) return false;
        if (hasNumberOfRowsReceivedFromClient()) {
          if (getNumberOfRowsReceivedFromClient()
              != other.getNumberOfRowsReceivedFromClient()) return false;
        }
        if (hasNumberOfRowsSuccessfullyInserted() != other.hasNumberOfRowsSuccessfullyInserted()) return false;
        if (hasNumberOfRowsSuccessfullyInserted()) {
          if (getNumberOfRowsSuccessfullyInserted()
              != other.getNumberOfRowsSuccessfullyInserted()) return false;
        }
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasEnabled()) {
          hash = (37 * hash) + ENABLED_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getEnabled());
        }
        if (hasAtomic()) {
          hash = (37 * hash) + ATOMIC_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getAtomic());
        }
        if (hasNumberOfRowsReceivedFromClient()) {
          hash = (37 * hash) + NUMBER_OF_ROWS_RECEIVED_FROM_CLIENT_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getNumberOfRowsReceivedFromClient());
        }
        if (hasNumberOfRowsSuccessfullyInserted()) {
          hash = (37 * hash) + NUMBER_OF_ROWS_SUCCESSFULLY_INSERTED_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getNumberOfRowsSuccessfullyInserted());
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code SQLStatementDetailsData.MultiRowInsertDetails}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:SQLStatementDetailsData.MultiRowInsertDetails)
          SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetailsOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return SQLStatementDetails.internal_static_SQLStatementDetailsData_MultiRowInsertDetails_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return SQLStatementDetails.internal_static_SQLStatementDetailsData_MultiRowInsertDetails_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails.class, SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails.Builder.class);
        }

        // Construct using SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          enabled_ = false;
          bitField0_ = (bitField0_ & ~0x00000001);
          atomic_ = false;
          bitField0_ = (bitField0_ & ~0x00000002);
          numberOfRowsReceivedFromClient_ = 0L;
          bitField0_ = (bitField0_ & ~0x00000004);
          numberOfRowsSuccessfullyInserted_ = 0L;
          bitField0_ = (bitField0_ & ~0x00000008);
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return SQLStatementDetails.internal_static_SQLStatementDetailsData_MultiRowInsertDetails_descriptor;
        }

        @java.lang.Override
        public SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails getDefaultInstanceForType() {
          return SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails.getDefaultInstance();
        }

        @java.lang.Override
        public SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails build() {
          SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails buildPartial() {
          SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails result = new SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.enabled_ = enabled_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.atomic_ = atomic_;
            to_bitField0_ |= 0x00000002;
          }
          if (((from_bitField0_ & 0x00000004) != 0)) {
            result.numberOfRowsReceivedFromClient_ = numberOfRowsReceivedFromClient_;
            to_bitField0_ |= 0x00000004;
          }
          if (((from_bitField0_ & 0x00000008) != 0)) {
            result.numberOfRowsSuccessfullyInserted_ = numberOfRowsSuccessfullyInserted_;
            to_bitField0_ |= 0x00000008;
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails) {
            return mergeFrom((SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails other) {
          if (other == SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails.getDefaultInstance()) return this;
          if (other.hasEnabled()) {
            setEnabled(other.getEnabled());
          }
          if (other.hasAtomic()) {
            setAtomic(other.getAtomic());
          }
          if (other.hasNumberOfRowsReceivedFromClient()) {
            setNumberOfRowsReceivedFromClient(other.getNumberOfRowsReceivedFromClient());
          }
          if (other.hasNumberOfRowsSuccessfullyInserted()) {
            setNumberOfRowsSuccessfullyInserted(other.getNumberOfRowsSuccessfullyInserted());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private boolean enabled_ ;
        /**
         * <pre>
         *&#47; indicator whether this is a multi-row insert statement
         * </pre>
         *
         * <code>optional bool enabled = 1;</code>
         * @return Whether the enabled field is set.
         */
        public boolean hasEnabled() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         *&#47; indicator whether this is a multi-row insert statement
         * </pre>
         *
         * <code>optional bool enabled = 1;</code>
         * @return The enabled.
         */
        public boolean getEnabled() {
          return enabled_;
        }
        /**
         * <pre>
         *&#47; indicator whether this is a multi-row insert statement
         * </pre>
         *
         * <code>optional bool enabled = 1;</code>
         * @param value The enabled to set.
         * @return This builder for chaining.
         */
        public Builder setEnabled(boolean value) {
          bitField0_ |= 0x00000001;
          enabled_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *&#47; indicator whether this is a multi-row insert statement
         * </pre>
         *
         * <code>optional bool enabled = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearEnabled() {
          bitField0_ = (bitField0_ & ~0x00000001);
          enabled_ = false;
          onChanged();
          return this;
        }

        private boolean atomic_ ;
        /**
         * <pre>
         *&#47; indicator whether this is an atomic multi-row insert statement
         * </pre>
         *
         * <code>optional bool atomic = 2;</code>
         * @return Whether the atomic field is set.
         */
        public boolean hasAtomic() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         *&#47; indicator whether this is an atomic multi-row insert statement
         * </pre>
         *
         * <code>optional bool atomic = 2;</code>
         * @return The atomic.
         */
        public boolean getAtomic() {
          return atomic_;
        }
        /**
         * <pre>
         *&#47; indicator whether this is an atomic multi-row insert statement
         * </pre>
         *
         * <code>optional bool atomic = 2;</code>
         * @param value The atomic to set.
         * @return This builder for chaining.
         */
        public Builder setAtomic(boolean value) {
          bitField0_ |= 0x00000002;
          atomic_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *&#47; indicator whether this is an atomic multi-row insert statement
         * </pre>
         *
         * <code>optional bool atomic = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearAtomic() {
          bitField0_ = (bitField0_ & ~0x00000002);
          atomic_ = false;
          onChanged();
          return this;
        }

        private long numberOfRowsReceivedFromClient_ ;
        /**
         * <pre>
         *&#47; number of rows that were requested to be inserted
         * </pre>
         *
         * <code>optional uint64 number_of_rows_received_from_client = 3;</code>
         * @return Whether the numberOfRowsReceivedFromClient field is set.
         */
        public boolean hasNumberOfRowsReceivedFromClient() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <pre>
         *&#47; number of rows that were requested to be inserted
         * </pre>
         *
         * <code>optional uint64 number_of_rows_received_from_client = 3;</code>
         * @return The numberOfRowsReceivedFromClient.
         */
        public long getNumberOfRowsReceivedFromClient() {
          return numberOfRowsReceivedFromClient_;
        }
        /**
         * <pre>
         *&#47; number of rows that were requested to be inserted
         * </pre>
         *
         * <code>optional uint64 number_of_rows_received_from_client = 3;</code>
         * @param value The numberOfRowsReceivedFromClient to set.
         * @return This builder for chaining.
         */
        public Builder setNumberOfRowsReceivedFromClient(long value) {
          bitField0_ |= 0x00000004;
          numberOfRowsReceivedFromClient_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *&#47; number of rows that were requested to be inserted
         * </pre>
         *
         * <code>optional uint64 number_of_rows_received_from_client = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearNumberOfRowsReceivedFromClient() {
          bitField0_ = (bitField0_ & ~0x00000004);
          numberOfRowsReceivedFromClient_ = 0L;
          onChanged();
          return this;
        }

        private long numberOfRowsSuccessfullyInserted_ ;
        /**
         * <pre>
         *&#47; number of rows that were inserted into the backend
         * </pre>
         *
         * <code>optional uint64 number_of_rows_successfully_inserted = 4;</code>
         * @return Whether the numberOfRowsSuccessfullyInserted field is set.
         */
        public boolean hasNumberOfRowsSuccessfullyInserted() {
          return ((bitField0_ & 0x00000008) != 0);
        }
        /**
         * <pre>
         *&#47; number of rows that were inserted into the backend
         * </pre>
         *
         * <code>optional uint64 number_of_rows_successfully_inserted = 4;</code>
         * @return The numberOfRowsSuccessfullyInserted.
         */
        public long getNumberOfRowsSuccessfullyInserted() {
          return numberOfRowsSuccessfullyInserted_;
        }
        /**
         * <pre>
         *&#47; number of rows that were inserted into the backend
         * </pre>
         *
         * <code>optional uint64 number_of_rows_successfully_inserted = 4;</code>
         * @param value The numberOfRowsSuccessfullyInserted to set.
         * @return This builder for chaining.
         */
        public Builder setNumberOfRowsSuccessfullyInserted(long value) {
          bitField0_ |= 0x00000008;
          numberOfRowsSuccessfullyInserted_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *&#47; number of rows that were inserted into the backend
         * </pre>
         *
         * <code>optional uint64 number_of_rows_successfully_inserted = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearNumberOfRowsSuccessfullyInserted() {
          bitField0_ = (bitField0_ & ~0x00000008);
          numberOfRowsSuccessfullyInserted_ = 0L;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:SQLStatementDetailsData.MultiRowInsertDetails)
      }

      // @@protoc_insertion_point(class_scope:SQLStatementDetailsData.MultiRowInsertDetails)
      private static final SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails();
      }

      public static SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<MultiRowInsertDetails>
          PARSER = new com.google.protobuf.AbstractParser<MultiRowInsertDetails>() {
        @java.lang.Override
        public MultiRowInsertDetails parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new MultiRowInsertDetails(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<MultiRowInsertDetails> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<MultiRowInsertDetails> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface ClientAccountingDetailsOrBuilder extends
        // @@protoc_insertion_point(interface_extends:SQLStatementDetailsData.ClientAccountingDetails)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional string client_product_id = 1;</code>
       * @return Whether the clientProductId field is set.
       */
      boolean hasClientProductId();
      /**
       * <code>optional string client_product_id = 1;</code>
       * @return The clientProductId.
       */
      java.lang.String getClientProductId();
      /**
       * <code>optional string client_product_id = 1;</code>
       * @return The bytes for clientProductId.
       */
      com.google.protobuf.ByteString
          getClientProductIdBytes();

      /**
       * <code>optional string client_location_name = 2;</code>
       * @return Whether the clientLocationName field is set.
       */
      boolean hasClientLocationName();
      /**
       * <code>optional string client_location_name = 2;</code>
       * @return The clientLocationName.
       */
      java.lang.String getClientLocationName();
      /**
       * <code>optional string client_location_name = 2;</code>
       * @return The bytes for clientLocationName.
       */
      com.google.protobuf.ByteString
          getClientLocationNameBytes();

      /**
       * <code>optional string client_network_id = 3;</code>
       * @return Whether the clientNetworkId field is set.
       */
      boolean hasClientNetworkId();
      /**
       * <code>optional string client_network_id = 3;</code>
       * @return The clientNetworkId.
       */
      java.lang.String getClientNetworkId();
      /**
       * <code>optional string client_network_id = 3;</code>
       * @return The bytes for clientNetworkId.
       */
      com.google.protobuf.ByteString
          getClientNetworkIdBytes();

      /**
       * <code>optional string client_lu_name = 4;</code>
       * @return Whether the clientLuName field is set.
       */
      boolean hasClientLuName();
      /**
       * <code>optional string client_lu_name = 4;</code>
       * @return The clientLuName.
       */
      java.lang.String getClientLuName();
      /**
       * <code>optional string client_lu_name = 4;</code>
       * @return The bytes for clientLuName.
       */
      com.google.protobuf.ByteString
          getClientLuNameBytes();

      /**
       * <code>optional string client_connection_name = 5;</code>
       * @return Whether the clientConnectionName field is set.
       */
      boolean hasClientConnectionName();
      /**
       * <code>optional string client_connection_name = 5;</code>
       * @return The clientConnectionName.
       */
      java.lang.String getClientConnectionName();
      /**
       * <code>optional string client_connection_name = 5;</code>
       * @return The bytes for clientConnectionName.
       */
      com.google.protobuf.ByteString
          getClientConnectionNameBytes();

      /**
       * <code>optional string client_connection_type = 6;</code>
       * @return Whether the clientConnectionType field is set.
       */
      boolean hasClientConnectionType();
      /**
       * <code>optional string client_connection_type = 6;</code>
       * @return The clientConnectionType.
       */
      java.lang.String getClientConnectionType();
      /**
       * <code>optional string client_connection_type = 6;</code>
       * @return The bytes for clientConnectionType.
       */
      com.google.protobuf.ByteString
          getClientConnectionTypeBytes();

      /**
       * <code>optional string client_correlation_id = 7;</code>
       * @return Whether the clientCorrelationId field is set.
       */
      boolean hasClientCorrelationId();
      /**
       * <code>optional string client_correlation_id = 7;</code>
       * @return The clientCorrelationId.
       */
      java.lang.String getClientCorrelationId();
      /**
       * <code>optional string client_correlation_id = 7;</code>
       * @return The bytes for clientCorrelationId.
       */
      com.google.protobuf.ByteString
          getClientCorrelationIdBytes();

      /**
       * <code>optional string client_authorization_id = 8;</code>
       * @return Whether the clientAuthorizationId field is set.
       */
      boolean hasClientAuthorizationId();
      /**
       * <code>optional string client_authorization_id = 8;</code>
       * @return The clientAuthorizationId.
       */
      java.lang.String getClientAuthorizationId();
      /**
       * <code>optional string client_authorization_id = 8;</code>
       * @return The bytes for clientAuthorizationId.
       */
      com.google.protobuf.ByteString
          getClientAuthorizationIdBytes();

      /**
       * <code>optional string client_workstation = 9;</code>
       * @return Whether the clientWorkstation field is set.
       */
      boolean hasClientWorkstation();
      /**
       * <code>optional string client_workstation = 9;</code>
       * @return The clientWorkstation.
       */
      java.lang.String getClientWorkstation();
      /**
       * <code>optional string client_workstation = 9;</code>
       * @return The bytes for clientWorkstation.
       */
      com.google.protobuf.ByteString
          getClientWorkstationBytes();

      /**
       * <code>optional string client_application = 10;</code>
       * @return Whether the clientApplication field is set.
       */
      boolean hasClientApplication();
      /**
       * <code>optional string client_application = 10;</code>
       * @return The clientApplication.
       */
      java.lang.String getClientApplication();
      /**
       * <code>optional string client_application = 10;</code>
       * @return The bytes for clientApplication.
       */
      com.google.protobuf.ByteString
          getClientApplicationBytes();

      /**
       * <code>optional string client_user_id = 11;</code>
       * @return Whether the clientUserId field is set.
       */
      boolean hasClientUserId();
      /**
       * <code>optional string client_user_id = 11;</code>
       * @return The clientUserId.
       */
      java.lang.String getClientUserId();
      /**
       * <code>optional string client_user_id = 11;</code>
       * @return The bytes for clientUserId.
       */
      com.google.protobuf.ByteString
          getClientUserIdBytes();

      /**
       * <code>optional string client_plan_name = 12;</code>
       * @return Whether the clientPlanName field is set.
       */
      boolean hasClientPlanName();
      /**
       * <code>optional string client_plan_name = 12;</code>
       * @return The clientPlanName.
       */
      java.lang.String getClientPlanName();
      /**
       * <code>optional string client_plan_name = 12;</code>
       * @return The bytes for clientPlanName.
       */
      com.google.protobuf.ByteString
          getClientPlanNameBytes();

      /**
       * <code>optional string client_accounting_details = 13;</code>
       * @return Whether the clientAccountingDetails field is set.
       */
      boolean hasClientAccountingDetails();
      /**
       * <code>optional string client_accounting_details = 13;</code>
       * @return The clientAccountingDetails.
       */
      java.lang.String getClientAccountingDetails();
      /**
       * <code>optional string client_accounting_details = 13;</code>
       * @return The bytes for clientAccountingDetails.
       */
      com.google.protobuf.ByteString
          getClientAccountingDetailsBytes();

      /**
       * <code>optional string db2_system_id = 14;</code>
       * @return Whether the db2SystemId field is set.
       */
      boolean hasDb2SystemId();
      /**
       * <code>optional string db2_system_id = 14;</code>
       * @return The db2SystemId.
       */
      java.lang.String getDb2SystemId();
      /**
       * <code>optional string db2_system_id = 14;</code>
       * @return The bytes for db2SystemId.
       */
      com.google.protobuf.ByteString
          getDb2SystemIdBytes();

      /**
       * <code>optional string db2_member_name = 15;</code>
       * @return Whether the db2MemberName field is set.
       */
      boolean hasDb2MemberName();
      /**
       * <code>optional string db2_member_name = 15;</code>
       * @return The db2MemberName.
       */
      java.lang.String getDb2MemberName();
      /**
       * <code>optional string db2_member_name = 15;</code>
       * @return The bytes for db2MemberName.
       */
      com.google.protobuf.ByteString
          getDb2MemberNameBytes();

      /**
       * <code>optional string db2_group_name = 16;</code>
       * @return Whether the db2GroupName field is set.
       */
      boolean hasDb2GroupName();
      /**
       * <code>optional string db2_group_name = 16;</code>
       * @return The db2GroupName.
       */
      java.lang.String getDb2GroupName();
      /**
       * <code>optional string db2_group_name = 16;</code>
       * @return The bytes for db2GroupName.
       */
      com.google.protobuf.ByteString
          getDb2GroupNameBytes();
    }
    /**
     * <pre>
     **
     * Deprecated/removed parsed client accounting info.
     * In the past, we used to parse the value of &#64;a client_ccounting string and
     * cached the result in the following structure. That caching had several issues,
     * so it is no longer used. Although, Google Protobuf supports removal of attributes
     * (see https://developers.google.com/protocol-buffers/docs/proto#updating), this
     * only applies to the binary representation of a message. SQL history entries are
     * written as "debug string" so that we get human-readable files. If newer code
     * attempts to parse such a debug string again and finds a field for which no
     * definition exists, parsing stops and all subsequent fields are not read. Therefore,
     * we keep the definition for backward compatibility.
     * </pre>
     *
     * Protobuf type {@code SQLStatementDetailsData.ClientAccountingDetails}
     */
    public  static final class ClientAccountingDetails extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:SQLStatementDetailsData.ClientAccountingDetails)
        ClientAccountingDetailsOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use ClientAccountingDetails.newBuilder() to construct.
      private ClientAccountingDetails(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private ClientAccountingDetails() {
        clientProductId_ = "";
        clientLocationName_ = "";
        clientNetworkId_ = "";
        clientLuName_ = "";
        clientConnectionName_ = "";
        clientConnectionType_ = "";
        clientCorrelationId_ = "";
        clientAuthorizationId_ = "";
        clientWorkstation_ = "";
        clientApplication_ = "";
        clientUserId_ = "";
        clientPlanName_ = "";
        clientAccountingDetails_ = "";
        db2SystemId_ = "";
        db2MemberName_ = "";
        db2GroupName_ = "";
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new ClientAccountingDetails();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private ClientAccountingDetails(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000001;
                clientProductId_ = bs;
                break;
              }
              case 18: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000002;
                clientLocationName_ = bs;
                break;
              }
              case 26: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000004;
                clientNetworkId_ = bs;
                break;
              }
              case 34: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000008;
                clientLuName_ = bs;
                break;
              }
              case 42: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000010;
                clientConnectionName_ = bs;
                break;
              }
              case 50: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000020;
                clientConnectionType_ = bs;
                break;
              }
              case 58: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000040;
                clientCorrelationId_ = bs;
                break;
              }
              case 66: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000080;
                clientAuthorizationId_ = bs;
                break;
              }
              case 74: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000100;
                clientWorkstation_ = bs;
                break;
              }
              case 82: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000200;
                clientApplication_ = bs;
                break;
              }
              case 90: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000400;
                clientUserId_ = bs;
                break;
              }
              case 98: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000800;
                clientPlanName_ = bs;
                break;
              }
              case 106: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00001000;
                clientAccountingDetails_ = bs;
                break;
              }
              case 114: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00002000;
                db2SystemId_ = bs;
                break;
              }
              case 122: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00004000;
                db2MemberName_ = bs;
                break;
              }
              case 130: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00008000;
                db2GroupName_ = bs;
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SQLStatementDetails.internal_static_SQLStatementDetailsData_ClientAccountingDetails_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SQLStatementDetails.internal_static_SQLStatementDetailsData_ClientAccountingDetails_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails.class, SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails.Builder.class);
      }

      private int bitField0_;
      public static final int CLIENT_PRODUCT_ID_FIELD_NUMBER = 1;
      private volatile java.lang.Object clientProductId_;
      /**
       * <code>optional string client_product_id = 1;</code>
       * @return Whether the clientProductId field is set.
       */
      public boolean hasClientProductId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional string client_product_id = 1;</code>
       * @return The clientProductId.
       */
      public java.lang.String getClientProductId() {
        java.lang.Object ref = clientProductId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            clientProductId_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string client_product_id = 1;</code>
       * @return The bytes for clientProductId.
       */
      public com.google.protobuf.ByteString
          getClientProductIdBytes() {
        java.lang.Object ref = clientProductId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          clientProductId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int CLIENT_LOCATION_NAME_FIELD_NUMBER = 2;
      private volatile java.lang.Object clientLocationName_;
      /**
       * <code>optional string client_location_name = 2;</code>
       * @return Whether the clientLocationName field is set.
       */
      public boolean hasClientLocationName() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional string client_location_name = 2;</code>
       * @return The clientLocationName.
       */
      public java.lang.String getClientLocationName() {
        java.lang.Object ref = clientLocationName_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            clientLocationName_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string client_location_name = 2;</code>
       * @return The bytes for clientLocationName.
       */
      public com.google.protobuf.ByteString
          getClientLocationNameBytes() {
        java.lang.Object ref = clientLocationName_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          clientLocationName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int CLIENT_NETWORK_ID_FIELD_NUMBER = 3;
      private volatile java.lang.Object clientNetworkId_;
      /**
       * <code>optional string client_network_id = 3;</code>
       * @return Whether the clientNetworkId field is set.
       */
      public boolean hasClientNetworkId() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional string client_network_id = 3;</code>
       * @return The clientNetworkId.
       */
      public java.lang.String getClientNetworkId() {
        java.lang.Object ref = clientNetworkId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            clientNetworkId_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string client_network_id = 3;</code>
       * @return The bytes for clientNetworkId.
       */
      public com.google.protobuf.ByteString
          getClientNetworkIdBytes() {
        java.lang.Object ref = clientNetworkId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          clientNetworkId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int CLIENT_LU_NAME_FIELD_NUMBER = 4;
      private volatile java.lang.Object clientLuName_;
      /**
       * <code>optional string client_lu_name = 4;</code>
       * @return Whether the clientLuName field is set.
       */
      public boolean hasClientLuName() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>optional string client_lu_name = 4;</code>
       * @return The clientLuName.
       */
      public java.lang.String getClientLuName() {
        java.lang.Object ref = clientLuName_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            clientLuName_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string client_lu_name = 4;</code>
       * @return The bytes for clientLuName.
       */
      public com.google.protobuf.ByteString
          getClientLuNameBytes() {
        java.lang.Object ref = clientLuName_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          clientLuName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int CLIENT_CONNECTION_NAME_FIELD_NUMBER = 5;
      private volatile java.lang.Object clientConnectionName_;
      /**
       * <code>optional string client_connection_name = 5;</code>
       * @return Whether the clientConnectionName field is set.
       */
      public boolean hasClientConnectionName() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <code>optional string client_connection_name = 5;</code>
       * @return The clientConnectionName.
       */
      public java.lang.String getClientConnectionName() {
        java.lang.Object ref = clientConnectionName_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            clientConnectionName_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string client_connection_name = 5;</code>
       * @return The bytes for clientConnectionName.
       */
      public com.google.protobuf.ByteString
          getClientConnectionNameBytes() {
        java.lang.Object ref = clientConnectionName_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          clientConnectionName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int CLIENT_CONNECTION_TYPE_FIELD_NUMBER = 6;
      private volatile java.lang.Object clientConnectionType_;
      /**
       * <code>optional string client_connection_type = 6;</code>
       * @return Whether the clientConnectionType field is set.
       */
      public boolean hasClientConnectionType() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <code>optional string client_connection_type = 6;</code>
       * @return The clientConnectionType.
       */
      public java.lang.String getClientConnectionType() {
        java.lang.Object ref = clientConnectionType_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            clientConnectionType_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string client_connection_type = 6;</code>
       * @return The bytes for clientConnectionType.
       */
      public com.google.protobuf.ByteString
          getClientConnectionTypeBytes() {
        java.lang.Object ref = clientConnectionType_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          clientConnectionType_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int CLIENT_CORRELATION_ID_FIELD_NUMBER = 7;
      private volatile java.lang.Object clientCorrelationId_;
      /**
       * <code>optional string client_correlation_id = 7;</code>
       * @return Whether the clientCorrelationId field is set.
       */
      public boolean hasClientCorrelationId() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <code>optional string client_correlation_id = 7;</code>
       * @return The clientCorrelationId.
       */
      public java.lang.String getClientCorrelationId() {
        java.lang.Object ref = clientCorrelationId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            clientCorrelationId_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string client_correlation_id = 7;</code>
       * @return The bytes for clientCorrelationId.
       */
      public com.google.protobuf.ByteString
          getClientCorrelationIdBytes() {
        java.lang.Object ref = clientCorrelationId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          clientCorrelationId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int CLIENT_AUTHORIZATION_ID_FIELD_NUMBER = 8;
      private volatile java.lang.Object clientAuthorizationId_;
      /**
       * <code>optional string client_authorization_id = 8;</code>
       * @return Whether the clientAuthorizationId field is set.
       */
      public boolean hasClientAuthorizationId() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <code>optional string client_authorization_id = 8;</code>
       * @return The clientAuthorizationId.
       */
      public java.lang.String getClientAuthorizationId() {
        java.lang.Object ref = clientAuthorizationId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            clientAuthorizationId_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string client_authorization_id = 8;</code>
       * @return The bytes for clientAuthorizationId.
       */
      public com.google.protobuf.ByteString
          getClientAuthorizationIdBytes() {
        java.lang.Object ref = clientAuthorizationId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          clientAuthorizationId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int CLIENT_WORKSTATION_FIELD_NUMBER = 9;
      private volatile java.lang.Object clientWorkstation_;
      /**
       * <code>optional string client_workstation = 9;</code>
       * @return Whether the clientWorkstation field is set.
       */
      public boolean hasClientWorkstation() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <code>optional string client_workstation = 9;</code>
       * @return The clientWorkstation.
       */
      public java.lang.String getClientWorkstation() {
        java.lang.Object ref = clientWorkstation_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            clientWorkstation_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string client_workstation = 9;</code>
       * @return The bytes for clientWorkstation.
       */
      public com.google.protobuf.ByteString
          getClientWorkstationBytes() {
        java.lang.Object ref = clientWorkstation_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          clientWorkstation_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int CLIENT_APPLICATION_FIELD_NUMBER = 10;
      private volatile java.lang.Object clientApplication_;
      /**
       * <code>optional string client_application = 10;</code>
       * @return Whether the clientApplication field is set.
       */
      public boolean hasClientApplication() {
        return ((bitField0_ & 0x00000200) != 0);
      }
      /**
       * <code>optional string client_application = 10;</code>
       * @return The clientApplication.
       */
      public java.lang.String getClientApplication() {
        java.lang.Object ref = clientApplication_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            clientApplication_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string client_application = 10;</code>
       * @return The bytes for clientApplication.
       */
      public com.google.protobuf.ByteString
          getClientApplicationBytes() {
        java.lang.Object ref = clientApplication_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          clientApplication_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int CLIENT_USER_ID_FIELD_NUMBER = 11;
      private volatile java.lang.Object clientUserId_;
      /**
       * <code>optional string client_user_id = 11;</code>
       * @return Whether the clientUserId field is set.
       */
      public boolean hasClientUserId() {
        return ((bitField0_ & 0x00000400) != 0);
      }
      /**
       * <code>optional string client_user_id = 11;</code>
       * @return The clientUserId.
       */
      public java.lang.String getClientUserId() {
        java.lang.Object ref = clientUserId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            clientUserId_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string client_user_id = 11;</code>
       * @return The bytes for clientUserId.
       */
      public com.google.protobuf.ByteString
          getClientUserIdBytes() {
        java.lang.Object ref = clientUserId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          clientUserId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int CLIENT_PLAN_NAME_FIELD_NUMBER = 12;
      private volatile java.lang.Object clientPlanName_;
      /**
       * <code>optional string client_plan_name = 12;</code>
       * @return Whether the clientPlanName field is set.
       */
      public boolean hasClientPlanName() {
        return ((bitField0_ & 0x00000800) != 0);
      }
      /**
       * <code>optional string client_plan_name = 12;</code>
       * @return The clientPlanName.
       */
      public java.lang.String getClientPlanName() {
        java.lang.Object ref = clientPlanName_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            clientPlanName_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string client_plan_name = 12;</code>
       * @return The bytes for clientPlanName.
       */
      public com.google.protobuf.ByteString
          getClientPlanNameBytes() {
        java.lang.Object ref = clientPlanName_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          clientPlanName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int CLIENT_ACCOUNTING_DETAILS_FIELD_NUMBER = 13;
      private volatile java.lang.Object clientAccountingDetails_;
      /**
       * <code>optional string client_accounting_details = 13;</code>
       * @return Whether the clientAccountingDetails field is set.
       */
      public boolean hasClientAccountingDetails() {
        return ((bitField0_ & 0x00001000) != 0);
      }
      /**
       * <code>optional string client_accounting_details = 13;</code>
       * @return The clientAccountingDetails.
       */
      public java.lang.String getClientAccountingDetails() {
        java.lang.Object ref = clientAccountingDetails_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            clientAccountingDetails_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string client_accounting_details = 13;</code>
       * @return The bytes for clientAccountingDetails.
       */
      public com.google.protobuf.ByteString
          getClientAccountingDetailsBytes() {
        java.lang.Object ref = clientAccountingDetails_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          clientAccountingDetails_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int DB2_SYSTEM_ID_FIELD_NUMBER = 14;
      private volatile java.lang.Object db2SystemId_;
      /**
       * <code>optional string db2_system_id = 14;</code>
       * @return Whether the db2SystemId field is set.
       */
      public boolean hasDb2SystemId() {
        return ((bitField0_ & 0x00002000) != 0);
      }
      /**
       * <code>optional string db2_system_id = 14;</code>
       * @return The db2SystemId.
       */
      public java.lang.String getDb2SystemId() {
        java.lang.Object ref = db2SystemId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            db2SystemId_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string db2_system_id = 14;</code>
       * @return The bytes for db2SystemId.
       */
      public com.google.protobuf.ByteString
          getDb2SystemIdBytes() {
        java.lang.Object ref = db2SystemId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          db2SystemId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int DB2_MEMBER_NAME_FIELD_NUMBER = 15;
      private volatile java.lang.Object db2MemberName_;
      /**
       * <code>optional string db2_member_name = 15;</code>
       * @return Whether the db2MemberName field is set.
       */
      public boolean hasDb2MemberName() {
        return ((bitField0_ & 0x00004000) != 0);
      }
      /**
       * <code>optional string db2_member_name = 15;</code>
       * @return The db2MemberName.
       */
      public java.lang.String getDb2MemberName() {
        java.lang.Object ref = db2MemberName_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            db2MemberName_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string db2_member_name = 15;</code>
       * @return The bytes for db2MemberName.
       */
      public com.google.protobuf.ByteString
          getDb2MemberNameBytes() {
        java.lang.Object ref = db2MemberName_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          db2MemberName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int DB2_GROUP_NAME_FIELD_NUMBER = 16;
      private volatile java.lang.Object db2GroupName_;
      /**
       * <code>optional string db2_group_name = 16;</code>
       * @return Whether the db2GroupName field is set.
       */
      public boolean hasDb2GroupName() {
        return ((bitField0_ & 0x00008000) != 0);
      }
      /**
       * <code>optional string db2_group_name = 16;</code>
       * @return The db2GroupName.
       */
      public java.lang.String getDb2GroupName() {
        java.lang.Object ref = db2GroupName_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            db2GroupName_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string db2_group_name = 16;</code>
       * @return The bytes for db2GroupName.
       */
      public com.google.protobuf.ByteString
          getDb2GroupNameBytes() {
        java.lang.Object ref = db2GroupName_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          db2GroupName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, clientProductId_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, clientLocationName_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 3, clientNetworkId_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 4, clientLuName_);
        }
        if (((bitField0_ & 0x00000010) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 5, clientConnectionName_);
        }
        if (((bitField0_ & 0x00000020) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 6, clientConnectionType_);
        }
        if (((bitField0_ & 0x00000040) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 7, clientCorrelationId_);
        }
        if (((bitField0_ & 0x00000080) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 8, clientAuthorizationId_);
        }
        if (((bitField0_ & 0x00000100) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 9, clientWorkstation_);
        }
        if (((bitField0_ & 0x00000200) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 10, clientApplication_);
        }
        if (((bitField0_ & 0x00000400) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 11, clientUserId_);
        }
        if (((bitField0_ & 0x00000800) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 12, clientPlanName_);
        }
        if (((bitField0_ & 0x00001000) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 13, clientAccountingDetails_);
        }
        if (((bitField0_ & 0x00002000) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 14, db2SystemId_);
        }
        if (((bitField0_ & 0x00004000) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 15, db2MemberName_);
        }
        if (((bitField0_ & 0x00008000) != 0)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 16, db2GroupName_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, clientProductId_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, clientLocationName_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, clientNetworkId_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, clientLuName_);
        }
        if (((bitField0_ & 0x00000010) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, clientConnectionName_);
        }
        if (((bitField0_ & 0x00000020) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, clientConnectionType_);
        }
        if (((bitField0_ & 0x00000040) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, clientCorrelationId_);
        }
        if (((bitField0_ & 0x00000080) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(8, clientAuthorizationId_);
        }
        if (((bitField0_ & 0x00000100) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(9, clientWorkstation_);
        }
        if (((bitField0_ & 0x00000200) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(10, clientApplication_);
        }
        if (((bitField0_ & 0x00000400) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(11, clientUserId_);
        }
        if (((bitField0_ & 0x00000800) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(12, clientPlanName_);
        }
        if (((bitField0_ & 0x00001000) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(13, clientAccountingDetails_);
        }
        if (((bitField0_ & 0x00002000) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(14, db2SystemId_);
        }
        if (((bitField0_ & 0x00004000) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(15, db2MemberName_);
        }
        if (((bitField0_ & 0x00008000) != 0)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(16, db2GroupName_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails)) {
          return super.equals(obj);
        }
        SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails other = (SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails) obj;

        if (hasClientProductId() != other.hasClientProductId()) return false;
        if (hasClientProductId()) {
          if (!getClientProductId()
              .equals(other.getClientProductId())) return false;
        }
        if (hasClientLocationName() != other.hasClientLocationName()) return false;
        if (hasClientLocationName()) {
          if (!getClientLocationName()
              .equals(other.getClientLocationName())) return false;
        }
        if (hasClientNetworkId() != other.hasClientNetworkId()) return false;
        if (hasClientNetworkId()) {
          if (!getClientNetworkId()
              .equals(other.getClientNetworkId())) return false;
        }
        if (hasClientLuName() != other.hasClientLuName()) return false;
        if (hasClientLuName()) {
          if (!getClientLuName()
              .equals(other.getClientLuName())) return false;
        }
        if (hasClientConnectionName() != other.hasClientConnectionName()) return false;
        if (hasClientConnectionName()) {
          if (!getClientConnectionName()
              .equals(other.getClientConnectionName())) return false;
        }
        if (hasClientConnectionType() != other.hasClientConnectionType()) return false;
        if (hasClientConnectionType()) {
          if (!getClientConnectionType()
              .equals(other.getClientConnectionType())) return false;
        }
        if (hasClientCorrelationId() != other.hasClientCorrelationId()) return false;
        if (hasClientCorrelationId()) {
          if (!getClientCorrelationId()
              .equals(other.getClientCorrelationId())) return false;
        }
        if (hasClientAuthorizationId() != other.hasClientAuthorizationId()) return false;
        if (hasClientAuthorizationId()) {
          if (!getClientAuthorizationId()
              .equals(other.getClientAuthorizationId())) return false;
        }
        if (hasClientWorkstation() != other.hasClientWorkstation()) return false;
        if (hasClientWorkstation()) {
          if (!getClientWorkstation()
              .equals(other.getClientWorkstation())) return false;
        }
        if (hasClientApplication() != other.hasClientApplication()) return false;
        if (hasClientApplication()) {
          if (!getClientApplication()
              .equals(other.getClientApplication())) return false;
        }
        if (hasClientUserId() != other.hasClientUserId()) return false;
        if (hasClientUserId()) {
          if (!getClientUserId()
              .equals(other.getClientUserId())) return false;
        }
        if (hasClientPlanName() != other.hasClientPlanName()) return false;
        if (hasClientPlanName()) {
          if (!getClientPlanName()
              .equals(other.getClientPlanName())) return false;
        }
        if (hasClientAccountingDetails() != other.hasClientAccountingDetails()) return false;
        if (hasClientAccountingDetails()) {
          if (!getClientAccountingDetails()
              .equals(other.getClientAccountingDetails())) return false;
        }
        if (hasDb2SystemId() != other.hasDb2SystemId()) return false;
        if (hasDb2SystemId()) {
          if (!getDb2SystemId()
              .equals(other.getDb2SystemId())) return false;
        }
        if (hasDb2MemberName() != other.hasDb2MemberName()) return false;
        if (hasDb2MemberName()) {
          if (!getDb2MemberName()
              .equals(other.getDb2MemberName())) return false;
        }
        if (hasDb2GroupName() != other.hasDb2GroupName()) return false;
        if (hasDb2GroupName()) {
          if (!getDb2GroupName()
              .equals(other.getDb2GroupName())) return false;
        }
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasClientProductId()) {
          hash = (37 * hash) + CLIENT_PRODUCT_ID_FIELD_NUMBER;
          hash = (53 * hash) + getClientProductId().hashCode();
        }
        if (hasClientLocationName()) {
          hash = (37 * hash) + CLIENT_LOCATION_NAME_FIELD_NUMBER;
          hash = (53 * hash) + getClientLocationName().hashCode();
        }
        if (hasClientNetworkId()) {
          hash = (37 * hash) + CLIENT_NETWORK_ID_FIELD_NUMBER;
          hash = (53 * hash) + getClientNetworkId().hashCode();
        }
        if (hasClientLuName()) {
          hash = (37 * hash) + CLIENT_LU_NAME_FIELD_NUMBER;
          hash = (53 * hash) + getClientLuName().hashCode();
        }
        if (hasClientConnectionName()) {
          hash = (37 * hash) + CLIENT_CONNECTION_NAME_FIELD_NUMBER;
          hash = (53 * hash) + getClientConnectionName().hashCode();
        }
        if (hasClientConnectionType()) {
          hash = (37 * hash) + CLIENT_CONNECTION_TYPE_FIELD_NUMBER;
          hash = (53 * hash) + getClientConnectionType().hashCode();
        }
        if (hasClientCorrelationId()) {
          hash = (37 * hash) + CLIENT_CORRELATION_ID_FIELD_NUMBER;
          hash = (53 * hash) + getClientCorrelationId().hashCode();
        }
        if (hasClientAuthorizationId()) {
          hash = (37 * hash) + CLIENT_AUTHORIZATION_ID_FIELD_NUMBER;
          hash = (53 * hash) + getClientAuthorizationId().hashCode();
        }
        if (hasClientWorkstation()) {
          hash = (37 * hash) + CLIENT_WORKSTATION_FIELD_NUMBER;
          hash = (53 * hash) + getClientWorkstation().hashCode();
        }
        if (hasClientApplication()) {
          hash = (37 * hash) + CLIENT_APPLICATION_FIELD_NUMBER;
          hash = (53 * hash) + getClientApplication().hashCode();
        }
        if (hasClientUserId()) {
          hash = (37 * hash) + CLIENT_USER_ID_FIELD_NUMBER;
          hash = (53 * hash) + getClientUserId().hashCode();
        }
        if (hasClientPlanName()) {
          hash = (37 * hash) + CLIENT_PLAN_NAME_FIELD_NUMBER;
          hash = (53 * hash) + getClientPlanName().hashCode();
        }
        if (hasClientAccountingDetails()) {
          hash = (37 * hash) + CLIENT_ACCOUNTING_DETAILS_FIELD_NUMBER;
          hash = (53 * hash) + getClientAccountingDetails().hashCode();
        }
        if (hasDb2SystemId()) {
          hash = (37 * hash) + DB2_SYSTEM_ID_FIELD_NUMBER;
          hash = (53 * hash) + getDb2SystemId().hashCode();
        }
        if (hasDb2MemberName()) {
          hash = (37 * hash) + DB2_MEMBER_NAME_FIELD_NUMBER;
          hash = (53 * hash) + getDb2MemberName().hashCode();
        }
        if (hasDb2GroupName()) {
          hash = (37 * hash) + DB2_GROUP_NAME_FIELD_NUMBER;
          hash = (53 * hash) + getDb2GroupName().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       **
       * Deprecated/removed parsed client accounting info.
       * In the past, we used to parse the value of &#64;a client_ccounting string and
       * cached the result in the following structure. That caching had several issues,
       * so it is no longer used. Although, Google Protobuf supports removal of attributes
       * (see https://developers.google.com/protocol-buffers/docs/proto#updating), this
       * only applies to the binary representation of a message. SQL history entries are
       * written as "debug string" so that we get human-readable files. If newer code
       * attempts to parse such a debug string again and finds a field for which no
       * definition exists, parsing stops and all subsequent fields are not read. Therefore,
       * we keep the definition for backward compatibility.
       * </pre>
       *
       * Protobuf type {@code SQLStatementDetailsData.ClientAccountingDetails}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:SQLStatementDetailsData.ClientAccountingDetails)
          SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetailsOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return SQLStatementDetails.internal_static_SQLStatementDetailsData_ClientAccountingDetails_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return SQLStatementDetails.internal_static_SQLStatementDetailsData_ClientAccountingDetails_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails.class, SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails.Builder.class);
        }

        // Construct using SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          clientProductId_ = "";
          bitField0_ = (bitField0_ & ~0x00000001);
          clientLocationName_ = "";
          bitField0_ = (bitField0_ & ~0x00000002);
          clientNetworkId_ = "";
          bitField0_ = (bitField0_ & ~0x00000004);
          clientLuName_ = "";
          bitField0_ = (bitField0_ & ~0x00000008);
          clientConnectionName_ = "";
          bitField0_ = (bitField0_ & ~0x00000010);
          clientConnectionType_ = "";
          bitField0_ = (bitField0_ & ~0x00000020);
          clientCorrelationId_ = "";
          bitField0_ = (bitField0_ & ~0x00000040);
          clientAuthorizationId_ = "";
          bitField0_ = (bitField0_ & ~0x00000080);
          clientWorkstation_ = "";
          bitField0_ = (bitField0_ & ~0x00000100);
          clientApplication_ = "";
          bitField0_ = (bitField0_ & ~0x00000200);
          clientUserId_ = "";
          bitField0_ = (bitField0_ & ~0x00000400);
          clientPlanName_ = "";
          bitField0_ = (bitField0_ & ~0x00000800);
          clientAccountingDetails_ = "";
          bitField0_ = (bitField0_ & ~0x00001000);
          db2SystemId_ = "";
          bitField0_ = (bitField0_ & ~0x00002000);
          db2MemberName_ = "";
          bitField0_ = (bitField0_ & ~0x00004000);
          db2GroupName_ = "";
          bitField0_ = (bitField0_ & ~0x00008000);
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return SQLStatementDetails.internal_static_SQLStatementDetailsData_ClientAccountingDetails_descriptor;
        }

        @java.lang.Override
        public SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails getDefaultInstanceForType() {
          return SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails.getDefaultInstance();
        }

        @java.lang.Override
        public SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails build() {
          SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails buildPartial() {
          SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails result = new SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            to_bitField0_ |= 0x00000001;
          }
          result.clientProductId_ = clientProductId_;
          if (((from_bitField0_ & 0x00000002) != 0)) {
            to_bitField0_ |= 0x00000002;
          }
          result.clientLocationName_ = clientLocationName_;
          if (((from_bitField0_ & 0x00000004) != 0)) {
            to_bitField0_ |= 0x00000004;
          }
          result.clientNetworkId_ = clientNetworkId_;
          if (((from_bitField0_ & 0x00000008) != 0)) {
            to_bitField0_ |= 0x00000008;
          }
          result.clientLuName_ = clientLuName_;
          if (((from_bitField0_ & 0x00000010) != 0)) {
            to_bitField0_ |= 0x00000010;
          }
          result.clientConnectionName_ = clientConnectionName_;
          if (((from_bitField0_ & 0x00000020) != 0)) {
            to_bitField0_ |= 0x00000020;
          }
          result.clientConnectionType_ = clientConnectionType_;
          if (((from_bitField0_ & 0x00000040) != 0)) {
            to_bitField0_ |= 0x00000040;
          }
          result.clientCorrelationId_ = clientCorrelationId_;
          if (((from_bitField0_ & 0x00000080) != 0)) {
            to_bitField0_ |= 0x00000080;
          }
          result.clientAuthorizationId_ = clientAuthorizationId_;
          if (((from_bitField0_ & 0x00000100) != 0)) {
            to_bitField0_ |= 0x00000100;
          }
          result.clientWorkstation_ = clientWorkstation_;
          if (((from_bitField0_ & 0x00000200) != 0)) {
            to_bitField0_ |= 0x00000200;
          }
          result.clientApplication_ = clientApplication_;
          if (((from_bitField0_ & 0x00000400) != 0)) {
            to_bitField0_ |= 0x00000400;
          }
          result.clientUserId_ = clientUserId_;
          if (((from_bitField0_ & 0x00000800) != 0)) {
            to_bitField0_ |= 0x00000800;
          }
          result.clientPlanName_ = clientPlanName_;
          if (((from_bitField0_ & 0x00001000) != 0)) {
            to_bitField0_ |= 0x00001000;
          }
          result.clientAccountingDetails_ = clientAccountingDetails_;
          if (((from_bitField0_ & 0x00002000) != 0)) {
            to_bitField0_ |= 0x00002000;
          }
          result.db2SystemId_ = db2SystemId_;
          if (((from_bitField0_ & 0x00004000) != 0)) {
            to_bitField0_ |= 0x00004000;
          }
          result.db2MemberName_ = db2MemberName_;
          if (((from_bitField0_ & 0x00008000) != 0)) {
            to_bitField0_ |= 0x00008000;
          }
          result.db2GroupName_ = db2GroupName_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails) {
            return mergeFrom((SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails other) {
          if (other == SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails.getDefaultInstance()) return this;
          if (other.hasClientProductId()) {
            bitField0_ |= 0x00000001;
            clientProductId_ = other.clientProductId_;
            onChanged();
          }
          if (other.hasClientLocationName()) {
            bitField0_ |= 0x00000002;
            clientLocationName_ = other.clientLocationName_;
            onChanged();
          }
          if (other.hasClientNetworkId()) {
            bitField0_ |= 0x00000004;
            clientNetworkId_ = other.clientNetworkId_;
            onChanged();
          }
          if (other.hasClientLuName()) {
            bitField0_ |= 0x00000008;
            clientLuName_ = other.clientLuName_;
            onChanged();
          }
          if (other.hasClientConnectionName()) {
            bitField0_ |= 0x00000010;
            clientConnectionName_ = other.clientConnectionName_;
            onChanged();
          }
          if (other.hasClientConnectionType()) {
            bitField0_ |= 0x00000020;
            clientConnectionType_ = other.clientConnectionType_;
            onChanged();
          }
          if (other.hasClientCorrelationId()) {
            bitField0_ |= 0x00000040;
            clientCorrelationId_ = other.clientCorrelationId_;
            onChanged();
          }
          if (other.hasClientAuthorizationId()) {
            bitField0_ |= 0x00000080;
            clientAuthorizationId_ = other.clientAuthorizationId_;
            onChanged();
          }
          if (other.hasClientWorkstation()) {
            bitField0_ |= 0x00000100;
            clientWorkstation_ = other.clientWorkstation_;
            onChanged();
          }
          if (other.hasClientApplication()) {
            bitField0_ |= 0x00000200;
            clientApplication_ = other.clientApplication_;
            onChanged();
          }
          if (other.hasClientUserId()) {
            bitField0_ |= 0x00000400;
            clientUserId_ = other.clientUserId_;
            onChanged();
          }
          if (other.hasClientPlanName()) {
            bitField0_ |= 0x00000800;
            clientPlanName_ = other.clientPlanName_;
            onChanged();
          }
          if (other.hasClientAccountingDetails()) {
            bitField0_ |= 0x00001000;
            clientAccountingDetails_ = other.clientAccountingDetails_;
            onChanged();
          }
          if (other.hasDb2SystemId()) {
            bitField0_ |= 0x00002000;
            db2SystemId_ = other.db2SystemId_;
            onChanged();
          }
          if (other.hasDb2MemberName()) {
            bitField0_ |= 0x00004000;
            db2MemberName_ = other.db2MemberName_;
            onChanged();
          }
          if (other.hasDb2GroupName()) {
            bitField0_ |= 0x00008000;
            db2GroupName_ = other.db2GroupName_;
            onChanged();
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private java.lang.Object clientProductId_ = "";
        /**
         * <code>optional string client_product_id = 1;</code>
         * @return Whether the clientProductId field is set.
         */
        public boolean hasClientProductId() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <code>optional string client_product_id = 1;</code>
         * @return The clientProductId.
         */
        public java.lang.String getClientProductId() {
          java.lang.Object ref = clientProductId_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              clientProductId_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string client_product_id = 1;</code>
         * @return The bytes for clientProductId.
         */
        public com.google.protobuf.ByteString
            getClientProductIdBytes() {
          java.lang.Object ref = clientProductId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b =
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            clientProductId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string client_product_id = 1;</code>
         * @param value The clientProductId to set.
         * @return This builder for chaining.
         */
        public Builder setClientProductId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          clientProductId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string client_product_id = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearClientProductId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          clientProductId_ = getDefaultInstance().getClientProductId();
          onChanged();
          return this;
        }
        /**
         * <code>optional string client_product_id = 1;</code>
         * @param value The bytes for clientProductId to set.
         * @return This builder for chaining.
         */
        public Builder setClientProductIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          clientProductId_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object clientLocationName_ = "";
        /**
         * <code>optional string client_location_name = 2;</code>
         * @return Whether the clientLocationName field is set.
         */
        public boolean hasClientLocationName() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <code>optional string client_location_name = 2;</code>
         * @return The clientLocationName.
         */
        public java.lang.String getClientLocationName() {
          java.lang.Object ref = clientLocationName_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              clientLocationName_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string client_location_name = 2;</code>
         * @return The bytes for clientLocationName.
         */
        public com.google.protobuf.ByteString
            getClientLocationNameBytes() {
          java.lang.Object ref = clientLocationName_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b =
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            clientLocationName_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string client_location_name = 2;</code>
         * @param value The clientLocationName to set.
         * @return This builder for chaining.
         */
        public Builder setClientLocationName(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          clientLocationName_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string client_location_name = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearClientLocationName() {
          bitField0_ = (bitField0_ & ~0x00000002);
          clientLocationName_ = getDefaultInstance().getClientLocationName();
          onChanged();
          return this;
        }
        /**
         * <code>optional string client_location_name = 2;</code>
         * @param value The bytes for clientLocationName to set.
         * @return This builder for chaining.
         */
        public Builder setClientLocationNameBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          clientLocationName_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object clientNetworkId_ = "";
        /**
         * <code>optional string client_network_id = 3;</code>
         * @return Whether the clientNetworkId field is set.
         */
        public boolean hasClientNetworkId() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <code>optional string client_network_id = 3;</code>
         * @return The clientNetworkId.
         */
        public java.lang.String getClientNetworkId() {
          java.lang.Object ref = clientNetworkId_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              clientNetworkId_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string client_network_id = 3;</code>
         * @return The bytes for clientNetworkId.
         */
        public com.google.protobuf.ByteString
            getClientNetworkIdBytes() {
          java.lang.Object ref = clientNetworkId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b =
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            clientNetworkId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string client_network_id = 3;</code>
         * @param value The clientNetworkId to set.
         * @return This builder for chaining.
         */
        public Builder setClientNetworkId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
          clientNetworkId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string client_network_id = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearClientNetworkId() {
          bitField0_ = (bitField0_ & ~0x00000004);
          clientNetworkId_ = getDefaultInstance().getClientNetworkId();
          onChanged();
          return this;
        }
        /**
         * <code>optional string client_network_id = 3;</code>
         * @param value The bytes for clientNetworkId to set.
         * @return This builder for chaining.
         */
        public Builder setClientNetworkIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
          clientNetworkId_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object clientLuName_ = "";
        /**
         * <code>optional string client_lu_name = 4;</code>
         * @return Whether the clientLuName field is set.
         */
        public boolean hasClientLuName() {
          return ((bitField0_ & 0x00000008) != 0);
        }
        /**
         * <code>optional string client_lu_name = 4;</code>
         * @return The clientLuName.
         */
        public java.lang.String getClientLuName() {
          java.lang.Object ref = clientLuName_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              clientLuName_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string client_lu_name = 4;</code>
         * @return The bytes for clientLuName.
         */
        public com.google.protobuf.ByteString
            getClientLuNameBytes() {
          java.lang.Object ref = clientLuName_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b =
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            clientLuName_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string client_lu_name = 4;</code>
         * @param value The clientLuName to set.
         * @return This builder for chaining.
         */
        public Builder setClientLuName(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
          clientLuName_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string client_lu_name = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearClientLuName() {
          bitField0_ = (bitField0_ & ~0x00000008);
          clientLuName_ = getDefaultInstance().getClientLuName();
          onChanged();
          return this;
        }
        /**
         * <code>optional string client_lu_name = 4;</code>
         * @param value The bytes for clientLuName to set.
         * @return This builder for chaining.
         */
        public Builder setClientLuNameBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
          clientLuName_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object clientConnectionName_ = "";
        /**
         * <code>optional string client_connection_name = 5;</code>
         * @return Whether the clientConnectionName field is set.
         */
        public boolean hasClientConnectionName() {
          return ((bitField0_ & 0x00000010) != 0);
        }
        /**
         * <code>optional string client_connection_name = 5;</code>
         * @return The clientConnectionName.
         */
        public java.lang.String getClientConnectionName() {
          java.lang.Object ref = clientConnectionName_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              clientConnectionName_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string client_connection_name = 5;</code>
         * @return The bytes for clientConnectionName.
         */
        public com.google.protobuf.ByteString
            getClientConnectionNameBytes() {
          java.lang.Object ref = clientConnectionName_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b =
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            clientConnectionName_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string client_connection_name = 5;</code>
         * @param value The clientConnectionName to set.
         * @return This builder for chaining.
         */
        public Builder setClientConnectionName(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
          clientConnectionName_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string client_connection_name = 5;</code>
         * @return This builder for chaining.
         */
        public Builder clearClientConnectionName() {
          bitField0_ = (bitField0_ & ~0x00000010);
          clientConnectionName_ = getDefaultInstance().getClientConnectionName();
          onChanged();
          return this;
        }
        /**
         * <code>optional string client_connection_name = 5;</code>
         * @param value The bytes for clientConnectionName to set.
         * @return This builder for chaining.
         */
        public Builder setClientConnectionNameBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
          clientConnectionName_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object clientConnectionType_ = "";
        /**
         * <code>optional string client_connection_type = 6;</code>
         * @return Whether the clientConnectionType field is set.
         */
        public boolean hasClientConnectionType() {
          return ((bitField0_ & 0x00000020) != 0);
        }
        /**
         * <code>optional string client_connection_type = 6;</code>
         * @return The clientConnectionType.
         */
        public java.lang.String getClientConnectionType() {
          java.lang.Object ref = clientConnectionType_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              clientConnectionType_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string client_connection_type = 6;</code>
         * @return The bytes for clientConnectionType.
         */
        public com.google.protobuf.ByteString
            getClientConnectionTypeBytes() {
          java.lang.Object ref = clientConnectionType_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b =
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            clientConnectionType_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string client_connection_type = 6;</code>
         * @param value The clientConnectionType to set.
         * @return This builder for chaining.
         */
        public Builder setClientConnectionType(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
          clientConnectionType_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string client_connection_type = 6;</code>
         * @return This builder for chaining.
         */
        public Builder clearClientConnectionType() {
          bitField0_ = (bitField0_ & ~0x00000020);
          clientConnectionType_ = getDefaultInstance().getClientConnectionType();
          onChanged();
          return this;
        }
        /**
         * <code>optional string client_connection_type = 6;</code>
         * @param value The bytes for clientConnectionType to set.
         * @return This builder for chaining.
         */
        public Builder setClientConnectionTypeBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
          clientConnectionType_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object clientCorrelationId_ = "";
        /**
         * <code>optional string client_correlation_id = 7;</code>
         * @return Whether the clientCorrelationId field is set.
         */
        public boolean hasClientCorrelationId() {
          return ((bitField0_ & 0x00000040) != 0);
        }
        /**
         * <code>optional string client_correlation_id = 7;</code>
         * @return The clientCorrelationId.
         */
        public java.lang.String getClientCorrelationId() {
          java.lang.Object ref = clientCorrelationId_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              clientCorrelationId_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string client_correlation_id = 7;</code>
         * @return The bytes for clientCorrelationId.
         */
        public com.google.protobuf.ByteString
            getClientCorrelationIdBytes() {
          java.lang.Object ref = clientCorrelationId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b =
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            clientCorrelationId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string client_correlation_id = 7;</code>
         * @param value The clientCorrelationId to set.
         * @return This builder for chaining.
         */
        public Builder setClientCorrelationId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
          clientCorrelationId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string client_correlation_id = 7;</code>
         * @return This builder for chaining.
         */
        public Builder clearClientCorrelationId() {
          bitField0_ = (bitField0_ & ~0x00000040);
          clientCorrelationId_ = getDefaultInstance().getClientCorrelationId();
          onChanged();
          return this;
        }
        /**
         * <code>optional string client_correlation_id = 7;</code>
         * @param value The bytes for clientCorrelationId to set.
         * @return This builder for chaining.
         */
        public Builder setClientCorrelationIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
          clientCorrelationId_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object clientAuthorizationId_ = "";
        /**
         * <code>optional string client_authorization_id = 8;</code>
         * @return Whether the clientAuthorizationId field is set.
         */
        public boolean hasClientAuthorizationId() {
          return ((bitField0_ & 0x00000080) != 0);
        }
        /**
         * <code>optional string client_authorization_id = 8;</code>
         * @return The clientAuthorizationId.
         */
        public java.lang.String getClientAuthorizationId() {
          java.lang.Object ref = clientAuthorizationId_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              clientAuthorizationId_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string client_authorization_id = 8;</code>
         * @return The bytes for clientAuthorizationId.
         */
        public com.google.protobuf.ByteString
            getClientAuthorizationIdBytes() {
          java.lang.Object ref = clientAuthorizationId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b =
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            clientAuthorizationId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string client_authorization_id = 8;</code>
         * @param value The clientAuthorizationId to set.
         * @return This builder for chaining.
         */
        public Builder setClientAuthorizationId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
          clientAuthorizationId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string client_authorization_id = 8;</code>
         * @return This builder for chaining.
         */
        public Builder clearClientAuthorizationId() {
          bitField0_ = (bitField0_ & ~0x00000080);
          clientAuthorizationId_ = getDefaultInstance().getClientAuthorizationId();
          onChanged();
          return this;
        }
        /**
         * <code>optional string client_authorization_id = 8;</code>
         * @param value The bytes for clientAuthorizationId to set.
         * @return This builder for chaining.
         */
        public Builder setClientAuthorizationIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
          clientAuthorizationId_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object clientWorkstation_ = "";
        /**
         * <code>optional string client_workstation = 9;</code>
         * @return Whether the clientWorkstation field is set.
         */
        public boolean hasClientWorkstation() {
          return ((bitField0_ & 0x00000100) != 0);
        }
        /**
         * <code>optional string client_workstation = 9;</code>
         * @return The clientWorkstation.
         */
        public java.lang.String getClientWorkstation() {
          java.lang.Object ref = clientWorkstation_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              clientWorkstation_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string client_workstation = 9;</code>
         * @return The bytes for clientWorkstation.
         */
        public com.google.protobuf.ByteString
            getClientWorkstationBytes() {
          java.lang.Object ref = clientWorkstation_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b =
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            clientWorkstation_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string client_workstation = 9;</code>
         * @param value The clientWorkstation to set.
         * @return This builder for chaining.
         */
        public Builder setClientWorkstation(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000100;
          clientWorkstation_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string client_workstation = 9;</code>
         * @return This builder for chaining.
         */
        public Builder clearClientWorkstation() {
          bitField0_ = (bitField0_ & ~0x00000100);
          clientWorkstation_ = getDefaultInstance().getClientWorkstation();
          onChanged();
          return this;
        }
        /**
         * <code>optional string client_workstation = 9;</code>
         * @param value The bytes for clientWorkstation to set.
         * @return This builder for chaining.
         */
        public Builder setClientWorkstationBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000100;
          clientWorkstation_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object clientApplication_ = "";
        /**
         * <code>optional string client_application = 10;</code>
         * @return Whether the clientApplication field is set.
         */
        public boolean hasClientApplication() {
          return ((bitField0_ & 0x00000200) != 0);
        }
        /**
         * <code>optional string client_application = 10;</code>
         * @return The clientApplication.
         */
        public java.lang.String getClientApplication() {
          java.lang.Object ref = clientApplication_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              clientApplication_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string client_application = 10;</code>
         * @return The bytes for clientApplication.
         */
        public com.google.protobuf.ByteString
            getClientApplicationBytes() {
          java.lang.Object ref = clientApplication_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b =
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            clientApplication_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string client_application = 10;</code>
         * @param value The clientApplication to set.
         * @return This builder for chaining.
         */
        public Builder setClientApplication(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
          clientApplication_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string client_application = 10;</code>
         * @return This builder for chaining.
         */
        public Builder clearClientApplication() {
          bitField0_ = (bitField0_ & ~0x00000200);
          clientApplication_ = getDefaultInstance().getClientApplication();
          onChanged();
          return this;
        }
        /**
         * <code>optional string client_application = 10;</code>
         * @param value The bytes for clientApplication to set.
         * @return This builder for chaining.
         */
        public Builder setClientApplicationBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
          clientApplication_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object clientUserId_ = "";
        /**
         * <code>optional string client_user_id = 11;</code>
         * @return Whether the clientUserId field is set.
         */
        public boolean hasClientUserId() {
          return ((bitField0_ & 0x00000400) != 0);
        }
        /**
         * <code>optional string client_user_id = 11;</code>
         * @return The clientUserId.
         */
        public java.lang.String getClientUserId() {
          java.lang.Object ref = clientUserId_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              clientUserId_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string client_user_id = 11;</code>
         * @return The bytes for clientUserId.
         */
        public com.google.protobuf.ByteString
            getClientUserIdBytes() {
          java.lang.Object ref = clientUserId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b =
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            clientUserId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string client_user_id = 11;</code>
         * @param value The clientUserId to set.
         * @return This builder for chaining.
         */
        public Builder setClientUserId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000400;
          clientUserId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string client_user_id = 11;</code>
         * @return This builder for chaining.
         */
        public Builder clearClientUserId() {
          bitField0_ = (bitField0_ & ~0x00000400);
          clientUserId_ = getDefaultInstance().getClientUserId();
          onChanged();
          return this;
        }
        /**
         * <code>optional string client_user_id = 11;</code>
         * @param value The bytes for clientUserId to set.
         * @return This builder for chaining.
         */
        public Builder setClientUserIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000400;
          clientUserId_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object clientPlanName_ = "";
        /**
         * <code>optional string client_plan_name = 12;</code>
         * @return Whether the clientPlanName field is set.
         */
        public boolean hasClientPlanName() {
          return ((bitField0_ & 0x00000800) != 0);
        }
        /**
         * <code>optional string client_plan_name = 12;</code>
         * @return The clientPlanName.
         */
        public java.lang.String getClientPlanName() {
          java.lang.Object ref = clientPlanName_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              clientPlanName_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string client_plan_name = 12;</code>
         * @return The bytes for clientPlanName.
         */
        public com.google.protobuf.ByteString
            getClientPlanNameBytes() {
          java.lang.Object ref = clientPlanName_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b =
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            clientPlanName_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string client_plan_name = 12;</code>
         * @param value The clientPlanName to set.
         * @return This builder for chaining.
         */
        public Builder setClientPlanName(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
          clientPlanName_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string client_plan_name = 12;</code>
         * @return This builder for chaining.
         */
        public Builder clearClientPlanName() {
          bitField0_ = (bitField0_ & ~0x00000800);
          clientPlanName_ = getDefaultInstance().getClientPlanName();
          onChanged();
          return this;
        }
        /**
         * <code>optional string client_plan_name = 12;</code>
         * @param value The bytes for clientPlanName to set.
         * @return This builder for chaining.
         */
        public Builder setClientPlanNameBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
          clientPlanName_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object clientAccountingDetails_ = "";
        /**
         * <code>optional string client_accounting_details = 13;</code>
         * @return Whether the clientAccountingDetails field is set.
         */
        public boolean hasClientAccountingDetails() {
          return ((bitField0_ & 0x00001000) != 0);
        }
        /**
         * <code>optional string client_accounting_details = 13;</code>
         * @return The clientAccountingDetails.
         */
        public java.lang.String getClientAccountingDetails() {
          java.lang.Object ref = clientAccountingDetails_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              clientAccountingDetails_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string client_accounting_details = 13;</code>
         * @return The bytes for clientAccountingDetails.
         */
        public com.google.protobuf.ByteString
            getClientAccountingDetailsBytes() {
          java.lang.Object ref = clientAccountingDetails_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b =
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            clientAccountingDetails_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string client_accounting_details = 13;</code>
         * @param value The clientAccountingDetails to set.
         * @return This builder for chaining.
         */
        public Builder setClientAccountingDetails(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00001000;
          clientAccountingDetails_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string client_accounting_details = 13;</code>
         * @return This builder for chaining.
         */
        public Builder clearClientAccountingDetails() {
          bitField0_ = (bitField0_ & ~0x00001000);
          clientAccountingDetails_ = getDefaultInstance().getClientAccountingDetails();
          onChanged();
          return this;
        }
        /**
         * <code>optional string client_accounting_details = 13;</code>
         * @param value The bytes for clientAccountingDetails to set.
         * @return This builder for chaining.
         */
        public Builder setClientAccountingDetailsBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00001000;
          clientAccountingDetails_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object db2SystemId_ = "";
        /**
         * <code>optional string db2_system_id = 14;</code>
         * @return Whether the db2SystemId field is set.
         */
        public boolean hasDb2SystemId() {
          return ((bitField0_ & 0x00002000) != 0);
        }
        /**
         * <code>optional string db2_system_id = 14;</code>
         * @return The db2SystemId.
         */
        public java.lang.String getDb2SystemId() {
          java.lang.Object ref = db2SystemId_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              db2SystemId_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string db2_system_id = 14;</code>
         * @return The bytes for db2SystemId.
         */
        public com.google.protobuf.ByteString
            getDb2SystemIdBytes() {
          java.lang.Object ref = db2SystemId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b =
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            db2SystemId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string db2_system_id = 14;</code>
         * @param value The db2SystemId to set.
         * @return This builder for chaining.
         */
        public Builder setDb2SystemId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00002000;
          db2SystemId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string db2_system_id = 14;</code>
         * @return This builder for chaining.
         */
        public Builder clearDb2SystemId() {
          bitField0_ = (bitField0_ & ~0x00002000);
          db2SystemId_ = getDefaultInstance().getDb2SystemId();
          onChanged();
          return this;
        }
        /**
         * <code>optional string db2_system_id = 14;</code>
         * @param value The bytes for db2SystemId to set.
         * @return This builder for chaining.
         */
        public Builder setDb2SystemIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00002000;
          db2SystemId_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object db2MemberName_ = "";
        /**
         * <code>optional string db2_member_name = 15;</code>
         * @return Whether the db2MemberName field is set.
         */
        public boolean hasDb2MemberName() {
          return ((bitField0_ & 0x00004000) != 0);
        }
        /**
         * <code>optional string db2_member_name = 15;</code>
         * @return The db2MemberName.
         */
        public java.lang.String getDb2MemberName() {
          java.lang.Object ref = db2MemberName_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              db2MemberName_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string db2_member_name = 15;</code>
         * @return The bytes for db2MemberName.
         */
        public com.google.protobuf.ByteString
            getDb2MemberNameBytes() {
          java.lang.Object ref = db2MemberName_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b =
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            db2MemberName_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string db2_member_name = 15;</code>
         * @param value The db2MemberName to set.
         * @return This builder for chaining.
         */
        public Builder setDb2MemberName(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00004000;
          db2MemberName_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string db2_member_name = 15;</code>
         * @return This builder for chaining.
         */
        public Builder clearDb2MemberName() {
          bitField0_ = (bitField0_ & ~0x00004000);
          db2MemberName_ = getDefaultInstance().getDb2MemberName();
          onChanged();
          return this;
        }
        /**
         * <code>optional string db2_member_name = 15;</code>
         * @param value The bytes for db2MemberName to set.
         * @return This builder for chaining.
         */
        public Builder setDb2MemberNameBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00004000;
          db2MemberName_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object db2GroupName_ = "";
        /**
         * <code>optional string db2_group_name = 16;</code>
         * @return Whether the db2GroupName field is set.
         */
        public boolean hasDb2GroupName() {
          return ((bitField0_ & 0x00008000) != 0);
        }
        /**
         * <code>optional string db2_group_name = 16;</code>
         * @return The db2GroupName.
         */
        public java.lang.String getDb2GroupName() {
          java.lang.Object ref = db2GroupName_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              db2GroupName_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string db2_group_name = 16;</code>
         * @return The bytes for db2GroupName.
         */
        public com.google.protobuf.ByteString
            getDb2GroupNameBytes() {
          java.lang.Object ref = db2GroupName_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b =
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            db2GroupName_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string db2_group_name = 16;</code>
         * @param value The db2GroupName to set.
         * @return This builder for chaining.
         */
        public Builder setDb2GroupName(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00008000;
          db2GroupName_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string db2_group_name = 16;</code>
         * @return This builder for chaining.
         */
        public Builder clearDb2GroupName() {
          bitField0_ = (bitField0_ & ~0x00008000);
          db2GroupName_ = getDefaultInstance().getDb2GroupName();
          onChanged();
          return this;
        }
        /**
         * <code>optional string db2_group_name = 16;</code>
         * @param value The bytes for db2GroupName to set.
         * @return This builder for chaining.
         */
        public Builder setDb2GroupNameBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00008000;
          db2GroupName_ = value;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:SQLStatementDetailsData.ClientAccountingDetails)
      }

      // @@protoc_insertion_point(class_scope:SQLStatementDetailsData.ClientAccountingDetails)
      private static final SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails();
      }

      public static SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<ClientAccountingDetails>
          PARSER = new com.google.protobuf.AbstractParser<ClientAccountingDetails>() {
        @java.lang.Override
        public ClientAccountingDetails parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new ClientAccountingDetails(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<ClientAccountingDetails> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<ClientAccountingDetails> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int STATEMENT_ID_FIELD_NUMBER = 1;
    private long statementId_;
    /**
     * <pre>
     **
     * This ID is unique within the scope of a single &#64;c DatabaseSystem (aka a pairing)
     * only. The highest used statement ID is stored persistently in file
     * "last-statement-id" in the same directory where the SQL history files reside.
     * </pre>
     *
     * <code>optional uint64 statement_id = 1;</code>
     * @return Whether the statementId field is set.
     */
    public boolean hasStatementId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     **
     * This ID is unique within the scope of a single &#64;c DatabaseSystem (aka a pairing)
     * only. The highest used statement ID is stored persistently in file
     * "last-statement-id" in the same directory where the SQL history files reside.
     * </pre>
     *
     * <code>optional uint64 statement_id = 1;</code>
     * @return The statementId.
     */
    public long getStatementId() {
      return statementId_;
    }

    public static final int TASK_ID_FIELD_NUMBER = 2;
    private long taskId_;
    /**
     * <pre>
     **
     * ID of the task that executes the SQL statement. Note that task IDs are reset
     * upon restart of the accelerator.
     * </pre>
     *
     * <code>optional uint64 task_id = 2;</code>
     * @return Whether the taskId field is set.
     */
    public boolean hasTaskId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     **
     * ID of the task that executes the SQL statement. Note that task IDs are reset
     * upon restart of the accelerator.
     * </pre>
     *
     * <code>optional uint64 task_id = 2;</code>
     * @return The taskId.
     */
    public long getTaskId() {
      return taskId_;
    }

    public static final int DATABASE_SYSTEM_LOCATION_NAME_FIELD_NUMBER = 3;
    private volatile java.lang.Object databaseSystemLocationName_;
    /**
     * <pre>
     **
     * Each client must provide a unique location name when the pairing is established.
     * That location name is stored for each SQL statement here.
     * </pre>
     *
     * <code>optional string database_system_location_name = 3;</code>
     * @return Whether the databaseSystemLocationName field is set.
     */
    public boolean hasDatabaseSystemLocationName() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     **
     * Each client must provide a unique location name when the pairing is established.
     * That location name is stored for each SQL statement here.
     * </pre>
     *
     * <code>optional string database_system_location_name = 3;</code>
     * @return The databaseSystemLocationName.
     */
    public java.lang.String getDatabaseSystemLocationName() {
      java.lang.Object ref = databaseSystemLocationName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          databaseSystemLocationName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     **
     * Each client must provide a unique location name when the pairing is established.
     * That location name is stored for each SQL statement here.
     * </pre>
     *
     * <code>optional string database_system_location_name = 3;</code>
     * @return The bytes for databaseSystemLocationName.
     */
    public com.google.protobuf.ByteString
        getDatabaseSystemLocationNameBytes() {
      java.lang.Object ref = databaseSystemLocationName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        databaseSystemLocationName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CORRELATION_TOKEN_FIELD_NUMBER = 4;
    private volatile java.lang.Object correlationToken_;
    /**
     * <pre>
     **
     * The DRDA communication protocol used between the client and the accelerator
     * uses "correlation tokens" to identify the connection. The correlation token
     * is provided when the DRDA connection is established, and message ACCRDB
     * (Access Relational Database) carries it.
     * </pre>
     *
     * <code>optional string correlation_token = 4;</code>
     * @return Whether the correlationToken field is set.
     */
    public boolean hasCorrelationToken() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     **
     * The DRDA communication protocol used between the client and the accelerator
     * uses "correlation tokens" to identify the connection. The correlation token
     * is provided when the DRDA connection is established, and message ACCRDB
     * (Access Relational Database) carries it.
     * </pre>
     *
     * <code>optional string correlation_token = 4;</code>
     * @return The correlationToken.
     */
    public java.lang.String getCorrelationToken() {
      java.lang.Object ref = correlationToken_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          correlationToken_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     **
     * The DRDA communication protocol used between the client and the accelerator
     * uses "correlation tokens" to identify the connection. The correlation token
     * is provided when the DRDA connection is established, and message ACCRDB
     * (Access Relational Database) carries it.
     * </pre>
     *
     * <code>optional string correlation_token = 4;</code>
     * @return The bytes for correlationToken.
     */
    public com.google.protobuf.ByteString
        getCorrelationTokenBytes() {
      java.lang.Object ref = correlationToken_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        correlationToken_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ORIGINAL_USER_ID_FIELD_NUMBER = 5;
    private volatile java.lang.Object originalUserId_;
    /**
     * <pre>
     **
     * This is the user ID that was used when an application connects to the client
     * database system (DB2z) for executing the SQL statement.
     * </pre>
     *
     * <code>optional string original_user_id = 5;</code>
     * @return Whether the originalUserId field is set.
     */
    public boolean hasOriginalUserId() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     **
     * This is the user ID that was used when an application connects to the client
     * database system (DB2z) for executing the SQL statement.
     * </pre>
     *
     * <code>optional string original_user_id = 5;</code>
     * @return The originalUserId.
     */
    public java.lang.String getOriginalUserId() {
      java.lang.Object ref = originalUserId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          originalUserId_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     **
     * This is the user ID that was used when an application connects to the client
     * database system (DB2z) for executing the SQL statement.
     * </pre>
     *
     * <code>optional string original_user_id = 5;</code>
     * @return The bytes for originalUserId.
     */
    public com.google.protobuf.ByteString
        getOriginalUserIdBytes() {
      java.lang.Object ref = originalUserId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        originalUserId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int EXTERNAL_NAME_FIELD_NUMBER = 6;
    private volatile java.lang.Object externalName_;
    /**
     * <pre>
     **
     * The DRDA communication protocol used between the client and the accelerator
     * contains an "external name". This name is provided in DRDA message EXCSAT
     * (Exchange Server Attributes) in field EXTNAM (External Name).
     * </pre>
     *
     * <code>optional string external_name = 6;</code>
     * @return Whether the externalName field is set.
     */
    public boolean hasExternalName() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     **
     * The DRDA communication protocol used between the client and the accelerator
     * contains an "external name". This name is provided in DRDA message EXCSAT
     * (Exchange Server Attributes) in field EXTNAM (External Name).
     * </pre>
     *
     * <code>optional string external_name = 6;</code>
     * @return The externalName.
     */
    public java.lang.String getExternalName() {
      java.lang.Object ref = externalName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          externalName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     **
     * The DRDA communication protocol used between the client and the accelerator
     * contains an "external name". This name is provided in DRDA message EXCSAT
     * (Exchange Server Attributes) in field EXTNAM (External Name).
     * </pre>
     *
     * <code>optional string external_name = 6;</code>
     * @return The bytes for externalName.
     */
    public com.google.protobuf.ByteString
        getExternalNameBytes() {
      java.lang.Object ref = externalName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        externalName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PEER_IDENTIFIER_FIELD_NUMBER = 7;
    private volatile java.lang.Object peerIdentifier_;
    /**
     * <pre>
     **
     * The client's IP address is obtained from the TCP/IP connection itself by
     * querying the respective attributes from the socket.
     * The client's port number is _not_ included because the port numbers are
     * typically assigned randomly by the client's operating system when a
     * &#64;c connect() system call is made.
     * </pre>
     *
     * <code>optional string peer_identifier = 7;</code>
     * @return Whether the peerIdentifier field is set.
     */
    public boolean hasPeerIdentifier() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     **
     * The client's IP address is obtained from the TCP/IP connection itself by
     * querying the respective attributes from the socket.
     * The client's port number is _not_ included because the port numbers are
     * typically assigned randomly by the client's operating system when a
     * &#64;c connect() system call is made.
     * </pre>
     *
     * <code>optional string peer_identifier = 7;</code>
     * @return The peerIdentifier.
     */
    public java.lang.String getPeerIdentifier() {
      java.lang.Object ref = peerIdentifier_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          peerIdentifier_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     **
     * The client's IP address is obtained from the TCP/IP connection itself by
     * querying the respective attributes from the socket.
     * The client's port number is _not_ included because the port numbers are
     * typically assigned randomly by the client's operating system when a
     * &#64;c connect() system call is made.
     * </pre>
     *
     * <code>optional string peer_identifier = 7;</code>
     * @return The bytes for peerIdentifier.
     */
    public com.google.protobuf.ByteString
        getPeerIdentifierBytes() {
      java.lang.Object ref = peerIdentifier_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        peerIdentifier_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ORIGINAL_SQL_STATEMENT_TEXT_FIELD_NUMBER = 8;
    private volatile java.lang.Object originalSqlStatementText_;
    /**
     * <pre>
     **
     * An application sends a SQL statement to our client (DB2z). The client
     * rewrites this original SQL statement to the backend (and does syntax
     * adjustments, table name mappings). The original SQL statement text is
     * provided to the accelerator, primarily for diagnostics purposes.
     * </pre>
     *
     * <code>optional string original_sql_statement_text = 8;</code>
     * @return Whether the originalSqlStatementText field is set.
     */
    public boolean hasOriginalSqlStatementText() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     **
     * An application sends a SQL statement to our client (DB2z). The client
     * rewrites this original SQL statement to the backend (and does syntax
     * adjustments, table name mappings). The original SQL statement text is
     * provided to the accelerator, primarily for diagnostics purposes.
     * </pre>
     *
     * <code>optional string original_sql_statement_text = 8;</code>
     * @return The originalSqlStatementText.
     */
    public java.lang.String getOriginalSqlStatementText() {
      java.lang.Object ref = originalSqlStatementText_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          originalSqlStatementText_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     **
     * An application sends a SQL statement to our client (DB2z). The client
     * rewrites this original SQL statement to the backend (and does syntax
     * adjustments, table name mappings). The original SQL statement text is
     * provided to the accelerator, primarily for diagnostics purposes.
     * </pre>
     *
     * <code>optional string original_sql_statement_text = 8;</code>
     * @return The bytes for originalSqlStatementText.
     */
    public com.google.protobuf.ByteString
        getOriginalSqlStatementTextBytes() {
      java.lang.Object ref = originalSqlStatementText_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        originalSqlStatementText_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ORIGINAL_SQL_STATEMENT_TEXT_HASH_FIELD_NUMBER = 9;
    private long originalSqlStatementTextHash_;
    /**
     * <pre>
     **
     * For complex SQL statements it is sometimes not easy to spot differences in
     * the original SQL statement text. Here we store a hash so that it is much easier
     * to identify whether the original SQL statement text for two different statements
     * is the same or not.
     * </pre>
     *
     * <code>optional uint64 original_sql_statement_text_hash = 9;</code>
     * @return Whether the originalSqlStatementTextHash field is set.
     */
    public boolean hasOriginalSqlStatementTextHash() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     **
     * For complex SQL statements it is sometimes not easy to spot differences in
     * the original SQL statement text. Here we store a hash so that it is much easier
     * to identify whether the original SQL statement text for two different statements
     * is the same or not.
     * </pre>
     *
     * <code>optional uint64 original_sql_statement_text_hash = 9;</code>
     * @return The originalSqlStatementTextHash.
     */
    public long getOriginalSqlStatementTextHash() {
      return originalSqlStatementTextHash_;
    }

    public static final int BACKEND_SQL_STATEMENT_TEXT_FIELD_NUMBER = 10;
    private volatile java.lang.Object backendSqlStatementText_;
    /**
     * <pre>
     **
     * The original SQL statement text (see &#64;c original_sql_statement_text)
     * is rewritten by the client to adhere to the backend's SQL syntax and
     * use the table/view names defined by the accelerator. This field here
     * contains the rewritten SQL statement text, which is actually executed
     * in the backend as-is.
     * </pre>
     *
     * <code>optional string backend_sql_statement_text = 10;</code>
     * @return Whether the backendSqlStatementText field is set.
     */
    public boolean hasBackendSqlStatementText() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <pre>
     **
     * The original SQL statement text (see &#64;c original_sql_statement_text)
     * is rewritten by the client to adhere to the backend's SQL syntax and
     * use the table/view names defined by the accelerator. This field here
     * contains the rewritten SQL statement text, which is actually executed
     * in the backend as-is.
     * </pre>
     *
     * <code>optional string backend_sql_statement_text = 10;</code>
     * @return The backendSqlStatementText.
     */
    public java.lang.String getBackendSqlStatementText() {
      java.lang.Object ref = backendSqlStatementText_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          backendSqlStatementText_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     **
     * The original SQL statement text (see &#64;c original_sql_statement_text)
     * is rewritten by the client to adhere to the backend's SQL syntax and
     * use the table/view names defined by the accelerator. This field here
     * contains the rewritten SQL statement text, which is actually executed
     * in the backend as-is.
     * </pre>
     *
     * <code>optional string backend_sql_statement_text = 10;</code>
     * @return The bytes for backendSqlStatementText.
     */
    public com.google.protobuf.ByteString
        getBackendSqlStatementTextBytes() {
      java.lang.Object ref = backendSqlStatementText_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        backendSqlStatementText_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int BACKEND_SQL_STATEMENT_TEXT_HASH_FIELD_NUMBER = 11;
    private long backendSqlStatementTextHash_;
    /**
     * <pre>
     **
     * For complex SQL statements it is sometimes not easy to spot differences in
     * the backend SQL statement text. Here we store a hash so that it is much easier
     * to identify whether the backend SQL statement text for two different statements
     * is the same or not.
     * </pre>
     *
     * <code>optional uint64 backend_sql_statement_text_hash = 11;</code>
     * @return Whether the backendSqlStatementTextHash field is set.
     */
    public boolean hasBackendSqlStatementTextHash() {
      return ((bitField0_ & 0x00000400) != 0);
    }
    /**
     * <pre>
     **
     * For complex SQL statements it is sometimes not easy to spot differences in
     * the backend SQL statement text. Here we store a hash so that it is much easier
     * to identify whether the backend SQL statement text for two different statements
     * is the same or not.
     * </pre>
     *
     * <code>optional uint64 backend_sql_statement_text_hash = 11;</code>
     * @return The backendSqlStatementTextHash.
     */
    public long getBackendSqlStatementTextHash() {
      return backendSqlStatementTextHash_;
    }

    public static final int PACKAGE_NAME_FIELD_NUMBER = 12;
    private volatile java.lang.Object packageName_;
    /**
     * <pre>
     **
     * If the client routes a static SQL statement to the accelerator, this
     * field contains the name of the package in which that SQL statement was
     * compiled into.
     * </pre>
     *
     * <code>optional string package_name = 12;</code>
     * @return Whether the packageName field is set.
     */
    public boolean hasPackageName() {
      return ((bitField0_ & 0x00000800) != 0);
    }
    /**
     * <pre>
     **
     * If the client routes a static SQL statement to the accelerator, this
     * field contains the name of the package in which that SQL statement was
     * compiled into.
     * </pre>
     *
     * <code>optional string package_name = 12;</code>
     * @return The packageName.
     */
    public java.lang.String getPackageName() {
      java.lang.Object ref = packageName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          packageName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     **
     * If the client routes a static SQL statement to the accelerator, this
     * field contains the name of the package in which that SQL statement was
     * compiled into.
     * </pre>
     *
     * <code>optional string package_name = 12;</code>
     * @return The bytes for packageName.
     */
    public com.google.protobuf.ByteString
        getPackageNameBytes() {
      java.lang.Object ref = packageName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        packageName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int COLLECTION_ID_FIELD_NUMBER = 13;
    private volatile java.lang.Object collectionId_;
    /**
     * <pre>
     **
     * If the client routes a static SQL statement to the accelerator, this
     * field contains the collection ID related to that SQL statement.
     * </pre>
     *
     * <code>optional string collection_id = 13;</code>
     * @return Whether the collectionId field is set.
     */
    public boolean hasCollectionId() {
      return ((bitField0_ & 0x00001000) != 0);
    }
    /**
     * <pre>
     **
     * If the client routes a static SQL statement to the accelerator, this
     * field contains the collection ID related to that SQL statement.
     * </pre>
     *
     * <code>optional string collection_id = 13;</code>
     * @return The collectionId.
     */
    public java.lang.String getCollectionId() {
      java.lang.Object ref = collectionId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          collectionId_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     **
     * If the client routes a static SQL statement to the accelerator, this
     * field contains the collection ID related to that SQL statement.
     * </pre>
     *
     * <code>optional string collection_id = 13;</code>
     * @return The bytes for collectionId.
     */
    public com.google.protobuf.ByteString
        getCollectionIdBytes() {
      java.lang.Object ref = collectionId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        collectionId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DBID_OBID_OF_ACCESSED_TABLES_FIELD_NUMBER = 14;
    private volatile java.lang.Object dbidObidOfAccessedTables_;
    /**
     * <pre>
     **
     * The client provides all IDs of tables that are referenced in a SQL statement.
     * Those tables are identified in DB2z by a pair of DBID/OBID (Database ID and
     * Object ID).
     * </pre>
     *
     * <code>optional string dbid_obid_of_accessed_tables = 14;</code>
     * @return Whether the dbidObidOfAccessedTables field is set.
     */
    public boolean hasDbidObidOfAccessedTables() {
      return ((bitField0_ & 0x00002000) != 0);
    }
    /**
     * <pre>
     **
     * The client provides all IDs of tables that are referenced in a SQL statement.
     * Those tables are identified in DB2z by a pair of DBID/OBID (Database ID and
     * Object ID).
     * </pre>
     *
     * <code>optional string dbid_obid_of_accessed_tables = 14;</code>
     * @return The dbidObidOfAccessedTables.
     */
    public java.lang.String getDbidObidOfAccessedTables() {
      java.lang.Object ref = dbidObidOfAccessedTables_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          dbidObidOfAccessedTables_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     **
     * The client provides all IDs of tables that are referenced in a SQL statement.
     * Those tables are identified in DB2z by a pair of DBID/OBID (Database ID and
     * Object ID).
     * </pre>
     *
     * <code>optional string dbid_obid_of_accessed_tables = 14;</code>
     * @return The bytes for dbidObidOfAccessedTables.
     */
    public com.google.protobuf.ByteString
        getDbidObidOfAccessedTablesBytes() {
      java.lang.Object ref = dbidObidOfAccessedTables_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        dbidObidOfAccessedTables_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int BACKEND_SQL_SESSION_ID_FIELD_NUMBER = 15;
    private long backendSqlSessionId_;
    /**
     * <pre>
     **
     * Each SQL connection to the backend has an application handle. The application
     * handle for the SQL connection on which the SQL statement is executed is
     * stored here as SQL session ID.
     * </pre>
     *
     * <code>optional int64 backend_sql_session_id = 15;</code>
     * @return Whether the backendSqlSessionId field is set.
     */
    public boolean hasBackendSqlSessionId() {
      return ((bitField0_ & 0x00004000) != 0);
    }
    /**
     * <pre>
     **
     * Each SQL connection to the backend has an application handle. The application
     * handle for the SQL connection on which the SQL statement is executed is
     * stored here as SQL session ID.
     * </pre>
     *
     * <code>optional int64 backend_sql_session_id = 15;</code>
     * @return The backendSqlSessionId.
     */
    public long getBackendSqlSessionId() {
      return backendSqlSessionId_;
    }

    public static final int BACKEND_SQL_APPLICATION_ID_FIELD_NUMBER = 16;
    private volatile java.lang.Object backendSqlApplicationId_;
    /**
     * <pre>
     **
     * Besides the application handle (see field &#64;c backend_sql_session_id), the
     * backend has an application ID assigned to each SQL connection.
     * </pre>
     *
     * <code>optional string backend_sql_application_id = 16;</code>
     * @return Whether the backendSqlApplicationId field is set.
     */
    public boolean hasBackendSqlApplicationId() {
      return ((bitField0_ & 0x00008000) != 0);
    }
    /**
     * <pre>
     **
     * Besides the application handle (see field &#64;c backend_sql_session_id), the
     * backend has an application ID assigned to each SQL connection.
     * </pre>
     *
     * <code>optional string backend_sql_application_id = 16;</code>
     * @return The backendSqlApplicationId.
     */
    public java.lang.String getBackendSqlApplicationId() {
      java.lang.Object ref = backendSqlApplicationId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          backendSqlApplicationId_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     **
     * Besides the application handle (see field &#64;c backend_sql_session_id), the
     * backend has an application ID assigned to each SQL connection.
     * </pre>
     *
     * <code>optional string backend_sql_application_id = 16;</code>
     * @return The bytes for backendSqlApplicationId.
     */
    public com.google.protobuf.ByteString
        getBackendSqlApplicationIdBytes() {
      java.lang.Object ref = backendSqlApplicationId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        backendSqlApplicationId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TASK_PRIORITY_FIELD_NUMBER = 17;
    private int taskPriority_;
    /**
     * <pre>
     **
     * The task priority is derived from the client's WLM (workload management) importance level.
     * </pre>
     *
     * <code>optional int32 task_priority = 17;</code>
     * @return Whether the taskPriority field is set.
     */
    public boolean hasTaskPriority() {
      return ((bitField0_ & 0x00010000) != 0);
    }
    /**
     * <pre>
     **
     * The task priority is derived from the client's WLM (workload management) importance level.
     * </pre>
     *
     * <code>optional int32 task_priority = 17;</code>
     * @return The taskPriority.
     */
    public int getTaskPriority() {
      return taskPriority_;
    }

    public static final int SPECIAL_REGISTERS_FIELD_NUMBER = 18;
    private SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters specialRegisters_;
    /**
     * <code>optional .SQLStatementDetailsData.QuerySpecialRegisters special_registers = 18;</code>
     * @return Whether the specialRegisters field is set.
     */
    public boolean hasSpecialRegisters() {
      return ((bitField0_ & 0x00020000) != 0);
    }
    /**
     * <code>optional .SQLStatementDetailsData.QuerySpecialRegisters special_registers = 18;</code>
     * @return The specialRegisters.
     */
    public SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters getSpecialRegisters() {
      return specialRegisters_ == null ? SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters.getDefaultInstance() : specialRegisters_;
    }
    /**
     * <code>optional .SQLStatementDetailsData.QuerySpecialRegisters special_registers = 18;</code>
     */
    public SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegistersOrBuilder getSpecialRegistersOrBuilder() {
      return specialRegisters_ == null ? SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters.getDefaultInstance() : specialRegisters_;
    }

    public static final int FINISHED_FIELD_NUMBER = 19;
    private boolean finished_;
    /**
     * <pre>
     *&#47; indicator whether execution of the SQL statement has finished
     * </pre>
     *
     * <code>optional bool finished = 19;</code>
     * @return Whether the finished field is set.
     */
    public boolean hasFinished() {
      return ((bitField0_ & 0x00040000) != 0);
    }
    /**
     * <pre>
     *&#47; indicator whether execution of the SQL statement has finished
     * </pre>
     *
     * <code>optional bool finished = 19;</code>
     * @return The finished.
     */
    public boolean getFinished() {
      return finished_;
    }

    public static final int FINISH_STATE_FIELD_NUMBER = 20;
    private int finishState_;
    /**
     * <pre>
     **
     * The state how the SQL statement execution was finished is one of:
     *  - 3 = DONE (successful completion without error)
     *  - 4 = ABORTED (execution failed with some error - either in the backend or in the accelerator)
     *  - 5 = CANCELLED (execution was canceled)
     * </pre>
     *
     * <code>optional uint32 finish_state = 20;</code>
     * @return Whether the finishState field is set.
     */
    public boolean hasFinishState() {
      return ((bitField0_ & 0x00080000) != 0);
    }
    /**
     * <pre>
     **
     * The state how the SQL statement execution was finished is one of:
     *  - 3 = DONE (successful completion without error)
     *  - 4 = ABORTED (execution failed with some error - either in the backend or in the accelerator)
     *  - 5 = CANCELLED (execution was canceled)
     * </pre>
     *
     * <code>optional uint32 finish_state = 20;</code>
     * @return The finishState.
     */
    public int getFinishState() {
      return finishState_;
    }

    public static final int TIMINGS_FIELD_NUMBER = 21;
    private SQLStatementDetails.SQLStatementDetailsData.Timings timings_;
    /**
     * <code>optional .SQLStatementDetailsData.Timings timings = 21;</code>
     * @return Whether the timings field is set.
     */
    public boolean hasTimings() {
      return ((bitField0_ & 0x00100000) != 0);
    }
    /**
     * <code>optional .SQLStatementDetailsData.Timings timings = 21;</code>
     * @return The timings.
     */
    public SQLStatementDetails.SQLStatementDetailsData.Timings getTimings() {
      return timings_ == null ? SQLStatementDetails.SQLStatementDetailsData.Timings.getDefaultInstance() : timings_;
    }
    /**
     * <code>optional .SQLStatementDetailsData.Timings timings = 21;</code>
     */
    public SQLStatementDetails.SQLStatementDetailsData.TimingsOrBuilder getTimingsOrBuilder() {
      return timings_ == null ? SQLStatementDetails.SQLStatementDetailsData.Timings.getDefaultInstance() : timings_;
    }

    public static final int EXECUTION_RESULT_FIELD_NUMBER = 22;
    private SQLStatementDetails.SQLStatementDetailsData.ExecutionResult executionResult_;
    /**
     * <code>optional .SQLStatementDetailsData.ExecutionResult execution_result = 22;</code>
     * @return Whether the executionResult field is set.
     */
    public boolean hasExecutionResult() {
      return ((bitField0_ & 0x00200000) != 0);
    }
    /**
     * <code>optional .SQLStatementDetailsData.ExecutionResult execution_result = 22;</code>
     * @return The executionResult.
     */
    public SQLStatementDetails.SQLStatementDetailsData.ExecutionResult getExecutionResult() {
      return executionResult_ == null ? SQLStatementDetails.SQLStatementDetailsData.ExecutionResult.getDefaultInstance() : executionResult_;
    }
    /**
     * <code>optional .SQLStatementDetailsData.ExecutionResult execution_result = 22;</code>
     */
    public SQLStatementDetails.SQLStatementDetailsData.ExecutionResultOrBuilder getExecutionResultOrBuilder() {
      return executionResult_ == null ? SQLStatementDetails.SQLStatementDetailsData.ExecutionResult.getDefaultInstance() : executionResult_;
    }

    public static final int WAIT_FOR_DATA_FIELD_NUMBER = 23;
    private SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics waitForData_;
    /**
     * <code>optional .SQLStatementDetailsData.WaitForDataStatistics wait_for_data = 23;</code>
     * @return Whether the waitForData field is set.
     */
    public boolean hasWaitForData() {
      return ((bitField0_ & 0x00400000) != 0);
    }
    /**
     * <code>optional .SQLStatementDetailsData.WaitForDataStatistics wait_for_data = 23;</code>
     * @return The waitForData.
     */
    public SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics getWaitForData() {
      return waitForData_ == null ? SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics.getDefaultInstance() : waitForData_;
    }
    /**
     * <code>optional .SQLStatementDetailsData.WaitForDataStatistics wait_for_data = 23;</code>
     */
    public SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatisticsOrBuilder getWaitForDataOrBuilder() {
      return waitForData_ == null ? SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics.getDefaultInstance() : waitForData_;
    }

    public static final int MULTI_ROW_INSERT_FIELD_NUMBER = 24;
    private SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails multiRowInsert_;
    /**
     * <code>optional .SQLStatementDetailsData.MultiRowInsertDetails multi_row_insert = 24;</code>
     * @return Whether the multiRowInsert field is set.
     */
    public boolean hasMultiRowInsert() {
      return ((bitField0_ & 0x00800000) != 0);
    }
    /**
     * <code>optional .SQLStatementDetailsData.MultiRowInsertDetails multi_row_insert = 24;</code>
     * @return The multiRowInsert.
     */
    public SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails getMultiRowInsert() {
      return multiRowInsert_ == null ? SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails.getDefaultInstance() : multiRowInsert_;
    }
    /**
     * <code>optional .SQLStatementDetailsData.MultiRowInsertDetails multi_row_insert = 24;</code>
     */
    public SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetailsOrBuilder getMultiRowInsertOrBuilder() {
      return multiRowInsert_ == null ? SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails.getDefaultInstance() : multiRowInsert_;
    }

    public static final int AUXILIARY_DATA_FIELD_NUMBER = 25;
    private volatile java.lang.Object auxiliaryData_;
    /**
     * <pre>
     **
     * The SQL controller typically collects a lot of detailed information for each
     * SQL statement execution. For example, profiling data for the individual execution
     * phases are gathered. A dump (in XML format) of those information is stored so
     * that it is available for problem determination purposes.
     * </pre>
     *
     * <code>optional string auxiliary_data = 25;</code>
     * @return Whether the auxiliaryData field is set.
     */
    public boolean hasAuxiliaryData() {
      return ((bitField0_ & 0x01000000) != 0);
    }
    /**
     * <pre>
     **
     * The SQL controller typically collects a lot of detailed information for each
     * SQL statement execution. For example, profiling data for the individual execution
     * phases are gathered. A dump (in XML format) of those information is stored so
     * that it is available for problem determination purposes.
     * </pre>
     *
     * <code>optional string auxiliary_data = 25;</code>
     * @return The auxiliaryData.
     */
    public java.lang.String getAuxiliaryData() {
      java.lang.Object ref = auxiliaryData_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          auxiliaryData_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     **
     * The SQL controller typically collects a lot of detailed information for each
     * SQL statement execution. For example, profiling data for the individual execution
     * phases are gathered. A dump (in XML format) of those information is stored so
     * that it is available for problem determination purposes.
     * </pre>
     *
     * <code>optional string auxiliary_data = 25;</code>
     * @return The bytes for auxiliaryData.
     */
    public com.google.protobuf.ByteString
        getAuxiliaryDataBytes() {
      java.lang.Object ref = auxiliaryData_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        auxiliaryData_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CLIENT_ACCOUNTING_DETAILS_FIELD_NUMBER = 26;
    private SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails clientAccountingDetails_;
    /**
     * <code>optional .SQLStatementDetailsData.ClientAccountingDetails client_accounting_details = 26;</code>
     * @return Whether the clientAccountingDetails field is set.
     */
    public boolean hasClientAccountingDetails() {
      return ((bitField0_ & 0x02000000) != 0);
    }
    /**
     * <code>optional .SQLStatementDetailsData.ClientAccountingDetails client_accounting_details = 26;</code>
     * @return The clientAccountingDetails.
     */
    public SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails getClientAccountingDetails() {
      return clientAccountingDetails_ == null ? SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails.getDefaultInstance() : clientAccountingDetails_;
    }
    /**
     * <code>optional .SQLStatementDetailsData.ClientAccountingDetails client_accounting_details = 26;</code>
     */
    public SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetailsOrBuilder getClientAccountingDetailsOrBuilder() {
      return clientAccountingDetails_ == null ? SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails.getDefaultInstance() : clientAccountingDetails_;
    }

    public static final int BACKEND_SQL_STATEMENT_TEXT_HEX_FIELD_NUMBER = 27;
    private volatile java.lang.Object backendSqlStatementTextHex_;
    /**
     * <pre>
     **
     * Deprecrated.
     * In the past, we used to store the backend SQL statement text as hex representation
     * for all the individual bytes. That can be helpful to figure out, for example,
     * whether a character is a regular space (ASCII code 0x20) or non-breaking space
     * (Unicode code U+00A0).
     * We no longer store that hex representation these days. System command
     * "hexdump -C &lt;file&gt;" can be used on the SQL history file to inspect the original
     * SQL statement text and/or the backend SQL statement text.
     * </pre>
     *
     * <code>optional string backend_sql_statement_text_hex = 27;</code>
     * @return Whether the backendSqlStatementTextHex field is set.
     */
    public boolean hasBackendSqlStatementTextHex() {
      return ((bitField0_ & 0x04000000) != 0);
    }
    /**
     * <pre>
     **
     * Deprecrated.
     * In the past, we used to store the backend SQL statement text as hex representation
     * for all the individual bytes. That can be helpful to figure out, for example,
     * whether a character is a regular space (ASCII code 0x20) or non-breaking space
     * (Unicode code U+00A0).
     * We no longer store that hex representation these days. System command
     * "hexdump -C &lt;file&gt;" can be used on the SQL history file to inspect the original
     * SQL statement text and/or the backend SQL statement text.
     * </pre>
     *
     * <code>optional string backend_sql_statement_text_hex = 27;</code>
     * @return The backendSqlStatementTextHex.
     */
    public java.lang.String getBackendSqlStatementTextHex() {
      java.lang.Object ref = backendSqlStatementTextHex_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          backendSqlStatementTextHex_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     **
     * Deprecrated.
     * In the past, we used to store the backend SQL statement text as hex representation
     * for all the individual bytes. That can be helpful to figure out, for example,
     * whether a character is a regular space (ASCII code 0x20) or non-breaking space
     * (Unicode code U+00A0).
     * We no longer store that hex representation these days. System command
     * "hexdump -C &lt;file&gt;" can be used on the SQL history file to inspect the original
     * SQL statement text and/or the backend SQL statement text.
     * </pre>
     *
     * <code>optional string backend_sql_statement_text_hex = 27;</code>
     * @return The bytes for backendSqlStatementTextHex.
     */
    public com.google.protobuf.ByteString
        getBackendSqlStatementTextHexBytes() {
      java.lang.Object ref = backendSqlStatementTextHex_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        backendSqlStatementTextHex_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeUInt64(1, statementId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeUInt64(2, taskId_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, databaseSystemLocationName_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, correlationToken_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, originalUserId_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 6, externalName_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 7, peerIdentifier_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 8, originalSqlStatementText_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        output.writeUInt64(9, originalSqlStatementTextHash_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 10, backendSqlStatementText_);
      }
      if (((bitField0_ & 0x00000400) != 0)) {
        output.writeUInt64(11, backendSqlStatementTextHash_);
      }
      if (((bitField0_ & 0x00000800) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 12, packageName_);
      }
      if (((bitField0_ & 0x00001000) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 13, collectionId_);
      }
      if (((bitField0_ & 0x00002000) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 14, dbidObidOfAccessedTables_);
      }
      if (((bitField0_ & 0x00004000) != 0)) {
        output.writeInt64(15, backendSqlSessionId_);
      }
      if (((bitField0_ & 0x00008000) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 16, backendSqlApplicationId_);
      }
      if (((bitField0_ & 0x00010000) != 0)) {
        output.writeInt32(17, taskPriority_);
      }
      if (((bitField0_ & 0x00020000) != 0)) {
        output.writeMessage(18, getSpecialRegisters());
      }
      if (((bitField0_ & 0x00040000) != 0)) {
        output.writeBool(19, finished_);
      }
      if (((bitField0_ & 0x00080000) != 0)) {
        output.writeUInt32(20, finishState_);
      }
      if (((bitField0_ & 0x00100000) != 0)) {
        output.writeMessage(21, getTimings());
      }
      if (((bitField0_ & 0x00200000) != 0)) {
        output.writeMessage(22, getExecutionResult());
      }
      if (((bitField0_ & 0x00400000) != 0)) {
        output.writeMessage(23, getWaitForData());
      }
      if (((bitField0_ & 0x00800000) != 0)) {
        output.writeMessage(24, getMultiRowInsert());
      }
      if (((bitField0_ & 0x01000000) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 25, auxiliaryData_);
      }
      if (((bitField0_ & 0x02000000) != 0)) {
        output.writeMessage(26, getClientAccountingDetails());
      }
      if (((bitField0_ & 0x04000000) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 27, backendSqlStatementTextHex_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, statementId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, taskId_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, databaseSystemLocationName_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, correlationToken_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, originalUserId_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, externalName_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, peerIdentifier_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(8, originalSqlStatementText_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(9, originalSqlStatementTextHash_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(10, backendSqlStatementText_);
      }
      if (((bitField0_ & 0x00000400) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(11, backendSqlStatementTextHash_);
      }
      if (((bitField0_ & 0x00000800) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(12, packageName_);
      }
      if (((bitField0_ & 0x00001000) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(13, collectionId_);
      }
      if (((bitField0_ & 0x00002000) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(14, dbidObidOfAccessedTables_);
      }
      if (((bitField0_ & 0x00004000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(15, backendSqlSessionId_);
      }
      if (((bitField0_ & 0x00008000) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(16, backendSqlApplicationId_);
      }
      if (((bitField0_ & 0x00010000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(17, taskPriority_);
      }
      if (((bitField0_ & 0x00020000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(18, getSpecialRegisters());
      }
      if (((bitField0_ & 0x00040000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(19, finished_);
      }
      if (((bitField0_ & 0x00080000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(20, finishState_);
      }
      if (((bitField0_ & 0x00100000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(21, getTimings());
      }
      if (((bitField0_ & 0x00200000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(22, getExecutionResult());
      }
      if (((bitField0_ & 0x00400000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(23, getWaitForData());
      }
      if (((bitField0_ & 0x00800000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(24, getMultiRowInsert());
      }
      if (((bitField0_ & 0x01000000) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(25, auxiliaryData_);
      }
      if (((bitField0_ & 0x02000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(26, getClientAccountingDetails());
      }
      if (((bitField0_ & 0x04000000) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(27, backendSqlStatementTextHex_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof SQLStatementDetails.SQLStatementDetailsData)) {
        return super.equals(obj);
      }
      SQLStatementDetails.SQLStatementDetailsData other = (SQLStatementDetails.SQLStatementDetailsData) obj;

      if (hasStatementId() != other.hasStatementId()) return false;
      if (hasStatementId()) {
        if (getStatementId()
            != other.getStatementId()) return false;
      }
      if (hasTaskId() != other.hasTaskId()) return false;
      if (hasTaskId()) {
        if (getTaskId()
            != other.getTaskId()) return false;
      }
      if (hasDatabaseSystemLocationName() != other.hasDatabaseSystemLocationName()) return false;
      if (hasDatabaseSystemLocationName()) {
        if (!getDatabaseSystemLocationName()
            .equals(other.getDatabaseSystemLocationName())) return false;
      }
      if (hasCorrelationToken() != other.hasCorrelationToken()) return false;
      if (hasCorrelationToken()) {
        if (!getCorrelationToken()
            .equals(other.getCorrelationToken())) return false;
      }
      if (hasOriginalUserId() != other.hasOriginalUserId()) return false;
      if (hasOriginalUserId()) {
        if (!getOriginalUserId()
            .equals(other.getOriginalUserId())) return false;
      }
      if (hasExternalName() != other.hasExternalName()) return false;
      if (hasExternalName()) {
        if (!getExternalName()
            .equals(other.getExternalName())) return false;
      }
      if (hasPeerIdentifier() != other.hasPeerIdentifier()) return false;
      if (hasPeerIdentifier()) {
        if (!getPeerIdentifier()
            .equals(other.getPeerIdentifier())) return false;
      }
      if (hasOriginalSqlStatementText() != other.hasOriginalSqlStatementText()) return false;
      if (hasOriginalSqlStatementText()) {
        if (!getOriginalSqlStatementText()
            .equals(other.getOriginalSqlStatementText())) return false;
      }
      if (hasOriginalSqlStatementTextHash() != other.hasOriginalSqlStatementTextHash()) return false;
      if (hasOriginalSqlStatementTextHash()) {
        if (getOriginalSqlStatementTextHash()
            != other.getOriginalSqlStatementTextHash()) return false;
      }
      if (hasBackendSqlStatementText() != other.hasBackendSqlStatementText()) return false;
      if (hasBackendSqlStatementText()) {
        if (!getBackendSqlStatementText()
            .equals(other.getBackendSqlStatementText())) return false;
      }
      if (hasBackendSqlStatementTextHash() != other.hasBackendSqlStatementTextHash()) return false;
      if (hasBackendSqlStatementTextHash()) {
        if (getBackendSqlStatementTextHash()
            != other.getBackendSqlStatementTextHash()) return false;
      }
      if (hasPackageName() != other.hasPackageName()) return false;
      if (hasPackageName()) {
        if (!getPackageName()
            .equals(other.getPackageName())) return false;
      }
      if (hasCollectionId() != other.hasCollectionId()) return false;
      if (hasCollectionId()) {
        if (!getCollectionId()
            .equals(other.getCollectionId())) return false;
      }
      if (hasDbidObidOfAccessedTables() != other.hasDbidObidOfAccessedTables()) return false;
      if (hasDbidObidOfAccessedTables()) {
        if (!getDbidObidOfAccessedTables()
            .equals(other.getDbidObidOfAccessedTables())) return false;
      }
      if (hasBackendSqlSessionId() != other.hasBackendSqlSessionId()) return false;
      if (hasBackendSqlSessionId()) {
        if (getBackendSqlSessionId()
            != other.getBackendSqlSessionId()) return false;
      }
      if (hasBackendSqlApplicationId() != other.hasBackendSqlApplicationId()) return false;
      if (hasBackendSqlApplicationId()) {
        if (!getBackendSqlApplicationId()
            .equals(other.getBackendSqlApplicationId())) return false;
      }
      if (hasTaskPriority() != other.hasTaskPriority()) return false;
      if (hasTaskPriority()) {
        if (getTaskPriority()
            != other.getTaskPriority()) return false;
      }
      if (hasSpecialRegisters() != other.hasSpecialRegisters()) return false;
      if (hasSpecialRegisters()) {
        if (!getSpecialRegisters()
            .equals(other.getSpecialRegisters())) return false;
      }
      if (hasFinished() != other.hasFinished()) return false;
      if (hasFinished()) {
        if (getFinished()
            != other.getFinished()) return false;
      }
      if (hasFinishState() != other.hasFinishState()) return false;
      if (hasFinishState()) {
        if (getFinishState()
            != other.getFinishState()) return false;
      }
      if (hasTimings() != other.hasTimings()) return false;
      if (hasTimings()) {
        if (!getTimings()
            .equals(other.getTimings())) return false;
      }
      if (hasExecutionResult() != other.hasExecutionResult()) return false;
      if (hasExecutionResult()) {
        if (!getExecutionResult()
            .equals(other.getExecutionResult())) return false;
      }
      if (hasWaitForData() != other.hasWaitForData()) return false;
      if (hasWaitForData()) {
        if (!getWaitForData()
            .equals(other.getWaitForData())) return false;
      }
      if (hasMultiRowInsert() != other.hasMultiRowInsert()) return false;
      if (hasMultiRowInsert()) {
        if (!getMultiRowInsert()
            .equals(other.getMultiRowInsert())) return false;
      }
      if (hasAuxiliaryData() != other.hasAuxiliaryData()) return false;
      if (hasAuxiliaryData()) {
        if (!getAuxiliaryData()
            .equals(other.getAuxiliaryData())) return false;
      }
      if (hasClientAccountingDetails() != other.hasClientAccountingDetails()) return false;
      if (hasClientAccountingDetails()) {
        if (!getClientAccountingDetails()
            .equals(other.getClientAccountingDetails())) return false;
      }
      if (hasBackendSqlStatementTextHex() != other.hasBackendSqlStatementTextHex()) return false;
      if (hasBackendSqlStatementTextHex()) {
        if (!getBackendSqlStatementTextHex()
            .equals(other.getBackendSqlStatementTextHex())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasStatementId()) {
        hash = (37 * hash) + STATEMENT_ID_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getStatementId());
      }
      if (hasTaskId()) {
        hash = (37 * hash) + TASK_ID_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getTaskId());
      }
      if (hasDatabaseSystemLocationName()) {
        hash = (37 * hash) + DATABASE_SYSTEM_LOCATION_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getDatabaseSystemLocationName().hashCode();
      }
      if (hasCorrelationToken()) {
        hash = (37 * hash) + CORRELATION_TOKEN_FIELD_NUMBER;
        hash = (53 * hash) + getCorrelationToken().hashCode();
      }
      if (hasOriginalUserId()) {
        hash = (37 * hash) + ORIGINAL_USER_ID_FIELD_NUMBER;
        hash = (53 * hash) + getOriginalUserId().hashCode();
      }
      if (hasExternalName()) {
        hash = (37 * hash) + EXTERNAL_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getExternalName().hashCode();
      }
      if (hasPeerIdentifier()) {
        hash = (37 * hash) + PEER_IDENTIFIER_FIELD_NUMBER;
        hash = (53 * hash) + getPeerIdentifier().hashCode();
      }
      if (hasOriginalSqlStatementText()) {
        hash = (37 * hash) + ORIGINAL_SQL_STATEMENT_TEXT_FIELD_NUMBER;
        hash = (53 * hash) + getOriginalSqlStatementText().hashCode();
      }
      if (hasOriginalSqlStatementTextHash()) {
        hash = (37 * hash) + ORIGINAL_SQL_STATEMENT_TEXT_HASH_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getOriginalSqlStatementTextHash());
      }
      if (hasBackendSqlStatementText()) {
        hash = (37 * hash) + BACKEND_SQL_STATEMENT_TEXT_FIELD_NUMBER;
        hash = (53 * hash) + getBackendSqlStatementText().hashCode();
      }
      if (hasBackendSqlStatementTextHash()) {
        hash = (37 * hash) + BACKEND_SQL_STATEMENT_TEXT_HASH_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getBackendSqlStatementTextHash());
      }
      if (hasPackageName()) {
        hash = (37 * hash) + PACKAGE_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getPackageName().hashCode();
      }
      if (hasCollectionId()) {
        hash = (37 * hash) + COLLECTION_ID_FIELD_NUMBER;
        hash = (53 * hash) + getCollectionId().hashCode();
      }
      if (hasDbidObidOfAccessedTables()) {
        hash = (37 * hash) + DBID_OBID_OF_ACCESSED_TABLES_FIELD_NUMBER;
        hash = (53 * hash) + getDbidObidOfAccessedTables().hashCode();
      }
      if (hasBackendSqlSessionId()) {
        hash = (37 * hash) + BACKEND_SQL_SESSION_ID_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getBackendSqlSessionId());
      }
      if (hasBackendSqlApplicationId()) {
        hash = (37 * hash) + BACKEND_SQL_APPLICATION_ID_FIELD_NUMBER;
        hash = (53 * hash) + getBackendSqlApplicationId().hashCode();
      }
      if (hasTaskPriority()) {
        hash = (37 * hash) + TASK_PRIORITY_FIELD_NUMBER;
        hash = (53 * hash) + getTaskPriority();
      }
      if (hasSpecialRegisters()) {
        hash = (37 * hash) + SPECIAL_REGISTERS_FIELD_NUMBER;
        hash = (53 * hash) + getSpecialRegisters().hashCode();
      }
      if (hasFinished()) {
        hash = (37 * hash) + FINISHED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getFinished());
      }
      if (hasFinishState()) {
        hash = (37 * hash) + FINISH_STATE_FIELD_NUMBER;
        hash = (53 * hash) + getFinishState();
      }
      if (hasTimings()) {
        hash = (37 * hash) + TIMINGS_FIELD_NUMBER;
        hash = (53 * hash) + getTimings().hashCode();
      }
      if (hasExecutionResult()) {
        hash = (37 * hash) + EXECUTION_RESULT_FIELD_NUMBER;
        hash = (53 * hash) + getExecutionResult().hashCode();
      }
      if (hasWaitForData()) {
        hash = (37 * hash) + WAIT_FOR_DATA_FIELD_NUMBER;
        hash = (53 * hash) + getWaitForData().hashCode();
      }
      if (hasMultiRowInsert()) {
        hash = (37 * hash) + MULTI_ROW_INSERT_FIELD_NUMBER;
        hash = (53 * hash) + getMultiRowInsert().hashCode();
      }
      if (hasAuxiliaryData()) {
        hash = (37 * hash) + AUXILIARY_DATA_FIELD_NUMBER;
        hash = (53 * hash) + getAuxiliaryData().hashCode();
      }
      if (hasClientAccountingDetails()) {
        hash = (37 * hash) + CLIENT_ACCOUNTING_DETAILS_FIELD_NUMBER;
        hash = (53 * hash) + getClientAccountingDetails().hashCode();
      }
      if (hasBackendSqlStatementTextHex()) {
        hash = (37 * hash) + BACKEND_SQL_STATEMENT_TEXT_HEX_FIELD_NUMBER;
        hash = (53 * hash) + getBackendSqlStatementTextHex().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static SQLStatementDetails.SQLStatementDetailsData parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SQLStatementDetails.SQLStatementDetailsData parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SQLStatementDetails.SQLStatementDetailsData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SQLStatementDetails.SQLStatementDetailsData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SQLStatementDetails.SQLStatementDetailsData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SQLStatementDetails.SQLStatementDetailsData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SQLStatementDetails.SQLStatementDetailsData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SQLStatementDetails.SQLStatementDetailsData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static SQLStatementDetails.SQLStatementDetailsData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static SQLStatementDetails.SQLStatementDetailsData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static SQLStatementDetails.SQLStatementDetailsData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SQLStatementDetails.SQLStatementDetailsData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(SQLStatementDetails.SQLStatementDetailsData prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     **
     * Proto object describing the details for the execution of a user-driver SQL statement.
     * Various attributes are collected for a SQL statement that was executed
     * on behalf of the client (DB2z). The attributes are tracked for currently
     * running SQL statements and also for already finished ones.
     ********************************************************************************
     * &#64;attention These proto objects are serialized in Text Format and that is written
     *            persistently to SQL history files! We do not use any binary representation
     *            of the proto objects. That implies:
     *             (1) Attribute names MUST NOT be changed or removed because (persisted)
     *                 values are identified by them.
     *             (2) Attribute numbers/IDs can be changed. In fact, they should be changed
     *                 as they define the sequence for the fields in the SQL history file.
     *                 A logical sequence makes it easier to consume that file.
     ********************************************************************************
     * </pre>
     *
     * Protobuf type {@code SQLStatementDetailsData}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SQLStatementDetailsData)
        SQLStatementDetails.SQLStatementDetailsDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SQLStatementDetails.internal_static_SQLStatementDetailsData_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SQLStatementDetails.internal_static_SQLStatementDetailsData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SQLStatementDetails.SQLStatementDetailsData.class, SQLStatementDetails.SQLStatementDetailsData.Builder.class);
      }

      // Construct using SQLStatementDetails.SQLStatementDetailsData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getSpecialRegistersFieldBuilder();
          getTimingsFieldBuilder();
          getExecutionResultFieldBuilder();
          getWaitForDataFieldBuilder();
          getMultiRowInsertFieldBuilder();
          getClientAccountingDetailsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        statementId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        taskId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        databaseSystemLocationName_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        correlationToken_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        originalUserId_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        externalName_ = "";
        bitField0_ = (bitField0_ & ~0x00000020);
        peerIdentifier_ = "";
        bitField0_ = (bitField0_ & ~0x00000040);
        originalSqlStatementText_ = "";
        bitField0_ = (bitField0_ & ~0x00000080);
        originalSqlStatementTextHash_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000100);
        backendSqlStatementText_ = "";
        bitField0_ = (bitField0_ & ~0x00000200);
        backendSqlStatementTextHash_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000400);
        packageName_ = "";
        bitField0_ = (bitField0_ & ~0x00000800);
        collectionId_ = "";
        bitField0_ = (bitField0_ & ~0x00001000);
        dbidObidOfAccessedTables_ = "";
        bitField0_ = (bitField0_ & ~0x00002000);
        backendSqlSessionId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00004000);
        backendSqlApplicationId_ = "";
        bitField0_ = (bitField0_ & ~0x00008000);
        taskPriority_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        if (specialRegistersBuilder_ == null) {
          specialRegisters_ = null;
        } else {
          specialRegistersBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00020000);
        finished_ = false;
        bitField0_ = (bitField0_ & ~0x00040000);
        finishState_ = 0;
        bitField0_ = (bitField0_ & ~0x00080000);
        if (timingsBuilder_ == null) {
          timings_ = null;
        } else {
          timingsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00100000);
        if (executionResultBuilder_ == null) {
          executionResult_ = null;
        } else {
          executionResultBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00200000);
        if (waitForDataBuilder_ == null) {
          waitForData_ = null;
        } else {
          waitForDataBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00400000);
        if (multiRowInsertBuilder_ == null) {
          multiRowInsert_ = null;
        } else {
          multiRowInsertBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00800000);
        auxiliaryData_ = "";
        bitField0_ = (bitField0_ & ~0x01000000);
        if (clientAccountingDetailsBuilder_ == null) {
          clientAccountingDetails_ = null;
        } else {
          clientAccountingDetailsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x02000000);
        backendSqlStatementTextHex_ = "";
        bitField0_ = (bitField0_ & ~0x04000000);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SQLStatementDetails.internal_static_SQLStatementDetailsData_descriptor;
      }

      @java.lang.Override
      public SQLStatementDetails.SQLStatementDetailsData getDefaultInstanceForType() {
        return SQLStatementDetails.SQLStatementDetailsData.getDefaultInstance();
      }

      @java.lang.Override
      public SQLStatementDetails.SQLStatementDetailsData build() {
        SQLStatementDetails.SQLStatementDetailsData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public SQLStatementDetails.SQLStatementDetailsData buildPartial() {
        SQLStatementDetails.SQLStatementDetailsData result = new SQLStatementDetails.SQLStatementDetailsData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.statementId_ = statementId_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.taskId_ = taskId_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          to_bitField0_ |= 0x00000004;
        }
        result.databaseSystemLocationName_ = databaseSystemLocationName_;
        if (((from_bitField0_ & 0x00000008) != 0)) {
          to_bitField0_ |= 0x00000008;
        }
        result.correlationToken_ = correlationToken_;
        if (((from_bitField0_ & 0x00000010) != 0)) {
          to_bitField0_ |= 0x00000010;
        }
        result.originalUserId_ = originalUserId_;
        if (((from_bitField0_ & 0x00000020) != 0)) {
          to_bitField0_ |= 0x00000020;
        }
        result.externalName_ = externalName_;
        if (((from_bitField0_ & 0x00000040) != 0)) {
          to_bitField0_ |= 0x00000040;
        }
        result.peerIdentifier_ = peerIdentifier_;
        if (((from_bitField0_ & 0x00000080) != 0)) {
          to_bitField0_ |= 0x00000080;
        }
        result.originalSqlStatementText_ = originalSqlStatementText_;
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.originalSqlStatementTextHash_ = originalSqlStatementTextHash_;
          to_bitField0_ |= 0x00000100;
        }
        if (((from_bitField0_ & 0x00000200) != 0)) {
          to_bitField0_ |= 0x00000200;
        }
        result.backendSqlStatementText_ = backendSqlStatementText_;
        if (((from_bitField0_ & 0x00000400) != 0)) {
          result.backendSqlStatementTextHash_ = backendSqlStatementTextHash_;
          to_bitField0_ |= 0x00000400;
        }
        if (((from_bitField0_ & 0x00000800) != 0)) {
          to_bitField0_ |= 0x00000800;
        }
        result.packageName_ = packageName_;
        if (((from_bitField0_ & 0x00001000) != 0)) {
          to_bitField0_ |= 0x00001000;
        }
        result.collectionId_ = collectionId_;
        if (((from_bitField0_ & 0x00002000) != 0)) {
          to_bitField0_ |= 0x00002000;
        }
        result.dbidObidOfAccessedTables_ = dbidObidOfAccessedTables_;
        if (((from_bitField0_ & 0x00004000) != 0)) {
          result.backendSqlSessionId_ = backendSqlSessionId_;
          to_bitField0_ |= 0x00004000;
        }
        if (((from_bitField0_ & 0x00008000) != 0)) {
          to_bitField0_ |= 0x00008000;
        }
        result.backendSqlApplicationId_ = backendSqlApplicationId_;
        if (((from_bitField0_ & 0x00010000) != 0)) {
          result.taskPriority_ = taskPriority_;
          to_bitField0_ |= 0x00010000;
        }
        if (((from_bitField0_ & 0x00020000) != 0)) {
          if (specialRegistersBuilder_ == null) {
            result.specialRegisters_ = specialRegisters_;
          } else {
            result.specialRegisters_ = specialRegistersBuilder_.build();
          }
          to_bitField0_ |= 0x00020000;
        }
        if (((from_bitField0_ & 0x00040000) != 0)) {
          result.finished_ = finished_;
          to_bitField0_ |= 0x00040000;
        }
        if (((from_bitField0_ & 0x00080000) != 0)) {
          result.finishState_ = finishState_;
          to_bitField0_ |= 0x00080000;
        }
        if (((from_bitField0_ & 0x00100000) != 0)) {
          if (timingsBuilder_ == null) {
            result.timings_ = timings_;
          } else {
            result.timings_ = timingsBuilder_.build();
          }
          to_bitField0_ |= 0x00100000;
        }
        if (((from_bitField0_ & 0x00200000) != 0)) {
          if (executionResultBuilder_ == null) {
            result.executionResult_ = executionResult_;
          } else {
            result.executionResult_ = executionResultBuilder_.build();
          }
          to_bitField0_ |= 0x00200000;
        }
        if (((from_bitField0_ & 0x00400000) != 0)) {
          if (waitForDataBuilder_ == null) {
            result.waitForData_ = waitForData_;
          } else {
            result.waitForData_ = waitForDataBuilder_.build();
          }
          to_bitField0_ |= 0x00400000;
        }
        if (((from_bitField0_ & 0x00800000) != 0)) {
          if (multiRowInsertBuilder_ == null) {
            result.multiRowInsert_ = multiRowInsert_;
          } else {
            result.multiRowInsert_ = multiRowInsertBuilder_.build();
          }
          to_bitField0_ |= 0x00800000;
        }
        if (((from_bitField0_ & 0x01000000) != 0)) {
          to_bitField0_ |= 0x01000000;
        }
        result.auxiliaryData_ = auxiliaryData_;
        if (((from_bitField0_ & 0x02000000) != 0)) {
          if (clientAccountingDetailsBuilder_ == null) {
            result.clientAccountingDetails_ = clientAccountingDetails_;
          } else {
            result.clientAccountingDetails_ = clientAccountingDetailsBuilder_.build();
          }
          to_bitField0_ |= 0x02000000;
        }
        if (((from_bitField0_ & 0x04000000) != 0)) {
          to_bitField0_ |= 0x04000000;
        }
        result.backendSqlStatementTextHex_ = backendSqlStatementTextHex_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SQLStatementDetails.SQLStatementDetailsData) {
          return mergeFrom((SQLStatementDetails.SQLStatementDetailsData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SQLStatementDetails.SQLStatementDetailsData other) {
        if (other == SQLStatementDetails.SQLStatementDetailsData.getDefaultInstance()) return this;
        if (other.hasStatementId()) {
          setStatementId(other.getStatementId());
        }
        if (other.hasTaskId()) {
          setTaskId(other.getTaskId());
        }
        if (other.hasDatabaseSystemLocationName()) {
          bitField0_ |= 0x00000004;
          databaseSystemLocationName_ = other.databaseSystemLocationName_;
          onChanged();
        }
        if (other.hasCorrelationToken()) {
          bitField0_ |= 0x00000008;
          correlationToken_ = other.correlationToken_;
          onChanged();
        }
        if (other.hasOriginalUserId()) {
          bitField0_ |= 0x00000010;
          originalUserId_ = other.originalUserId_;
          onChanged();
        }
        if (other.hasExternalName()) {
          bitField0_ |= 0x00000020;
          externalName_ = other.externalName_;
          onChanged();
        }
        if (other.hasPeerIdentifier()) {
          bitField0_ |= 0x00000040;
          peerIdentifier_ = other.peerIdentifier_;
          onChanged();
        }
        if (other.hasOriginalSqlStatementText()) {
          bitField0_ |= 0x00000080;
          originalSqlStatementText_ = other.originalSqlStatementText_;
          onChanged();
        }
        if (other.hasOriginalSqlStatementTextHash()) {
          setOriginalSqlStatementTextHash(other.getOriginalSqlStatementTextHash());
        }
        if (other.hasBackendSqlStatementText()) {
          bitField0_ |= 0x00000200;
          backendSqlStatementText_ = other.backendSqlStatementText_;
          onChanged();
        }
        if (other.hasBackendSqlStatementTextHash()) {
          setBackendSqlStatementTextHash(other.getBackendSqlStatementTextHash());
        }
        if (other.hasPackageName()) {
          bitField0_ |= 0x00000800;
          packageName_ = other.packageName_;
          onChanged();
        }
        if (other.hasCollectionId()) {
          bitField0_ |= 0x00001000;
          collectionId_ = other.collectionId_;
          onChanged();
        }
        if (other.hasDbidObidOfAccessedTables()) {
          bitField0_ |= 0x00002000;
          dbidObidOfAccessedTables_ = other.dbidObidOfAccessedTables_;
          onChanged();
        }
        if (other.hasBackendSqlSessionId()) {
          setBackendSqlSessionId(other.getBackendSqlSessionId());
        }
        if (other.hasBackendSqlApplicationId()) {
          bitField0_ |= 0x00008000;
          backendSqlApplicationId_ = other.backendSqlApplicationId_;
          onChanged();
        }
        if (other.hasTaskPriority()) {
          setTaskPriority(other.getTaskPriority());
        }
        if (other.hasSpecialRegisters()) {
          mergeSpecialRegisters(other.getSpecialRegisters());
        }
        if (other.hasFinished()) {
          setFinished(other.getFinished());
        }
        if (other.hasFinishState()) {
          setFinishState(other.getFinishState());
        }
        if (other.hasTimings()) {
          mergeTimings(other.getTimings());
        }
        if (other.hasExecutionResult()) {
          mergeExecutionResult(other.getExecutionResult());
        }
        if (other.hasWaitForData()) {
          mergeWaitForData(other.getWaitForData());
        }
        if (other.hasMultiRowInsert()) {
          mergeMultiRowInsert(other.getMultiRowInsert());
        }
        if (other.hasAuxiliaryData()) {
          bitField0_ |= 0x01000000;
          auxiliaryData_ = other.auxiliaryData_;
          onChanged();
        }
        if (other.hasClientAccountingDetails()) {
          mergeClientAccountingDetails(other.getClientAccountingDetails());
        }
        if (other.hasBackendSqlStatementTextHex()) {
          bitField0_ |= 0x04000000;
          backendSqlStatementTextHex_ = other.backendSqlStatementTextHex_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SQLStatementDetails.SQLStatementDetailsData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SQLStatementDetails.SQLStatementDetailsData) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private long statementId_ ;
      /**
       * <pre>
       **
       * This ID is unique within the scope of a single &#64;c DatabaseSystem (aka a pairing)
       * only. The highest used statement ID is stored persistently in file
       * "last-statement-id" in the same directory where the SQL history files reside.
       * </pre>
       *
       * <code>optional uint64 statement_id = 1;</code>
       * @return Whether the statementId field is set.
       */
      public boolean hasStatementId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       **
       * This ID is unique within the scope of a single &#64;c DatabaseSystem (aka a pairing)
       * only. The highest used statement ID is stored persistently in file
       * "last-statement-id" in the same directory where the SQL history files reside.
       * </pre>
       *
       * <code>optional uint64 statement_id = 1;</code>
       * @return The statementId.
       */
      public long getStatementId() {
        return statementId_;
      }
      /**
       * <pre>
       **
       * This ID is unique within the scope of a single &#64;c DatabaseSystem (aka a pairing)
       * only. The highest used statement ID is stored persistently in file
       * "last-statement-id" in the same directory where the SQL history files reside.
       * </pre>
       *
       * <code>optional uint64 statement_id = 1;</code>
       * @param value The statementId to set.
       * @return This builder for chaining.
       */
      public Builder setStatementId(long value) {
        bitField0_ |= 0x00000001;
        statementId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * This ID is unique within the scope of a single &#64;c DatabaseSystem (aka a pairing)
       * only. The highest used statement ID is stored persistently in file
       * "last-statement-id" in the same directory where the SQL history files reside.
       * </pre>
       *
       * <code>optional uint64 statement_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearStatementId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        statementId_ = 0L;
        onChanged();
        return this;
      }

      private long taskId_ ;
      /**
       * <pre>
       **
       * ID of the task that executes the SQL statement. Note that task IDs are reset
       * upon restart of the accelerator.
       * </pre>
       *
       * <code>optional uint64 task_id = 2;</code>
       * @return Whether the taskId field is set.
       */
      public boolean hasTaskId() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       **
       * ID of the task that executes the SQL statement. Note that task IDs are reset
       * upon restart of the accelerator.
       * </pre>
       *
       * <code>optional uint64 task_id = 2;</code>
       * @return The taskId.
       */
      public long getTaskId() {
        return taskId_;
      }
      /**
       * <pre>
       **
       * ID of the task that executes the SQL statement. Note that task IDs are reset
       * upon restart of the accelerator.
       * </pre>
       *
       * <code>optional uint64 task_id = 2;</code>
       * @param value The taskId to set.
       * @return This builder for chaining.
       */
      public Builder setTaskId(long value) {
        bitField0_ |= 0x00000002;
        taskId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * ID of the task that executes the SQL statement. Note that task IDs are reset
       * upon restart of the accelerator.
       * </pre>
       *
       * <code>optional uint64 task_id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearTaskId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        taskId_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object databaseSystemLocationName_ = "";
      /**
       * <pre>
       **
       * Each client must provide a unique location name when the pairing is established.
       * That location name is stored for each SQL statement here.
       * </pre>
       *
       * <code>optional string database_system_location_name = 3;</code>
       * @return Whether the databaseSystemLocationName field is set.
       */
      public boolean hasDatabaseSystemLocationName() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       **
       * Each client must provide a unique location name when the pairing is established.
       * That location name is stored for each SQL statement here.
       * </pre>
       *
       * <code>optional string database_system_location_name = 3;</code>
       * @return The databaseSystemLocationName.
       */
      public java.lang.String getDatabaseSystemLocationName() {
        java.lang.Object ref = databaseSystemLocationName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            databaseSystemLocationName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       **
       * Each client must provide a unique location name when the pairing is established.
       * That location name is stored for each SQL statement here.
       * </pre>
       *
       * <code>optional string database_system_location_name = 3;</code>
       * @return The bytes for databaseSystemLocationName.
       */
      public com.google.protobuf.ByteString
          getDatabaseSystemLocationNameBytes() {
        java.lang.Object ref = databaseSystemLocationName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          databaseSystemLocationName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       **
       * Each client must provide a unique location name when the pairing is established.
       * That location name is stored for each SQL statement here.
       * </pre>
       *
       * <code>optional string database_system_location_name = 3;</code>
       * @param value The databaseSystemLocationName to set.
       * @return This builder for chaining.
       */
      public Builder setDatabaseSystemLocationName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        databaseSystemLocationName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * Each client must provide a unique location name when the pairing is established.
       * That location name is stored for each SQL statement here.
       * </pre>
       *
       * <code>optional string database_system_location_name = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearDatabaseSystemLocationName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        databaseSystemLocationName_ = getDefaultInstance().getDatabaseSystemLocationName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * Each client must provide a unique location name when the pairing is established.
       * That location name is stored for each SQL statement here.
       * </pre>
       *
       * <code>optional string database_system_location_name = 3;</code>
       * @param value The bytes for databaseSystemLocationName to set.
       * @return This builder for chaining.
       */
      public Builder setDatabaseSystemLocationNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        databaseSystemLocationName_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object correlationToken_ = "";
      /**
       * <pre>
       **
       * The DRDA communication protocol used between the client and the accelerator
       * uses "correlation tokens" to identify the connection. The correlation token
       * is provided when the DRDA connection is established, and message ACCRDB
       * (Access Relational Database) carries it.
       * </pre>
       *
       * <code>optional string correlation_token = 4;</code>
       * @return Whether the correlationToken field is set.
       */
      public boolean hasCorrelationToken() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       **
       * The DRDA communication protocol used between the client and the accelerator
       * uses "correlation tokens" to identify the connection. The correlation token
       * is provided when the DRDA connection is established, and message ACCRDB
       * (Access Relational Database) carries it.
       * </pre>
       *
       * <code>optional string correlation_token = 4;</code>
       * @return The correlationToken.
       */
      public java.lang.String getCorrelationToken() {
        java.lang.Object ref = correlationToken_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            correlationToken_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       **
       * The DRDA communication protocol used between the client and the accelerator
       * uses "correlation tokens" to identify the connection. The correlation token
       * is provided when the DRDA connection is established, and message ACCRDB
       * (Access Relational Database) carries it.
       * </pre>
       *
       * <code>optional string correlation_token = 4;</code>
       * @return The bytes for correlationToken.
       */
      public com.google.protobuf.ByteString
          getCorrelationTokenBytes() {
        java.lang.Object ref = correlationToken_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          correlationToken_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       **
       * The DRDA communication protocol used between the client and the accelerator
       * uses "correlation tokens" to identify the connection. The correlation token
       * is provided when the DRDA connection is established, and message ACCRDB
       * (Access Relational Database) carries it.
       * </pre>
       *
       * <code>optional string correlation_token = 4;</code>
       * @param value The correlationToken to set.
       * @return This builder for chaining.
       */
      public Builder setCorrelationToken(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        correlationToken_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * The DRDA communication protocol used between the client and the accelerator
       * uses "correlation tokens" to identify the connection. The correlation token
       * is provided when the DRDA connection is established, and message ACCRDB
       * (Access Relational Database) carries it.
       * </pre>
       *
       * <code>optional string correlation_token = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearCorrelationToken() {
        bitField0_ = (bitField0_ & ~0x00000008);
        correlationToken_ = getDefaultInstance().getCorrelationToken();
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * The DRDA communication protocol used between the client and the accelerator
       * uses "correlation tokens" to identify the connection. The correlation token
       * is provided when the DRDA connection is established, and message ACCRDB
       * (Access Relational Database) carries it.
       * </pre>
       *
       * <code>optional string correlation_token = 4;</code>
       * @param value The bytes for correlationToken to set.
       * @return This builder for chaining.
       */
      public Builder setCorrelationTokenBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        correlationToken_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object originalUserId_ = "";
      /**
       * <pre>
       **
       * This is the user ID that was used when an application connects to the client
       * database system (DB2z) for executing the SQL statement.
       * </pre>
       *
       * <code>optional string original_user_id = 5;</code>
       * @return Whether the originalUserId field is set.
       */
      public boolean hasOriginalUserId() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       **
       * This is the user ID that was used when an application connects to the client
       * database system (DB2z) for executing the SQL statement.
       * </pre>
       *
       * <code>optional string original_user_id = 5;</code>
       * @return The originalUserId.
       */
      public java.lang.String getOriginalUserId() {
        java.lang.Object ref = originalUserId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            originalUserId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       **
       * This is the user ID that was used when an application connects to the client
       * database system (DB2z) for executing the SQL statement.
       * </pre>
       *
       * <code>optional string original_user_id = 5;</code>
       * @return The bytes for originalUserId.
       */
      public com.google.protobuf.ByteString
          getOriginalUserIdBytes() {
        java.lang.Object ref = originalUserId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          originalUserId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       **
       * This is the user ID that was used when an application connects to the client
       * database system (DB2z) for executing the SQL statement.
       * </pre>
       *
       * <code>optional string original_user_id = 5;</code>
       * @param value The originalUserId to set.
       * @return This builder for chaining.
       */
      public Builder setOriginalUserId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        originalUserId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * This is the user ID that was used when an application connects to the client
       * database system (DB2z) for executing the SQL statement.
       * </pre>
       *
       * <code>optional string original_user_id = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearOriginalUserId() {
        bitField0_ = (bitField0_ & ~0x00000010);
        originalUserId_ = getDefaultInstance().getOriginalUserId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * This is the user ID that was used when an application connects to the client
       * database system (DB2z) for executing the SQL statement.
       * </pre>
       *
       * <code>optional string original_user_id = 5;</code>
       * @param value The bytes for originalUserId to set.
       * @return This builder for chaining.
       */
      public Builder setOriginalUserIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        originalUserId_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object externalName_ = "";
      /**
       * <pre>
       **
       * The DRDA communication protocol used between the client and the accelerator
       * contains an "external name". This name is provided in DRDA message EXCSAT
       * (Exchange Server Attributes) in field EXTNAM (External Name).
       * </pre>
       *
       * <code>optional string external_name = 6;</code>
       * @return Whether the externalName field is set.
       */
      public boolean hasExternalName() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       **
       * The DRDA communication protocol used between the client and the accelerator
       * contains an "external name". This name is provided in DRDA message EXCSAT
       * (Exchange Server Attributes) in field EXTNAM (External Name).
       * </pre>
       *
       * <code>optional string external_name = 6;</code>
       * @return The externalName.
       */
      public java.lang.String getExternalName() {
        java.lang.Object ref = externalName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            externalName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       **
       * The DRDA communication protocol used between the client and the accelerator
       * contains an "external name". This name is provided in DRDA message EXCSAT
       * (Exchange Server Attributes) in field EXTNAM (External Name).
       * </pre>
       *
       * <code>optional string external_name = 6;</code>
       * @return The bytes for externalName.
       */
      public com.google.protobuf.ByteString
          getExternalNameBytes() {
        java.lang.Object ref = externalName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          externalName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       **
       * The DRDA communication protocol used between the client and the accelerator
       * contains an "external name". This name is provided in DRDA message EXCSAT
       * (Exchange Server Attributes) in field EXTNAM (External Name).
       * </pre>
       *
       * <code>optional string external_name = 6;</code>
       * @param value The externalName to set.
       * @return This builder for chaining.
       */
      public Builder setExternalName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        externalName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * The DRDA communication protocol used between the client and the accelerator
       * contains an "external name". This name is provided in DRDA message EXCSAT
       * (Exchange Server Attributes) in field EXTNAM (External Name).
       * </pre>
       *
       * <code>optional string external_name = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearExternalName() {
        bitField0_ = (bitField0_ & ~0x00000020);
        externalName_ = getDefaultInstance().getExternalName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * The DRDA communication protocol used between the client and the accelerator
       * contains an "external name". This name is provided in DRDA message EXCSAT
       * (Exchange Server Attributes) in field EXTNAM (External Name).
       * </pre>
       *
       * <code>optional string external_name = 6;</code>
       * @param value The bytes for externalName to set.
       * @return This builder for chaining.
       */
      public Builder setExternalNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        externalName_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object peerIdentifier_ = "";
      /**
       * <pre>
       **
       * The client's IP address is obtained from the TCP/IP connection itself by
       * querying the respective attributes from the socket.
       * The client's port number is _not_ included because the port numbers are
       * typically assigned randomly by the client's operating system when a
       * &#64;c connect() system call is made.
       * </pre>
       *
       * <code>optional string peer_identifier = 7;</code>
       * @return Whether the peerIdentifier field is set.
       */
      public boolean hasPeerIdentifier() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       **
       * The client's IP address is obtained from the TCP/IP connection itself by
       * querying the respective attributes from the socket.
       * The client's port number is _not_ included because the port numbers are
       * typically assigned randomly by the client's operating system when a
       * &#64;c connect() system call is made.
       * </pre>
       *
       * <code>optional string peer_identifier = 7;</code>
       * @return The peerIdentifier.
       */
      public java.lang.String getPeerIdentifier() {
        java.lang.Object ref = peerIdentifier_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            peerIdentifier_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       **
       * The client's IP address is obtained from the TCP/IP connection itself by
       * querying the respective attributes from the socket.
       * The client's port number is _not_ included because the port numbers are
       * typically assigned randomly by the client's operating system when a
       * &#64;c connect() system call is made.
       * </pre>
       *
       * <code>optional string peer_identifier = 7;</code>
       * @return The bytes for peerIdentifier.
       */
      public com.google.protobuf.ByteString
          getPeerIdentifierBytes() {
        java.lang.Object ref = peerIdentifier_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          peerIdentifier_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       **
       * The client's IP address is obtained from the TCP/IP connection itself by
       * querying the respective attributes from the socket.
       * The client's port number is _not_ included because the port numbers are
       * typically assigned randomly by the client's operating system when a
       * &#64;c connect() system call is made.
       * </pre>
       *
       * <code>optional string peer_identifier = 7;</code>
       * @param value The peerIdentifier to set.
       * @return This builder for chaining.
       */
      public Builder setPeerIdentifier(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        peerIdentifier_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * The client's IP address is obtained from the TCP/IP connection itself by
       * querying the respective attributes from the socket.
       * The client's port number is _not_ included because the port numbers are
       * typically assigned randomly by the client's operating system when a
       * &#64;c connect() system call is made.
       * </pre>
       *
       * <code>optional string peer_identifier = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearPeerIdentifier() {
        bitField0_ = (bitField0_ & ~0x00000040);
        peerIdentifier_ = getDefaultInstance().getPeerIdentifier();
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * The client's IP address is obtained from the TCP/IP connection itself by
       * querying the respective attributes from the socket.
       * The client's port number is _not_ included because the port numbers are
       * typically assigned randomly by the client's operating system when a
       * &#64;c connect() system call is made.
       * </pre>
       *
       * <code>optional string peer_identifier = 7;</code>
       * @param value The bytes for peerIdentifier to set.
       * @return This builder for chaining.
       */
      public Builder setPeerIdentifierBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        peerIdentifier_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object originalSqlStatementText_ = "";
      /**
       * <pre>
       **
       * An application sends a SQL statement to our client (DB2z). The client
       * rewrites this original SQL statement to the backend (and does syntax
       * adjustments, table name mappings). The original SQL statement text is
       * provided to the accelerator, primarily for diagnostics purposes.
       * </pre>
       *
       * <code>optional string original_sql_statement_text = 8;</code>
       * @return Whether the originalSqlStatementText field is set.
       */
      public boolean hasOriginalSqlStatementText() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <pre>
       **
       * An application sends a SQL statement to our client (DB2z). The client
       * rewrites this original SQL statement to the backend (and does syntax
       * adjustments, table name mappings). The original SQL statement text is
       * provided to the accelerator, primarily for diagnostics purposes.
       * </pre>
       *
       * <code>optional string original_sql_statement_text = 8;</code>
       * @return The originalSqlStatementText.
       */
      public java.lang.String getOriginalSqlStatementText() {
        java.lang.Object ref = originalSqlStatementText_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            originalSqlStatementText_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       **
       * An application sends a SQL statement to our client (DB2z). The client
       * rewrites this original SQL statement to the backend (and does syntax
       * adjustments, table name mappings). The original SQL statement text is
       * provided to the accelerator, primarily for diagnostics purposes.
       * </pre>
       *
       * <code>optional string original_sql_statement_text = 8;</code>
       * @return The bytes for originalSqlStatementText.
       */
      public com.google.protobuf.ByteString
          getOriginalSqlStatementTextBytes() {
        java.lang.Object ref = originalSqlStatementText_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          originalSqlStatementText_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       **
       * An application sends a SQL statement to our client (DB2z). The client
       * rewrites this original SQL statement to the backend (and does syntax
       * adjustments, table name mappings). The original SQL statement text is
       * provided to the accelerator, primarily for diagnostics purposes.
       * </pre>
       *
       * <code>optional string original_sql_statement_text = 8;</code>
       * @param value The originalSqlStatementText to set.
       * @return This builder for chaining.
       */
      public Builder setOriginalSqlStatementText(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
        originalSqlStatementText_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * An application sends a SQL statement to our client (DB2z). The client
       * rewrites this original SQL statement to the backend (and does syntax
       * adjustments, table name mappings). The original SQL statement text is
       * provided to the accelerator, primarily for diagnostics purposes.
       * </pre>
       *
       * <code>optional string original_sql_statement_text = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearOriginalSqlStatementText() {
        bitField0_ = (bitField0_ & ~0x00000080);
        originalSqlStatementText_ = getDefaultInstance().getOriginalSqlStatementText();
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * An application sends a SQL statement to our client (DB2z). The client
       * rewrites this original SQL statement to the backend (and does syntax
       * adjustments, table name mappings). The original SQL statement text is
       * provided to the accelerator, primarily for diagnostics purposes.
       * </pre>
       *
       * <code>optional string original_sql_statement_text = 8;</code>
       * @param value The bytes for originalSqlStatementText to set.
       * @return This builder for chaining.
       */
      public Builder setOriginalSqlStatementTextBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
        originalSqlStatementText_ = value;
        onChanged();
        return this;
      }

      private long originalSqlStatementTextHash_ ;
      /**
       * <pre>
       **
       * For complex SQL statements it is sometimes not easy to spot differences in
       * the original SQL statement text. Here we store a hash so that it is much easier
       * to identify whether the original SQL statement text for two different statements
       * is the same or not.
       * </pre>
       *
       * <code>optional uint64 original_sql_statement_text_hash = 9;</code>
       * @return Whether the originalSqlStatementTextHash field is set.
       */
      public boolean hasOriginalSqlStatementTextHash() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <pre>
       **
       * For complex SQL statements it is sometimes not easy to spot differences in
       * the original SQL statement text. Here we store a hash so that it is much easier
       * to identify whether the original SQL statement text for two different statements
       * is the same or not.
       * </pre>
       *
       * <code>optional uint64 original_sql_statement_text_hash = 9;</code>
       * @return The originalSqlStatementTextHash.
       */
      public long getOriginalSqlStatementTextHash() {
        return originalSqlStatementTextHash_;
      }
      /**
       * <pre>
       **
       * For complex SQL statements it is sometimes not easy to spot differences in
       * the original SQL statement text. Here we store a hash so that it is much easier
       * to identify whether the original SQL statement text for two different statements
       * is the same or not.
       * </pre>
       *
       * <code>optional uint64 original_sql_statement_text_hash = 9;</code>
       * @param value The originalSqlStatementTextHash to set.
       * @return This builder for chaining.
       */
      public Builder setOriginalSqlStatementTextHash(long value) {
        bitField0_ |= 0x00000100;
        originalSqlStatementTextHash_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * For complex SQL statements it is sometimes not easy to spot differences in
       * the original SQL statement text. Here we store a hash so that it is much easier
       * to identify whether the original SQL statement text for two different statements
       * is the same or not.
       * </pre>
       *
       * <code>optional uint64 original_sql_statement_text_hash = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearOriginalSqlStatementTextHash() {
        bitField0_ = (bitField0_ & ~0x00000100);
        originalSqlStatementTextHash_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object backendSqlStatementText_ = "";
      /**
       * <pre>
       **
       * The original SQL statement text (see &#64;c original_sql_statement_text)
       * is rewritten by the client to adhere to the backend's SQL syntax and
       * use the table/view names defined by the accelerator. This field here
       * contains the rewritten SQL statement text, which is actually executed
       * in the backend as-is.
       * </pre>
       *
       * <code>optional string backend_sql_statement_text = 10;</code>
       * @return Whether the backendSqlStatementText field is set.
       */
      public boolean hasBackendSqlStatementText() {
        return ((bitField0_ & 0x00000200) != 0);
      }
      /**
       * <pre>
       **
       * The original SQL statement text (see &#64;c original_sql_statement_text)
       * is rewritten by the client to adhere to the backend's SQL syntax and
       * use the table/view names defined by the accelerator. This field here
       * contains the rewritten SQL statement text, which is actually executed
       * in the backend as-is.
       * </pre>
       *
       * <code>optional string backend_sql_statement_text = 10;</code>
       * @return The backendSqlStatementText.
       */
      public java.lang.String getBackendSqlStatementText() {
        java.lang.Object ref = backendSqlStatementText_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            backendSqlStatementText_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       **
       * The original SQL statement text (see &#64;c original_sql_statement_text)
       * is rewritten by the client to adhere to the backend's SQL syntax and
       * use the table/view names defined by the accelerator. This field here
       * contains the rewritten SQL statement text, which is actually executed
       * in the backend as-is.
       * </pre>
       *
       * <code>optional string backend_sql_statement_text = 10;</code>
       * @return The bytes for backendSqlStatementText.
       */
      public com.google.protobuf.ByteString
          getBackendSqlStatementTextBytes() {
        java.lang.Object ref = backendSqlStatementText_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          backendSqlStatementText_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       **
       * The original SQL statement text (see &#64;c original_sql_statement_text)
       * is rewritten by the client to adhere to the backend's SQL syntax and
       * use the table/view names defined by the accelerator. This field here
       * contains the rewritten SQL statement text, which is actually executed
       * in the backend as-is.
       * </pre>
       *
       * <code>optional string backend_sql_statement_text = 10;</code>
       * @param value The backendSqlStatementText to set.
       * @return This builder for chaining.
       */
      public Builder setBackendSqlStatementText(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
        backendSqlStatementText_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * The original SQL statement text (see &#64;c original_sql_statement_text)
       * is rewritten by the client to adhere to the backend's SQL syntax and
       * use the table/view names defined by the accelerator. This field here
       * contains the rewritten SQL statement text, which is actually executed
       * in the backend as-is.
       * </pre>
       *
       * <code>optional string backend_sql_statement_text = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearBackendSqlStatementText() {
        bitField0_ = (bitField0_ & ~0x00000200);
        backendSqlStatementText_ = getDefaultInstance().getBackendSqlStatementText();
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * The original SQL statement text (see &#64;c original_sql_statement_text)
       * is rewritten by the client to adhere to the backend's SQL syntax and
       * use the table/view names defined by the accelerator. This field here
       * contains the rewritten SQL statement text, which is actually executed
       * in the backend as-is.
       * </pre>
       *
       * <code>optional string backend_sql_statement_text = 10;</code>
       * @param value The bytes for backendSqlStatementText to set.
       * @return This builder for chaining.
       */
      public Builder setBackendSqlStatementTextBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
        backendSqlStatementText_ = value;
        onChanged();
        return this;
      }

      private long backendSqlStatementTextHash_ ;
      /**
       * <pre>
       **
       * For complex SQL statements it is sometimes not easy to spot differences in
       * the backend SQL statement text. Here we store a hash so that it is much easier
       * to identify whether the backend SQL statement text for two different statements
       * is the same or not.
       * </pre>
       *
       * <code>optional uint64 backend_sql_statement_text_hash = 11;</code>
       * @return Whether the backendSqlStatementTextHash field is set.
       */
      public boolean hasBackendSqlStatementTextHash() {
        return ((bitField0_ & 0x00000400) != 0);
      }
      /**
       * <pre>
       **
       * For complex SQL statements it is sometimes not easy to spot differences in
       * the backend SQL statement text. Here we store a hash so that it is much easier
       * to identify whether the backend SQL statement text for two different statements
       * is the same or not.
       * </pre>
       *
       * <code>optional uint64 backend_sql_statement_text_hash = 11;</code>
       * @return The backendSqlStatementTextHash.
       */
      public long getBackendSqlStatementTextHash() {
        return backendSqlStatementTextHash_;
      }
      /**
       * <pre>
       **
       * For complex SQL statements it is sometimes not easy to spot differences in
       * the backend SQL statement text. Here we store a hash so that it is much easier
       * to identify whether the backend SQL statement text for two different statements
       * is the same or not.
       * </pre>
       *
       * <code>optional uint64 backend_sql_statement_text_hash = 11;</code>
       * @param value The backendSqlStatementTextHash to set.
       * @return This builder for chaining.
       */
      public Builder setBackendSqlStatementTextHash(long value) {
        bitField0_ |= 0x00000400;
        backendSqlStatementTextHash_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * For complex SQL statements it is sometimes not easy to spot differences in
       * the backend SQL statement text. Here we store a hash so that it is much easier
       * to identify whether the backend SQL statement text for two different statements
       * is the same or not.
       * </pre>
       *
       * <code>optional uint64 backend_sql_statement_text_hash = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearBackendSqlStatementTextHash() {
        bitField0_ = (bitField0_ & ~0x00000400);
        backendSqlStatementTextHash_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object packageName_ = "";
      /**
       * <pre>
       **
       * If the client routes a static SQL statement to the accelerator, this
       * field contains the name of the package in which that SQL statement was
       * compiled into.
       * </pre>
       *
       * <code>optional string package_name = 12;</code>
       * @return Whether the packageName field is set.
       */
      public boolean hasPackageName() {
        return ((bitField0_ & 0x00000800) != 0);
      }
      /**
       * <pre>
       **
       * If the client routes a static SQL statement to the accelerator, this
       * field contains the name of the package in which that SQL statement was
       * compiled into.
       * </pre>
       *
       * <code>optional string package_name = 12;</code>
       * @return The packageName.
       */
      public java.lang.String getPackageName() {
        java.lang.Object ref = packageName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            packageName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       **
       * If the client routes a static SQL statement to the accelerator, this
       * field contains the name of the package in which that SQL statement was
       * compiled into.
       * </pre>
       *
       * <code>optional string package_name = 12;</code>
       * @return The bytes for packageName.
       */
      public com.google.protobuf.ByteString
          getPackageNameBytes() {
        java.lang.Object ref = packageName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          packageName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       **
       * If the client routes a static SQL statement to the accelerator, this
       * field contains the name of the package in which that SQL statement was
       * compiled into.
       * </pre>
       *
       * <code>optional string package_name = 12;</code>
       * @param value The packageName to set.
       * @return This builder for chaining.
       */
      public Builder setPackageName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
        packageName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * If the client routes a static SQL statement to the accelerator, this
       * field contains the name of the package in which that SQL statement was
       * compiled into.
       * </pre>
       *
       * <code>optional string package_name = 12;</code>
       * @return This builder for chaining.
       */
      public Builder clearPackageName() {
        bitField0_ = (bitField0_ & ~0x00000800);
        packageName_ = getDefaultInstance().getPackageName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * If the client routes a static SQL statement to the accelerator, this
       * field contains the name of the package in which that SQL statement was
       * compiled into.
       * </pre>
       *
       * <code>optional string package_name = 12;</code>
       * @param value The bytes for packageName to set.
       * @return This builder for chaining.
       */
      public Builder setPackageNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
        packageName_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object collectionId_ = "";
      /**
       * <pre>
       **
       * If the client routes a static SQL statement to the accelerator, this
       * field contains the collection ID related to that SQL statement.
       * </pre>
       *
       * <code>optional string collection_id = 13;</code>
       * @return Whether the collectionId field is set.
       */
      public boolean hasCollectionId() {
        return ((bitField0_ & 0x00001000) != 0);
      }
      /**
       * <pre>
       **
       * If the client routes a static SQL statement to the accelerator, this
       * field contains the collection ID related to that SQL statement.
       * </pre>
       *
       * <code>optional string collection_id = 13;</code>
       * @return The collectionId.
       */
      public java.lang.String getCollectionId() {
        java.lang.Object ref = collectionId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            collectionId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       **
       * If the client routes a static SQL statement to the accelerator, this
       * field contains the collection ID related to that SQL statement.
       * </pre>
       *
       * <code>optional string collection_id = 13;</code>
       * @return The bytes for collectionId.
       */
      public com.google.protobuf.ByteString
          getCollectionIdBytes() {
        java.lang.Object ref = collectionId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          collectionId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       **
       * If the client routes a static SQL statement to the accelerator, this
       * field contains the collection ID related to that SQL statement.
       * </pre>
       *
       * <code>optional string collection_id = 13;</code>
       * @param value The collectionId to set.
       * @return This builder for chaining.
       */
      public Builder setCollectionId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00001000;
        collectionId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * If the client routes a static SQL statement to the accelerator, this
       * field contains the collection ID related to that SQL statement.
       * </pre>
       *
       * <code>optional string collection_id = 13;</code>
       * @return This builder for chaining.
       */
      public Builder clearCollectionId() {
        bitField0_ = (bitField0_ & ~0x00001000);
        collectionId_ = getDefaultInstance().getCollectionId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * If the client routes a static SQL statement to the accelerator, this
       * field contains the collection ID related to that SQL statement.
       * </pre>
       *
       * <code>optional string collection_id = 13;</code>
       * @param value The bytes for collectionId to set.
       * @return This builder for chaining.
       */
      public Builder setCollectionIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00001000;
        collectionId_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object dbidObidOfAccessedTables_ = "";
      /**
       * <pre>
       **
       * The client provides all IDs of tables that are referenced in a SQL statement.
       * Those tables are identified in DB2z by a pair of DBID/OBID (Database ID and
       * Object ID).
       * </pre>
       *
       * <code>optional string dbid_obid_of_accessed_tables = 14;</code>
       * @return Whether the dbidObidOfAccessedTables field is set.
       */
      public boolean hasDbidObidOfAccessedTables() {
        return ((bitField0_ & 0x00002000) != 0);
      }
      /**
       * <pre>
       **
       * The client provides all IDs of tables that are referenced in a SQL statement.
       * Those tables are identified in DB2z by a pair of DBID/OBID (Database ID and
       * Object ID).
       * </pre>
       *
       * <code>optional string dbid_obid_of_accessed_tables = 14;</code>
       * @return The dbidObidOfAccessedTables.
       */
      public java.lang.String getDbidObidOfAccessedTables() {
        java.lang.Object ref = dbidObidOfAccessedTables_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            dbidObidOfAccessedTables_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       **
       * The client provides all IDs of tables that are referenced in a SQL statement.
       * Those tables are identified in DB2z by a pair of DBID/OBID (Database ID and
       * Object ID).
       * </pre>
       *
       * <code>optional string dbid_obid_of_accessed_tables = 14;</code>
       * @return The bytes for dbidObidOfAccessedTables.
       */
      public com.google.protobuf.ByteString
          getDbidObidOfAccessedTablesBytes() {
        java.lang.Object ref = dbidObidOfAccessedTables_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          dbidObidOfAccessedTables_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       **
       * The client provides all IDs of tables that are referenced in a SQL statement.
       * Those tables are identified in DB2z by a pair of DBID/OBID (Database ID and
       * Object ID).
       * </pre>
       *
       * <code>optional string dbid_obid_of_accessed_tables = 14;</code>
       * @param value The dbidObidOfAccessedTables to set.
       * @return This builder for chaining.
       */
      public Builder setDbidObidOfAccessedTables(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00002000;
        dbidObidOfAccessedTables_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * The client provides all IDs of tables that are referenced in a SQL statement.
       * Those tables are identified in DB2z by a pair of DBID/OBID (Database ID and
       * Object ID).
       * </pre>
       *
       * <code>optional string dbid_obid_of_accessed_tables = 14;</code>
       * @return This builder for chaining.
       */
      public Builder clearDbidObidOfAccessedTables() {
        bitField0_ = (bitField0_ & ~0x00002000);
        dbidObidOfAccessedTables_ = getDefaultInstance().getDbidObidOfAccessedTables();
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * The client provides all IDs of tables that are referenced in a SQL statement.
       * Those tables are identified in DB2z by a pair of DBID/OBID (Database ID and
       * Object ID).
       * </pre>
       *
       * <code>optional string dbid_obid_of_accessed_tables = 14;</code>
       * @param value The bytes for dbidObidOfAccessedTables to set.
       * @return This builder for chaining.
       */
      public Builder setDbidObidOfAccessedTablesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00002000;
        dbidObidOfAccessedTables_ = value;
        onChanged();
        return this;
      }

      private long backendSqlSessionId_ ;
      /**
       * <pre>
       **
       * Each SQL connection to the backend has an application handle. The application
       * handle for the SQL connection on which the SQL statement is executed is
       * stored here as SQL session ID.
       * </pre>
       *
       * <code>optional int64 backend_sql_session_id = 15;</code>
       * @return Whether the backendSqlSessionId field is set.
       */
      public boolean hasBackendSqlSessionId() {
        return ((bitField0_ & 0x00004000) != 0);
      }
      /**
       * <pre>
       **
       * Each SQL connection to the backend has an application handle. The application
       * handle for the SQL connection on which the SQL statement is executed is
       * stored here as SQL session ID.
       * </pre>
       *
       * <code>optional int64 backend_sql_session_id = 15;</code>
       * @return The backendSqlSessionId.
       */
      public long getBackendSqlSessionId() {
        return backendSqlSessionId_;
      }
      /**
       * <pre>
       **
       * Each SQL connection to the backend has an application handle. The application
       * handle for the SQL connection on which the SQL statement is executed is
       * stored here as SQL session ID.
       * </pre>
       *
       * <code>optional int64 backend_sql_session_id = 15;</code>
       * @param value The backendSqlSessionId to set.
       * @return This builder for chaining.
       */
      public Builder setBackendSqlSessionId(long value) {
        bitField0_ |= 0x00004000;
        backendSqlSessionId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * Each SQL connection to the backend has an application handle. The application
       * handle for the SQL connection on which the SQL statement is executed is
       * stored here as SQL session ID.
       * </pre>
       *
       * <code>optional int64 backend_sql_session_id = 15;</code>
       * @return This builder for chaining.
       */
      public Builder clearBackendSqlSessionId() {
        bitField0_ = (bitField0_ & ~0x00004000);
        backendSqlSessionId_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object backendSqlApplicationId_ = "";
      /**
       * <pre>
       **
       * Besides the application handle (see field &#64;c backend_sql_session_id), the
       * backend has an application ID assigned to each SQL connection.
       * </pre>
       *
       * <code>optional string backend_sql_application_id = 16;</code>
       * @return Whether the backendSqlApplicationId field is set.
       */
      public boolean hasBackendSqlApplicationId() {
        return ((bitField0_ & 0x00008000) != 0);
      }
      /**
       * <pre>
       **
       * Besides the application handle (see field &#64;c backend_sql_session_id), the
       * backend has an application ID assigned to each SQL connection.
       * </pre>
       *
       * <code>optional string backend_sql_application_id = 16;</code>
       * @return The backendSqlApplicationId.
       */
      public java.lang.String getBackendSqlApplicationId() {
        java.lang.Object ref = backendSqlApplicationId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            backendSqlApplicationId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       **
       * Besides the application handle (see field &#64;c backend_sql_session_id), the
       * backend has an application ID assigned to each SQL connection.
       * </pre>
       *
       * <code>optional string backend_sql_application_id = 16;</code>
       * @return The bytes for backendSqlApplicationId.
       */
      public com.google.protobuf.ByteString
          getBackendSqlApplicationIdBytes() {
        java.lang.Object ref = backendSqlApplicationId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          backendSqlApplicationId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       **
       * Besides the application handle (see field &#64;c backend_sql_session_id), the
       * backend has an application ID assigned to each SQL connection.
       * </pre>
       *
       * <code>optional string backend_sql_application_id = 16;</code>
       * @param value The backendSqlApplicationId to set.
       * @return This builder for chaining.
       */
      public Builder setBackendSqlApplicationId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00008000;
        backendSqlApplicationId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * Besides the application handle (see field &#64;c backend_sql_session_id), the
       * backend has an application ID assigned to each SQL connection.
       * </pre>
       *
       * <code>optional string backend_sql_application_id = 16;</code>
       * @return This builder for chaining.
       */
      public Builder clearBackendSqlApplicationId() {
        bitField0_ = (bitField0_ & ~0x00008000);
        backendSqlApplicationId_ = getDefaultInstance().getBackendSqlApplicationId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * Besides the application handle (see field &#64;c backend_sql_session_id), the
       * backend has an application ID assigned to each SQL connection.
       * </pre>
       *
       * <code>optional string backend_sql_application_id = 16;</code>
       * @param value The bytes for backendSqlApplicationId to set.
       * @return This builder for chaining.
       */
      public Builder setBackendSqlApplicationIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00008000;
        backendSqlApplicationId_ = value;
        onChanged();
        return this;
      }

      private int taskPriority_ ;
      /**
       * <pre>
       **
       * The task priority is derived from the client's WLM (workload management) importance level.
       * </pre>
       *
       * <code>optional int32 task_priority = 17;</code>
       * @return Whether the taskPriority field is set.
       */
      public boolean hasTaskPriority() {
        return ((bitField0_ & 0x00010000) != 0);
      }
      /**
       * <pre>
       **
       * The task priority is derived from the client's WLM (workload management) importance level.
       * </pre>
       *
       * <code>optional int32 task_priority = 17;</code>
       * @return The taskPriority.
       */
      public int getTaskPriority() {
        return taskPriority_;
      }
      /**
       * <pre>
       **
       * The task priority is derived from the client's WLM (workload management) importance level.
       * </pre>
       *
       * <code>optional int32 task_priority = 17;</code>
       * @param value The taskPriority to set.
       * @return This builder for chaining.
       */
      public Builder setTaskPriority(int value) {
        bitField0_ |= 0x00010000;
        taskPriority_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * The task priority is derived from the client's WLM (workload management) importance level.
       * </pre>
       *
       * <code>optional int32 task_priority = 17;</code>
       * @return This builder for chaining.
       */
      public Builder clearTaskPriority() {
        bitField0_ = (bitField0_ & ~0x00010000);
        taskPriority_ = 0;
        onChanged();
        return this;
      }

      private SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters specialRegisters_;
      private com.google.protobuf.SingleFieldBuilderV3<
          SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters, SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters.Builder, SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegistersOrBuilder> specialRegistersBuilder_;
      /**
       * <code>optional .SQLStatementDetailsData.QuerySpecialRegisters special_registers = 18;</code>
       * @return Whether the specialRegisters field is set.
       */
      public boolean hasSpecialRegisters() {
        return ((bitField0_ & 0x00020000) != 0);
      }
      /**
       * <code>optional .SQLStatementDetailsData.QuerySpecialRegisters special_registers = 18;</code>
       * @return The specialRegisters.
       */
      public SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters getSpecialRegisters() {
        if (specialRegistersBuilder_ == null) {
          return specialRegisters_ == null ? SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters.getDefaultInstance() : specialRegisters_;
        } else {
          return specialRegistersBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SQLStatementDetailsData.QuerySpecialRegisters special_registers = 18;</code>
       */
      public Builder setSpecialRegisters(SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters value) {
        if (specialRegistersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          specialRegisters_ = value;
          onChanged();
        } else {
          specialRegistersBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .SQLStatementDetailsData.QuerySpecialRegisters special_registers = 18;</code>
       */
      public Builder setSpecialRegisters(
          SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters.Builder builderForValue) {
        if (specialRegistersBuilder_ == null) {
          specialRegisters_ = builderForValue.build();
          onChanged();
        } else {
          specialRegistersBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .SQLStatementDetailsData.QuerySpecialRegisters special_registers = 18;</code>
       */
      public Builder mergeSpecialRegisters(SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters value) {
        if (specialRegistersBuilder_ == null) {
          if (((bitField0_ & 0x00020000) != 0) &&
              specialRegisters_ != null &&
              specialRegisters_ != SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters.getDefaultInstance()) {
            specialRegisters_ =
              SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters.newBuilder(specialRegisters_).mergeFrom(value).buildPartial();
          } else {
            specialRegisters_ = value;
          }
          onChanged();
        } else {
          specialRegistersBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .SQLStatementDetailsData.QuerySpecialRegisters special_registers = 18;</code>
       */
      public Builder clearSpecialRegisters() {
        if (specialRegistersBuilder_ == null) {
          specialRegisters_ = null;
          onChanged();
        } else {
          specialRegistersBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00020000);
        return this;
      }
      /**
       * <code>optional .SQLStatementDetailsData.QuerySpecialRegisters special_registers = 18;</code>
       */
      public SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters.Builder getSpecialRegistersBuilder() {
        bitField0_ |= 0x00020000;
        onChanged();
        return getSpecialRegistersFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SQLStatementDetailsData.QuerySpecialRegisters special_registers = 18;</code>
       */
      public SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegistersOrBuilder getSpecialRegistersOrBuilder() {
        if (specialRegistersBuilder_ != null) {
          return specialRegistersBuilder_.getMessageOrBuilder();
        } else {
          return specialRegisters_ == null ?
              SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters.getDefaultInstance() : specialRegisters_;
        }
      }
      /**
       * <code>optional .SQLStatementDetailsData.QuerySpecialRegisters special_registers = 18;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters, SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters.Builder, SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegistersOrBuilder>
          getSpecialRegistersFieldBuilder() {
        if (specialRegistersBuilder_ == null) {
          specialRegistersBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters, SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegisters.Builder, SQLStatementDetails.SQLStatementDetailsData.QuerySpecialRegistersOrBuilder>(
                  getSpecialRegisters(),
                  getParentForChildren(),
                  isClean());
          specialRegisters_ = null;
        }
        return specialRegistersBuilder_;
      }

      private boolean finished_ ;
      /**
       * <pre>
       *&#47; indicator whether execution of the SQL statement has finished
       * </pre>
       *
       * <code>optional bool finished = 19;</code>
       * @return Whether the finished field is set.
       */
      public boolean hasFinished() {
        return ((bitField0_ & 0x00040000) != 0);
      }
      /**
       * <pre>
       *&#47; indicator whether execution of the SQL statement has finished
       * </pre>
       *
       * <code>optional bool finished = 19;</code>
       * @return The finished.
       */
      public boolean getFinished() {
        return finished_;
      }
      /**
       * <pre>
       *&#47; indicator whether execution of the SQL statement has finished
       * </pre>
       *
       * <code>optional bool finished = 19;</code>
       * @param value The finished to set.
       * @return This builder for chaining.
       */
      public Builder setFinished(boolean value) {
        bitField0_ |= 0x00040000;
        finished_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47; indicator whether execution of the SQL statement has finished
       * </pre>
       *
       * <code>optional bool finished = 19;</code>
       * @return This builder for chaining.
       */
      public Builder clearFinished() {
        bitField0_ = (bitField0_ & ~0x00040000);
        finished_ = false;
        onChanged();
        return this;
      }

      private int finishState_ ;
      /**
       * <pre>
       **
       * The state how the SQL statement execution was finished is one of:
       *  - 3 = DONE (successful completion without error)
       *  - 4 = ABORTED (execution failed with some error - either in the backend or in the accelerator)
       *  - 5 = CANCELLED (execution was canceled)
       * </pre>
       *
       * <code>optional uint32 finish_state = 20;</code>
       * @return Whether the finishState field is set.
       */
      public boolean hasFinishState() {
        return ((bitField0_ & 0x00080000) != 0);
      }
      /**
       * <pre>
       **
       * The state how the SQL statement execution was finished is one of:
       *  - 3 = DONE (successful completion without error)
       *  - 4 = ABORTED (execution failed with some error - either in the backend or in the accelerator)
       *  - 5 = CANCELLED (execution was canceled)
       * </pre>
       *
       * <code>optional uint32 finish_state = 20;</code>
       * @return The finishState.
       */
      public int getFinishState() {
        return finishState_;
      }
      /**
       * <pre>
       **
       * The state how the SQL statement execution was finished is one of:
       *  - 3 = DONE (successful completion without error)
       *  - 4 = ABORTED (execution failed with some error - either in the backend or in the accelerator)
       *  - 5 = CANCELLED (execution was canceled)
       * </pre>
       *
       * <code>optional uint32 finish_state = 20;</code>
       * @param value The finishState to set.
       * @return This builder for chaining.
       */
      public Builder setFinishState(int value) {
        bitField0_ |= 0x00080000;
        finishState_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * The state how the SQL statement execution was finished is one of:
       *  - 3 = DONE (successful completion without error)
       *  - 4 = ABORTED (execution failed with some error - either in the backend or in the accelerator)
       *  - 5 = CANCELLED (execution was canceled)
       * </pre>
       *
       * <code>optional uint32 finish_state = 20;</code>
       * @return This builder for chaining.
       */
      public Builder clearFinishState() {
        bitField0_ = (bitField0_ & ~0x00080000);
        finishState_ = 0;
        onChanged();
        return this;
      }

      private SQLStatementDetails.SQLStatementDetailsData.Timings timings_;
      private com.google.protobuf.SingleFieldBuilderV3<
          SQLStatementDetails.SQLStatementDetailsData.Timings, SQLStatementDetails.SQLStatementDetailsData.Timings.Builder, SQLStatementDetails.SQLStatementDetailsData.TimingsOrBuilder> timingsBuilder_;
      /**
       * <code>optional .SQLStatementDetailsData.Timings timings = 21;</code>
       * @return Whether the timings field is set.
       */
      public boolean hasTimings() {
        return ((bitField0_ & 0x00100000) != 0);
      }
      /**
       * <code>optional .SQLStatementDetailsData.Timings timings = 21;</code>
       * @return The timings.
       */
      public SQLStatementDetails.SQLStatementDetailsData.Timings getTimings() {
        if (timingsBuilder_ == null) {
          return timings_ == null ? SQLStatementDetails.SQLStatementDetailsData.Timings.getDefaultInstance() : timings_;
        } else {
          return timingsBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SQLStatementDetailsData.Timings timings = 21;</code>
       */
      public Builder setTimings(SQLStatementDetails.SQLStatementDetailsData.Timings value) {
        if (timingsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          timings_ = value;
          onChanged();
        } else {
          timingsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00100000;
        return this;
      }
      /**
       * <code>optional .SQLStatementDetailsData.Timings timings = 21;</code>
       */
      public Builder setTimings(
          SQLStatementDetails.SQLStatementDetailsData.Timings.Builder builderForValue) {
        if (timingsBuilder_ == null) {
          timings_ = builderForValue.build();
          onChanged();
        } else {
          timingsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00100000;
        return this;
      }
      /**
       * <code>optional .SQLStatementDetailsData.Timings timings = 21;</code>
       */
      public Builder mergeTimings(SQLStatementDetails.SQLStatementDetailsData.Timings value) {
        if (timingsBuilder_ == null) {
          if (((bitField0_ & 0x00100000) != 0) &&
              timings_ != null &&
              timings_ != SQLStatementDetails.SQLStatementDetailsData.Timings.getDefaultInstance()) {
            timings_ =
              SQLStatementDetails.SQLStatementDetailsData.Timings.newBuilder(timings_).mergeFrom(value).buildPartial();
          } else {
            timings_ = value;
          }
          onChanged();
        } else {
          timingsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00100000;
        return this;
      }
      /**
       * <code>optional .SQLStatementDetailsData.Timings timings = 21;</code>
       */
      public Builder clearTimings() {
        if (timingsBuilder_ == null) {
          timings_ = null;
          onChanged();
        } else {
          timingsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00100000);
        return this;
      }
      /**
       * <code>optional .SQLStatementDetailsData.Timings timings = 21;</code>
       */
      public SQLStatementDetails.SQLStatementDetailsData.Timings.Builder getTimingsBuilder() {
        bitField0_ |= 0x00100000;
        onChanged();
        return getTimingsFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SQLStatementDetailsData.Timings timings = 21;</code>
       */
      public SQLStatementDetails.SQLStatementDetailsData.TimingsOrBuilder getTimingsOrBuilder() {
        if (timingsBuilder_ != null) {
          return timingsBuilder_.getMessageOrBuilder();
        } else {
          return timings_ == null ?
              SQLStatementDetails.SQLStatementDetailsData.Timings.getDefaultInstance() : timings_;
        }
      }
      /**
       * <code>optional .SQLStatementDetailsData.Timings timings = 21;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SQLStatementDetails.SQLStatementDetailsData.Timings, SQLStatementDetails.SQLStatementDetailsData.Timings.Builder, SQLStatementDetails.SQLStatementDetailsData.TimingsOrBuilder>
          getTimingsFieldBuilder() {
        if (timingsBuilder_ == null) {
          timingsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SQLStatementDetails.SQLStatementDetailsData.Timings, SQLStatementDetails.SQLStatementDetailsData.Timings.Builder, SQLStatementDetails.SQLStatementDetailsData.TimingsOrBuilder>(
                  getTimings(),
                  getParentForChildren(),
                  isClean());
          timings_ = null;
        }
        return timingsBuilder_;
      }

      private SQLStatementDetails.SQLStatementDetailsData.ExecutionResult executionResult_;
      private com.google.protobuf.SingleFieldBuilderV3<
          SQLStatementDetails.SQLStatementDetailsData.ExecutionResult, SQLStatementDetails.SQLStatementDetailsData.ExecutionResult.Builder, SQLStatementDetails.SQLStatementDetailsData.ExecutionResultOrBuilder> executionResultBuilder_;
      /**
       * <code>optional .SQLStatementDetailsData.ExecutionResult execution_result = 22;</code>
       * @return Whether the executionResult field is set.
       */
      public boolean hasExecutionResult() {
        return ((bitField0_ & 0x00200000) != 0);
      }
      /**
       * <code>optional .SQLStatementDetailsData.ExecutionResult execution_result = 22;</code>
       * @return The executionResult.
       */
      public SQLStatementDetails.SQLStatementDetailsData.ExecutionResult getExecutionResult() {
        if (executionResultBuilder_ == null) {
          return executionResult_ == null ? SQLStatementDetails.SQLStatementDetailsData.ExecutionResult.getDefaultInstance() : executionResult_;
        } else {
          return executionResultBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SQLStatementDetailsData.ExecutionResult execution_result = 22;</code>
       */
      public Builder setExecutionResult(SQLStatementDetails.SQLStatementDetailsData.ExecutionResult value) {
        if (executionResultBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          executionResult_ = value;
          onChanged();
        } else {
          executionResultBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00200000;
        return this;
      }
      /**
       * <code>optional .SQLStatementDetailsData.ExecutionResult execution_result = 22;</code>
       */
      public Builder setExecutionResult(
          SQLStatementDetails.SQLStatementDetailsData.ExecutionResult.Builder builderForValue) {
        if (executionResultBuilder_ == null) {
          executionResult_ = builderForValue.build();
          onChanged();
        } else {
          executionResultBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00200000;
        return this;
      }
      /**
       * <code>optional .SQLStatementDetailsData.ExecutionResult execution_result = 22;</code>
       */
      public Builder mergeExecutionResult(SQLStatementDetails.SQLStatementDetailsData.ExecutionResult value) {
        if (executionResultBuilder_ == null) {
          if (((bitField0_ & 0x00200000) != 0) &&
              executionResult_ != null &&
              executionResult_ != SQLStatementDetails.SQLStatementDetailsData.ExecutionResult.getDefaultInstance()) {
            executionResult_ =
              SQLStatementDetails.SQLStatementDetailsData.ExecutionResult.newBuilder(executionResult_).mergeFrom(value).buildPartial();
          } else {
            executionResult_ = value;
          }
          onChanged();
        } else {
          executionResultBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00200000;
        return this;
      }
      /**
       * <code>optional .SQLStatementDetailsData.ExecutionResult execution_result = 22;</code>
       */
      public Builder clearExecutionResult() {
        if (executionResultBuilder_ == null) {
          executionResult_ = null;
          onChanged();
        } else {
          executionResultBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00200000);
        return this;
      }
      /**
       * <code>optional .SQLStatementDetailsData.ExecutionResult execution_result = 22;</code>
       */
      public SQLStatementDetails.SQLStatementDetailsData.ExecutionResult.Builder getExecutionResultBuilder() {
        bitField0_ |= 0x00200000;
        onChanged();
        return getExecutionResultFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SQLStatementDetailsData.ExecutionResult execution_result = 22;</code>
       */
      public SQLStatementDetails.SQLStatementDetailsData.ExecutionResultOrBuilder getExecutionResultOrBuilder() {
        if (executionResultBuilder_ != null) {
          return executionResultBuilder_.getMessageOrBuilder();
        } else {
          return executionResult_ == null ?
              SQLStatementDetails.SQLStatementDetailsData.ExecutionResult.getDefaultInstance() : executionResult_;
        }
      }
      /**
       * <code>optional .SQLStatementDetailsData.ExecutionResult execution_result = 22;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SQLStatementDetails.SQLStatementDetailsData.ExecutionResult, SQLStatementDetails.SQLStatementDetailsData.ExecutionResult.Builder, SQLStatementDetails.SQLStatementDetailsData.ExecutionResultOrBuilder>
          getExecutionResultFieldBuilder() {
        if (executionResultBuilder_ == null) {
          executionResultBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SQLStatementDetails.SQLStatementDetailsData.ExecutionResult, SQLStatementDetails.SQLStatementDetailsData.ExecutionResult.Builder, SQLStatementDetails.SQLStatementDetailsData.ExecutionResultOrBuilder>(
                  getExecutionResult(),
                  getParentForChildren(),
                  isClean());
          executionResult_ = null;
        }
        return executionResultBuilder_;
      }

      private SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics waitForData_;
      private com.google.protobuf.SingleFieldBuilderV3<
          SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics, SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics.Builder, SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatisticsOrBuilder> waitForDataBuilder_;
      /**
       * <code>optional .SQLStatementDetailsData.WaitForDataStatistics wait_for_data = 23;</code>
       * @return Whether the waitForData field is set.
       */
      public boolean hasWaitForData() {
        return ((bitField0_ & 0x00400000) != 0);
      }
      /**
       * <code>optional .SQLStatementDetailsData.WaitForDataStatistics wait_for_data = 23;</code>
       * @return The waitForData.
       */
      public SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics getWaitForData() {
        if (waitForDataBuilder_ == null) {
          return waitForData_ == null ? SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics.getDefaultInstance() : waitForData_;
        } else {
          return waitForDataBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SQLStatementDetailsData.WaitForDataStatistics wait_for_data = 23;</code>
       */
      public Builder setWaitForData(SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics value) {
        if (waitForDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          waitForData_ = value;
          onChanged();
        } else {
          waitForDataBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00400000;
        return this;
      }
      /**
       * <code>optional .SQLStatementDetailsData.WaitForDataStatistics wait_for_data = 23;</code>
       */
      public Builder setWaitForData(
          SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics.Builder builderForValue) {
        if (waitForDataBuilder_ == null) {
          waitForData_ = builderForValue.build();
          onChanged();
        } else {
          waitForDataBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00400000;
        return this;
      }
      /**
       * <code>optional .SQLStatementDetailsData.WaitForDataStatistics wait_for_data = 23;</code>
       */
      public Builder mergeWaitForData(SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics value) {
        if (waitForDataBuilder_ == null) {
          if (((bitField0_ & 0x00400000) != 0) &&
              waitForData_ != null &&
              waitForData_ != SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics.getDefaultInstance()) {
            waitForData_ =
              SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics.newBuilder(waitForData_).mergeFrom(value).buildPartial();
          } else {
            waitForData_ = value;
          }
          onChanged();
        } else {
          waitForDataBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00400000;
        return this;
      }
      /**
       * <code>optional .SQLStatementDetailsData.WaitForDataStatistics wait_for_data = 23;</code>
       */
      public Builder clearWaitForData() {
        if (waitForDataBuilder_ == null) {
          waitForData_ = null;
          onChanged();
        } else {
          waitForDataBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00400000);
        return this;
      }
      /**
       * <code>optional .SQLStatementDetailsData.WaitForDataStatistics wait_for_data = 23;</code>
       */
      public SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics.Builder getWaitForDataBuilder() {
        bitField0_ |= 0x00400000;
        onChanged();
        return getWaitForDataFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SQLStatementDetailsData.WaitForDataStatistics wait_for_data = 23;</code>
       */
      public SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatisticsOrBuilder getWaitForDataOrBuilder() {
        if (waitForDataBuilder_ != null) {
          return waitForDataBuilder_.getMessageOrBuilder();
        } else {
          return waitForData_ == null ?
              SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics.getDefaultInstance() : waitForData_;
        }
      }
      /**
       * <code>optional .SQLStatementDetailsData.WaitForDataStatistics wait_for_data = 23;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics, SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics.Builder, SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatisticsOrBuilder>
          getWaitForDataFieldBuilder() {
        if (waitForDataBuilder_ == null) {
          waitForDataBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics, SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatistics.Builder, SQLStatementDetails.SQLStatementDetailsData.WaitForDataStatisticsOrBuilder>(
                  getWaitForData(),
                  getParentForChildren(),
                  isClean());
          waitForData_ = null;
        }
        return waitForDataBuilder_;
      }

      private SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails multiRowInsert_;
      private com.google.protobuf.SingleFieldBuilderV3<
          SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails, SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails.Builder, SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetailsOrBuilder> multiRowInsertBuilder_;
      /**
       * <code>optional .SQLStatementDetailsData.MultiRowInsertDetails multi_row_insert = 24;</code>
       * @return Whether the multiRowInsert field is set.
       */
      public boolean hasMultiRowInsert() {
        return ((bitField0_ & 0x00800000) != 0);
      }
      /**
       * <code>optional .SQLStatementDetailsData.MultiRowInsertDetails multi_row_insert = 24;</code>
       * @return The multiRowInsert.
       */
      public SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails getMultiRowInsert() {
        if (multiRowInsertBuilder_ == null) {
          return multiRowInsert_ == null ? SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails.getDefaultInstance() : multiRowInsert_;
        } else {
          return multiRowInsertBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SQLStatementDetailsData.MultiRowInsertDetails multi_row_insert = 24;</code>
       */
      public Builder setMultiRowInsert(SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails value) {
        if (multiRowInsertBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          multiRowInsert_ = value;
          onChanged();
        } else {
          multiRowInsertBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00800000;
        return this;
      }
      /**
       * <code>optional .SQLStatementDetailsData.MultiRowInsertDetails multi_row_insert = 24;</code>
       */
      public Builder setMultiRowInsert(
          SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails.Builder builderForValue) {
        if (multiRowInsertBuilder_ == null) {
          multiRowInsert_ = builderForValue.build();
          onChanged();
        } else {
          multiRowInsertBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00800000;
        return this;
      }
      /**
       * <code>optional .SQLStatementDetailsData.MultiRowInsertDetails multi_row_insert = 24;</code>
       */
      public Builder mergeMultiRowInsert(SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails value) {
        if (multiRowInsertBuilder_ == null) {
          if (((bitField0_ & 0x00800000) != 0) &&
              multiRowInsert_ != null &&
              multiRowInsert_ != SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails.getDefaultInstance()) {
            multiRowInsert_ =
              SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails.newBuilder(multiRowInsert_).mergeFrom(value).buildPartial();
          } else {
            multiRowInsert_ = value;
          }
          onChanged();
        } else {
          multiRowInsertBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00800000;
        return this;
      }
      /**
       * <code>optional .SQLStatementDetailsData.MultiRowInsertDetails multi_row_insert = 24;</code>
       */
      public Builder clearMultiRowInsert() {
        if (multiRowInsertBuilder_ == null) {
          multiRowInsert_ = null;
          onChanged();
        } else {
          multiRowInsertBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00800000);
        return this;
      }
      /**
       * <code>optional .SQLStatementDetailsData.MultiRowInsertDetails multi_row_insert = 24;</code>
       */
      public SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails.Builder getMultiRowInsertBuilder() {
        bitField0_ |= 0x00800000;
        onChanged();
        return getMultiRowInsertFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SQLStatementDetailsData.MultiRowInsertDetails multi_row_insert = 24;</code>
       */
      public SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetailsOrBuilder getMultiRowInsertOrBuilder() {
        if (multiRowInsertBuilder_ != null) {
          return multiRowInsertBuilder_.getMessageOrBuilder();
        } else {
          return multiRowInsert_ == null ?
              SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails.getDefaultInstance() : multiRowInsert_;
        }
      }
      /**
       * <code>optional .SQLStatementDetailsData.MultiRowInsertDetails multi_row_insert = 24;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails, SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails.Builder, SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetailsOrBuilder>
          getMultiRowInsertFieldBuilder() {
        if (multiRowInsertBuilder_ == null) {
          multiRowInsertBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails, SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetails.Builder, SQLStatementDetails.SQLStatementDetailsData.MultiRowInsertDetailsOrBuilder>(
                  getMultiRowInsert(),
                  getParentForChildren(),
                  isClean());
          multiRowInsert_ = null;
        }
        return multiRowInsertBuilder_;
      }

      private java.lang.Object auxiliaryData_ = "";
      /**
       * <pre>
       **
       * The SQL controller typically collects a lot of detailed information for each
       * SQL statement execution. For example, profiling data for the individual execution
       * phases are gathered. A dump (in XML format) of those information is stored so
       * that it is available for problem determination purposes.
       * </pre>
       *
       * <code>optional string auxiliary_data = 25;</code>
       * @return Whether the auxiliaryData field is set.
       */
      public boolean hasAuxiliaryData() {
        return ((bitField0_ & 0x01000000) != 0);
      }
      /**
       * <pre>
       **
       * The SQL controller typically collects a lot of detailed information for each
       * SQL statement execution. For example, profiling data for the individual execution
       * phases are gathered. A dump (in XML format) of those information is stored so
       * that it is available for problem determination purposes.
       * </pre>
       *
       * <code>optional string auxiliary_data = 25;</code>
       * @return The auxiliaryData.
       */
      public java.lang.String getAuxiliaryData() {
        java.lang.Object ref = auxiliaryData_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            auxiliaryData_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       **
       * The SQL controller typically collects a lot of detailed information for each
       * SQL statement execution. For example, profiling data for the individual execution
       * phases are gathered. A dump (in XML format) of those information is stored so
       * that it is available for problem determination purposes.
       * </pre>
       *
       * <code>optional string auxiliary_data = 25;</code>
       * @return The bytes for auxiliaryData.
       */
      public com.google.protobuf.ByteString
          getAuxiliaryDataBytes() {
        java.lang.Object ref = auxiliaryData_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          auxiliaryData_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       **
       * The SQL controller typically collects a lot of detailed information for each
       * SQL statement execution. For example, profiling data for the individual execution
       * phases are gathered. A dump (in XML format) of those information is stored so
       * that it is available for problem determination purposes.
       * </pre>
       *
       * <code>optional string auxiliary_data = 25;</code>
       * @param value The auxiliaryData to set.
       * @return This builder for chaining.
       */
      public Builder setAuxiliaryData(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x01000000;
        auxiliaryData_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * The SQL controller typically collects a lot of detailed information for each
       * SQL statement execution. For example, profiling data for the individual execution
       * phases are gathered. A dump (in XML format) of those information is stored so
       * that it is available for problem determination purposes.
       * </pre>
       *
       * <code>optional string auxiliary_data = 25;</code>
       * @return This builder for chaining.
       */
      public Builder clearAuxiliaryData() {
        bitField0_ = (bitField0_ & ~0x01000000);
        auxiliaryData_ = getDefaultInstance().getAuxiliaryData();
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * The SQL controller typically collects a lot of detailed information for each
       * SQL statement execution. For example, profiling data for the individual execution
       * phases are gathered. A dump (in XML format) of those information is stored so
       * that it is available for problem determination purposes.
       * </pre>
       *
       * <code>optional string auxiliary_data = 25;</code>
       * @param value The bytes for auxiliaryData to set.
       * @return This builder for chaining.
       */
      public Builder setAuxiliaryDataBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x01000000;
        auxiliaryData_ = value;
        onChanged();
        return this;
      }

      private SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails clientAccountingDetails_;
      private com.google.protobuf.SingleFieldBuilderV3<
          SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails, SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails.Builder, SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetailsOrBuilder> clientAccountingDetailsBuilder_;
      /**
       * <code>optional .SQLStatementDetailsData.ClientAccountingDetails client_accounting_details = 26;</code>
       * @return Whether the clientAccountingDetails field is set.
       */
      public boolean hasClientAccountingDetails() {
        return ((bitField0_ & 0x02000000) != 0);
      }
      /**
       * <code>optional .SQLStatementDetailsData.ClientAccountingDetails client_accounting_details = 26;</code>
       * @return The clientAccountingDetails.
       */
      public SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails getClientAccountingDetails() {
        if (clientAccountingDetailsBuilder_ == null) {
          return clientAccountingDetails_ == null ? SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails.getDefaultInstance() : clientAccountingDetails_;
        } else {
          return clientAccountingDetailsBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SQLStatementDetailsData.ClientAccountingDetails client_accounting_details = 26;</code>
       */
      public Builder setClientAccountingDetails(SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails value) {
        if (clientAccountingDetailsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          clientAccountingDetails_ = value;
          onChanged();
        } else {
          clientAccountingDetailsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x02000000;
        return this;
      }
      /**
       * <code>optional .SQLStatementDetailsData.ClientAccountingDetails client_accounting_details = 26;</code>
       */
      public Builder setClientAccountingDetails(
          SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails.Builder builderForValue) {
        if (clientAccountingDetailsBuilder_ == null) {
          clientAccountingDetails_ = builderForValue.build();
          onChanged();
        } else {
          clientAccountingDetailsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x02000000;
        return this;
      }
      /**
       * <code>optional .SQLStatementDetailsData.ClientAccountingDetails client_accounting_details = 26;</code>
       */
      public Builder mergeClientAccountingDetails(SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails value) {
        if (clientAccountingDetailsBuilder_ == null) {
          if (((bitField0_ & 0x02000000) != 0) &&
              clientAccountingDetails_ != null &&
              clientAccountingDetails_ != SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails.getDefaultInstance()) {
            clientAccountingDetails_ =
              SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails.newBuilder(clientAccountingDetails_).mergeFrom(value).buildPartial();
          } else {
            clientAccountingDetails_ = value;
          }
          onChanged();
        } else {
          clientAccountingDetailsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x02000000;
        return this;
      }
      /**
       * <code>optional .SQLStatementDetailsData.ClientAccountingDetails client_accounting_details = 26;</code>
       */
      public Builder clearClientAccountingDetails() {
        if (clientAccountingDetailsBuilder_ == null) {
          clientAccountingDetails_ = null;
          onChanged();
        } else {
          clientAccountingDetailsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x02000000);
        return this;
      }
      /**
       * <code>optional .SQLStatementDetailsData.ClientAccountingDetails client_accounting_details = 26;</code>
       */
      public SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails.Builder getClientAccountingDetailsBuilder() {
        bitField0_ |= 0x02000000;
        onChanged();
        return getClientAccountingDetailsFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SQLStatementDetailsData.ClientAccountingDetails client_accounting_details = 26;</code>
       */
      public SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetailsOrBuilder getClientAccountingDetailsOrBuilder() {
        if (clientAccountingDetailsBuilder_ != null) {
          return clientAccountingDetailsBuilder_.getMessageOrBuilder();
        } else {
          return clientAccountingDetails_ == null ?
              SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails.getDefaultInstance() : clientAccountingDetails_;
        }
      }
      /**
       * <code>optional .SQLStatementDetailsData.ClientAccountingDetails client_accounting_details = 26;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails, SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails.Builder, SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetailsOrBuilder>
          getClientAccountingDetailsFieldBuilder() {
        if (clientAccountingDetailsBuilder_ == null) {
          clientAccountingDetailsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails, SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetails.Builder, SQLStatementDetails.SQLStatementDetailsData.ClientAccountingDetailsOrBuilder>(
                  getClientAccountingDetails(),
                  getParentForChildren(),
                  isClean());
          clientAccountingDetails_ = null;
        }
        return clientAccountingDetailsBuilder_;
      }

      private java.lang.Object backendSqlStatementTextHex_ = "";
      /**
       * <pre>
       **
       * Deprecrated.
       * In the past, we used to store the backend SQL statement text as hex representation
       * for all the individual bytes. That can be helpful to figure out, for example,
       * whether a character is a regular space (ASCII code 0x20) or non-breaking space
       * (Unicode code U+00A0).
       * We no longer store that hex representation these days. System command
       * "hexdump -C &lt;file&gt;" can be used on the SQL history file to inspect the original
       * SQL statement text and/or the backend SQL statement text.
       * </pre>
       *
       * <code>optional string backend_sql_statement_text_hex = 27;</code>
       * @return Whether the backendSqlStatementTextHex field is set.
       */
      public boolean hasBackendSqlStatementTextHex() {
        return ((bitField0_ & 0x04000000) != 0);
      }
      /**
       * <pre>
       **
       * Deprecrated.
       * In the past, we used to store the backend SQL statement text as hex representation
       * for all the individual bytes. That can be helpful to figure out, for example,
       * whether a character is a regular space (ASCII code 0x20) or non-breaking space
       * (Unicode code U+00A0).
       * We no longer store that hex representation these days. System command
       * "hexdump -C &lt;file&gt;" can be used on the SQL history file to inspect the original
       * SQL statement text and/or the backend SQL statement text.
       * </pre>
       *
       * <code>optional string backend_sql_statement_text_hex = 27;</code>
       * @return The backendSqlStatementTextHex.
       */
      public java.lang.String getBackendSqlStatementTextHex() {
        java.lang.Object ref = backendSqlStatementTextHex_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            backendSqlStatementTextHex_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       **
       * Deprecrated.
       * In the past, we used to store the backend SQL statement text as hex representation
       * for all the individual bytes. That can be helpful to figure out, for example,
       * whether a character is a regular space (ASCII code 0x20) or non-breaking space
       * (Unicode code U+00A0).
       * We no longer store that hex representation these days. System command
       * "hexdump -C &lt;file&gt;" can be used on the SQL history file to inspect the original
       * SQL statement text and/or the backend SQL statement text.
       * </pre>
       *
       * <code>optional string backend_sql_statement_text_hex = 27;</code>
       * @return The bytes for backendSqlStatementTextHex.
       */
      public com.google.protobuf.ByteString
          getBackendSqlStatementTextHexBytes() {
        java.lang.Object ref = backendSqlStatementTextHex_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          backendSqlStatementTextHex_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       **
       * Deprecrated.
       * In the past, we used to store the backend SQL statement text as hex representation
       * for all the individual bytes. That can be helpful to figure out, for example,
       * whether a character is a regular space (ASCII code 0x20) or non-breaking space
       * (Unicode code U+00A0).
       * We no longer store that hex representation these days. System command
       * "hexdump -C &lt;file&gt;" can be used on the SQL history file to inspect the original
       * SQL statement text and/or the backend SQL statement text.
       * </pre>
       *
       * <code>optional string backend_sql_statement_text_hex = 27;</code>
       * @param value The backendSqlStatementTextHex to set.
       * @return This builder for chaining.
       */
      public Builder setBackendSqlStatementTextHex(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x04000000;
        backendSqlStatementTextHex_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * Deprecrated.
       * In the past, we used to store the backend SQL statement text as hex representation
       * for all the individual bytes. That can be helpful to figure out, for example,
       * whether a character is a regular space (ASCII code 0x20) or non-breaking space
       * (Unicode code U+00A0).
       * We no longer store that hex representation these days. System command
       * "hexdump -C &lt;file&gt;" can be used on the SQL history file to inspect the original
       * SQL statement text and/or the backend SQL statement text.
       * </pre>
       *
       * <code>optional string backend_sql_statement_text_hex = 27;</code>
       * @return This builder for chaining.
       */
      public Builder clearBackendSqlStatementTextHex() {
        bitField0_ = (bitField0_ & ~0x04000000);
        backendSqlStatementTextHex_ = getDefaultInstance().getBackendSqlStatementTextHex();
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * Deprecrated.
       * In the past, we used to store the backend SQL statement text as hex representation
       * for all the individual bytes. That can be helpful to figure out, for example,
       * whether a character is a regular space (ASCII code 0x20) or non-breaking space
       * (Unicode code U+00A0).
       * We no longer store that hex representation these days. System command
       * "hexdump -C &lt;file&gt;" can be used on the SQL history file to inspect the original
       * SQL statement text and/or the backend SQL statement text.
       * </pre>
       *
       * <code>optional string backend_sql_statement_text_hex = 27;</code>
       * @param value The bytes for backendSqlStatementTextHex to set.
       * @return This builder for chaining.
       */
      public Builder setBackendSqlStatementTextHexBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x04000000;
        backendSqlStatementTextHex_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:SQLStatementDetailsData)
    }

    // @@protoc_insertion_point(class_scope:SQLStatementDetailsData)
    private static final SQLStatementDetails.SQLStatementDetailsData DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SQLStatementDetails.SQLStatementDetailsData();
    }

    public static SQLStatementDetails.SQLStatementDetailsData getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<SQLStatementDetailsData>
        PARSER = new com.google.protobuf.AbstractParser<SQLStatementDetailsData>() {
      @java.lang.Override
      public SQLStatementDetailsData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SQLStatementDetailsData(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SQLStatementDetailsData> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SQLStatementDetailsData> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public SQLStatementDetails.SQLStatementDetailsData getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SQLStatementDetailsData_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SQLStatementDetailsData_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SQLStatementDetailsData_QuerySpecialRegisters_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SQLStatementDetailsData_QuerySpecialRegisters_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SQLStatementDetailsData_Timings_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SQLStatementDetailsData_Timings_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SQLStatementDetailsData_ExecutionResult_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SQLStatementDetailsData_ExecutionResult_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SQLStatementDetailsData_WaitForDataStatistics_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SQLStatementDetailsData_WaitForDataStatistics_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SQLStatementDetailsData_MultiRowInsertDetails_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SQLStatementDetailsData_MultiRowInsertDetails_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SQLStatementDetailsData_ClientAccountingDetails_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SQLStatementDetailsData_ClientAccountingDetails_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\031SQLStatementDetails.proto\"\300\032\n\027SQLState" +
      "mentDetailsData\022\024\n\014statement_id\030\001 \001(\004\022\017\n" +
      "\007task_id\030\002 \001(\004\022%\n\035database_system_locati" +
      "on_name\030\003 \001(\t\022\031\n\021correlation_token\030\004 \001(\t" +
      "\022\030\n\020original_user_id\030\005 \001(\t\022\025\n\rexternal_n" +
      "ame\030\006 \001(\t\022\027\n\017peer_identifier\030\007 \001(\t\022#\n\033or" +
      "iginal_sql_statement_text\030\010 \001(\t\022(\n origi" +
      "nal_sql_statement_text_hash\030\t \001(\004\022\"\n\032bac" +
      "kend_sql_statement_text\030\n \001(\t\022\'\n\037backend" +
      "_sql_statement_text_hash\030\013 \001(\004\022\024\n\014packag" +
      "e_name\030\014 \001(\t\022\025\n\rcollection_id\030\r \001(\t\022$\n\034d" +
      "bid_obid_of_accessed_tables\030\016 \001(\t\022\036\n\026bac" +
      "kend_sql_session_id\030\017 \001(\003\022\"\n\032backend_sql" +
      "_application_id\030\020 \001(\t\022\025\n\rtask_priority\030\021" +
      " \001(\005\022I\n\021special_registers\030\022 \001(\0132..SQLSta" +
      "tementDetailsData.QuerySpecialRegisters\022" +
      "\020\n\010finished\030\023 \001(\010\022\024\n\014finish_state\030\024 \001(\r\022" +
      "1\n\007timings\030\025 \001(\0132 .SQLStatementDetailsDa" +
      "ta.Timings\022B\n\020execution_result\030\026 \001(\0132(.S" +
      "QLStatementDetailsData.ExecutionResult\022E" +
      "\n\rwait_for_data\030\027 \001(\0132..SQLStatementDeta" +
      "ilsData.WaitForDataStatistics\022H\n\020multi_r" +
      "ow_insert\030\030 \001(\0132..SQLStatementDetailsDat" +
      "a.MultiRowInsertDetails\022\026\n\016auxiliary_dat" +
      "a\030\031 \001(\t\022S\n\031client_accounting_details\030\032 \001" +
      "(\01320.SQLStatementDetailsData.ClientAccou" +
      "ntingDetails\022&\n\036backend_sql_statement_te" +
      "xt_hex\030\033 \001(\t\032\372\001\n\025QuerySpecialRegisters\022\"" +
      "\n\032client_reference_timestamp\030\001 \001(\t\022!\n\031cl" +
      "ient_reference_timezone\030\002 \001(\t\022/\n\'client_" +
      "reference_timestamp_receive_time\030\003 \001(\004\022\026" +
      "\n\016client_user_id\030\004 \001(\t\022\032\n\022client_worksta" +
      "tion\030\005 \001(\t\022\032\n\022client_application\030\006 \001(\t\022\031" +
      "\n\021client_accounting\030\007 \001(\t\032\351\006\n\007Timings\022\"\n" +
      "\032real_world_entry_timestamp\030\001 \001(\t\022\035\n\025rea" +
      "l_world_entry_time\030\002 \001(\004\022\031\n\021system_entry" +
      "_time\030\003 \001(\004\022\032\n\022prepare_start_time\030\004 \001(\004\022" +
      "\033\n\023prepare_finish_time\030\005 \001(\004\022$\n\034backend_" +
      "execution_start_time\030\006 \001(\004\022$\n\034backend_fi" +
      "rst_row_fetch_time\030\007 \001(\004\022%\n\035backend_exec" +
      "ution_finish_time\030\010 \001(\004\022\"\n\032client_last_r" +
      "ow_fetch_time\030\t \001(\004\022\032\n\022system_finish_tim" +
      "e\030\n \001(\004\022!\n\031post_processing_exit_time\030\013 \001" +
      "(\004\022\024\n\014dwa_cpu_time\030\014 \001(\004\022\030\n\020backend_cpu_" +
      "time\030\r \001(\004\022\031\n\021backend_wait_time\030\016 \001(\004\022*\n" +
      "\"backend_accounting_collection_time\030\017 \001(" +
      "\004\022\024\n\014prepare_time\030\020 \001(\001\022\032\n\022backendDBSExe" +
      "cTime\030\021 \001(\001\022\022\n\nfetch_time\030\022 \001(\001\022\030\n\020total" +
      "ElapsedTime\030\023 \001(\001\022\032\n\022postProcessingTime\030" +
      "\024 \001(\001\0220\n(cached_parsed_client_reference_" +
      "timestamp\030\025 \001(\004\022&\n\036total_continue_query_" +
      "wait_time\030\026 \001(\003\022(\n average_continue_quer" +
      "y_wait_time\030\027 \001(\003\022)\n!smallest_continue_q" +
      "uery_wait_time\030\030 \001(\003\022(\n largest_continue" +
      "_query_wait_time\030\031 \001(\003\022%\n\035num_continue_q" +
      "uery_wait_times\030\032 \001(\003\032\210\001\n\017ExecutionResul" +
      "t\022\035\n\025backend_error_message\030\001 \001(\t\022\021\n\tsql_" +
      "state\030\002 \001(\t\022\020\n\010sql_code\030\003 \001(\005\022\027\n\017num_res" +
      "ult_rows\030\004 \001(\004\022\030\n\020num_result_bytes\030\005 \001(\004" +
      "\032\260\003\n\025WaitForDataStatistics\022$\n\034wait_for_l" +
      "og_position_result\030\001 \001(\r\0221\n)time_waited_" +
      "for_delay_protocol_start_time\030\002 \001(\004\0222\n*t" +
      "ime_waited_for_delay_protocol_finish_tim" +
      "e\030\003 \001(\004\0222\n*count_wait_time_for_delay_pro" +
      "tocol_expired\030\004 \001(\r\022/\n\'log_record_sequen" +
      "ce_number_log_position\030\005 \001(\t\022*\n\"relative" +
      "_byte_address_log_position\030\006 \001(\t\0225\n-allo" +
      "w_non_replicated_tables_for_wait_for_dat" +
      "a\030\007 \001(\010\022\032\n\022use_delay_protocol\030\010 \001(\010\022&\n\036t" +
      "ime_waited_for_delay_protocol\030\t \001(\001\032\223\001\n\025" +
      "MultiRowInsertDetails\022\017\n\007enabled\030\001 \001(\010\022\016" +
      "\n\006atomic\030\002 \001(\010\022+\n#number_of_rows_receive" +
      "d_from_client\030\003 \001(\004\022,\n$number_of_rows_su" +
      "ccessfully_inserted\030\004 \001(\004\032\332\003\n\027ClientAcco" +
      "untingDetails\022\031\n\021client_product_id\030\001 \001(\t" +
      "\022\034\n\024client_location_name\030\002 \001(\t\022\031\n\021client" +
      "_network_id\030\003 \001(\t\022\026\n\016client_lu_name\030\004 \001(" +
      "\t\022\036\n\026client_connection_name\030\005 \001(\t\022\036\n\026cli" +
      "ent_connection_type\030\006 \001(\t\022\035\n\025client_corr" +
      "elation_id\030\007 \001(\t\022\037\n\027client_authorization" +
      "_id\030\010 \001(\t\022\032\n\022client_workstation\030\t \001(\t\022\032\n" +
      "\022client_application\030\n \001(\t\022\026\n\016client_user" +
      "_id\030\013 \001(\t\022\030\n\020client_plan_name\030\014 \001(\t\022!\n\031c" +
      "lient_accounting_details\030\r \001(\t\022\025\n\rdb2_sy" +
      "stem_id\030\016 \001(\t\022\027\n\017db2_member_name\030\017 \001(\t\022\026" +
      "\n\016db2_group_name\030\020 \001(\t"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_SQLStatementDetailsData_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_SQLStatementDetailsData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SQLStatementDetailsData_descriptor,
        new java.lang.String[] { "StatementId", "TaskId", "DatabaseSystemLocationName", "CorrelationToken", "OriginalUserId", "ExternalName", "PeerIdentifier", "OriginalSqlStatementText", "OriginalSqlStatementTextHash", "BackendSqlStatementText", "BackendSqlStatementTextHash", "PackageName", "CollectionId", "DbidObidOfAccessedTables", "BackendSqlSessionId", "BackendSqlApplicationId", "TaskPriority", "SpecialRegisters", "Finished", "FinishState", "Timings", "ExecutionResult", "WaitForData", "MultiRowInsert", "AuxiliaryData", "ClientAccountingDetails", "BackendSqlStatementTextHex", });
    internal_static_SQLStatementDetailsData_QuerySpecialRegisters_descriptor =
      internal_static_SQLStatementDetailsData_descriptor.getNestedTypes().get(0);
    internal_static_SQLStatementDetailsData_QuerySpecialRegisters_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SQLStatementDetailsData_QuerySpecialRegisters_descriptor,
        new java.lang.String[] { "ClientReferenceTimestamp", "ClientReferenceTimezone", "ClientReferenceTimestampReceiveTime", "ClientUserId", "ClientWorkstation", "ClientApplication", "ClientAccounting", });
    internal_static_SQLStatementDetailsData_Timings_descriptor =
      internal_static_SQLStatementDetailsData_descriptor.getNestedTypes().get(1);
    internal_static_SQLStatementDetailsData_Timings_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SQLStatementDetailsData_Timings_descriptor,
        new java.lang.String[] { "RealWorldEntryTimestamp", "RealWorldEntryTime", "SystemEntryTime", "PrepareStartTime", "PrepareFinishTime", "BackendExecutionStartTime", "BackendFirstRowFetchTime", "BackendExecutionFinishTime", "ClientLastRowFetchTime", "SystemFinishTime", "PostProcessingExitTime", "DwaCpuTime", "BackendCpuTime", "BackendWaitTime", "BackendAccountingCollectionTime", "PrepareTime", "BackendDBSExecTime", "FetchTime", "TotalElapsedTime", "PostProcessingTime", "CachedParsedClientReferenceTimestamp", "TotalContinueQueryWaitTime", "AverageContinueQueryWaitTime", "SmallestContinueQueryWaitTime", "LargestContinueQueryWaitTime", "NumContinueQueryWaitTimes", });
    internal_static_SQLStatementDetailsData_ExecutionResult_descriptor =
      internal_static_SQLStatementDetailsData_descriptor.getNestedTypes().get(2);
    internal_static_SQLStatementDetailsData_ExecutionResult_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SQLStatementDetailsData_ExecutionResult_descriptor,
        new java.lang.String[] { "BackendErrorMessage", "SqlState", "SqlCode", "NumResultRows", "NumResultBytes", });
    internal_static_SQLStatementDetailsData_WaitForDataStatistics_descriptor =
      internal_static_SQLStatementDetailsData_descriptor.getNestedTypes().get(3);
    internal_static_SQLStatementDetailsData_WaitForDataStatistics_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SQLStatementDetailsData_WaitForDataStatistics_descriptor,
        new java.lang.String[] { "WaitForLogPositionResult", "TimeWaitedForDelayProtocolStartTime", "TimeWaitedForDelayProtocolFinishTime", "CountWaitTimeForDelayProtocolExpired", "LogRecordSequenceNumberLogPosition", "RelativeByteAddressLogPosition", "AllowNonReplicatedTablesForWaitForData", "UseDelayProtocol", "TimeWaitedForDelayProtocol", });
    internal_static_SQLStatementDetailsData_MultiRowInsertDetails_descriptor =
      internal_static_SQLStatementDetailsData_descriptor.getNestedTypes().get(4);
    internal_static_SQLStatementDetailsData_MultiRowInsertDetails_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SQLStatementDetailsData_MultiRowInsertDetails_descriptor,
        new java.lang.String[] { "Enabled", "Atomic", "NumberOfRowsReceivedFromClient", "NumberOfRowsSuccessfullyInserted", });
    internal_static_SQLStatementDetailsData_ClientAccountingDetails_descriptor =
      internal_static_SQLStatementDetailsData_descriptor.getNestedTypes().get(5);
    internal_static_SQLStatementDetailsData_ClientAccountingDetails_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SQLStatementDetailsData_ClientAccountingDetails_descriptor,
        new java.lang.String[] { "ClientProductId", "ClientLocationName", "ClientNetworkId", "ClientLuName", "ClientConnectionName", "ClientConnectionType", "ClientCorrelationId", "ClientAuthorizationId", "ClientWorkstation", "ClientApplication", "ClientUserId", "ClientPlanName", "ClientAccountingDetails", "Db2SystemId", "Db2MemberName", "Db2GroupName", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
